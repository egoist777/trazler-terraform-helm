{"version":3,"file":"src_app_modules_results_transfers_transfers_module_ts.js","mappings":";;;;;;;;;;;;;AAAO,MAAM,mBAAmB;IACrB,MAAM,CAAC,aAAa,CAAC,SAAc;QACtC,MAAM,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC;QACzC,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;YACzB,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACrB,UAAU,EAAE,CAAC;aAChB;SACJ;QACD,UAAU,IAAI,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,OAAO,UAAU,CAAC;IACtB,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,SAAc;QACxC,MAAM,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC;QACzC,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;YACzB,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE;gBAC7C,YAAY,EAAE,CAAC;aAClB;SACJ;QACD,OAAO,YAAY,CAAC;IACxB,CAAC;CACJ;;;;;;;;;;;;;;;AChBM,MAAM,mBAAmB;IAC5B,gBAAe,CAAC;IAET,MAAM,CAAC,sBAAsB,CAAC,OAA4B;QAC7D,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,aAAa,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,cAAc,EAAE;YAC7E,OAAO,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,CAAC;SAC1D;QAED,OAAO,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAEO,MAAM,CAAC,iCAAiC,CAAC,OAA4B;QACzE,IAAI,oBAAoB,GAAG,CAAC,CAAC;QAC7B,MAAM,eAAe,GAAiD,EAAE,CAAC;QAEzE,OAAO,CAAC,OAAO,CAAC,CAAC,UAAsB,EAAE,EAAE;;YACvC,IAAI,UAAU,CAAC,MAAM,KAAK,sBAAsB,IAAI,UAAU,CAAC,MAAM,KAAK,qBAAqB,EAAE;gBAC7F,gBAAU,CAAC,QAAQ,0CAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CACrC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAkB,EAAE,EAAE;oBACnC,IAAI,MAAM,CAAC,UAAU,EAAE;wBACnB,eAAe,CAAC,IAAI,CAChB,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAA4B,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CACpF,CAAC;qBACL;yBAAM,IAAI,MAAM,CAAC,MAAM,EAAE;wBACtB,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;qBACvC;gBACL,CAAC,CAAC,CACL,CAAC;gBACF,oBAAoB,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;aACrG;iBAAM;gBACH,IAAI,UAAU,CAAC,UAAU,EAAE;oBACvB,oBAAoB,IAAI,UAAU,CAAC,UAAU;yBACxC,MAAM,CAAC,CAAC,QAA4B,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;yBAC5D,MAAM,CAAC,CAAC,GAAW,EAAE,QAA4B,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;iBAClG;qBAAM,IAAI,UAAU,CAAC,MAAM,EAAE;oBAC1B,oBAAoB,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC9D;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAEO,MAAM,CAAC,6BAA6B,CAAC,OAA4B;QACrE,IAAI,oBAAoB,GAAG,CAAC,CAAC;QAC7B,OAAO,CAAC,OAAO,CAAC,CAAC,UAAsB,EAAE,EAAE;YACvC,IAAI,UAAU,CAAC,UAAU,EAAE;gBACvB,oBAAoB,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,CAChD,CAAC,GAAW,EAAE,QAA4B,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAC9E,CAAC,CACJ,CAAC;aACL;iBAAM,IAAI,UAAU,CAAC,MAAM,EAAE;gBAC1B,oBAAoB,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC9D;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,oBAAoB,CAAC;IAChC,CAAC;CACJ;;;;;;;;;;;;;;;;;;;;;;ACjEwG;;;;;;;;;ICGjG,yEAAgE;IAExD,uDAMJ;;IAAA,4DAAqB;;;IANjB,0DAMJ;IANI,oQAMJ;;;;IAGA,2FAOC;IADG,4XAAU,kDAAoC,CAAC,cAAc,IAAC;IAElE,4DAAwB;;;IANpB,iGAAiC;;;;IAQrC,+FAOC;IADG,wZAAmB,oDAAoC,CAAC,cAAc,IAAC;IAC1E,4DAA4B;;;IALzB,iGAAiC;;;IAbzC,yEAA0D;IACtD,0MAQwB;IAExB,kNAO6B;IACjC,4DAAM;;;IAjBG,0DAAqC;IAArC,wGAAqC;IAUrC,0DAAoC;IAApC,uGAAoC;;;IAvBjD,wEAAqD;IACjD,gKASM;IACN,gKAmBM;IACV,qEAAe;;;IA9B4B,0DAAuB;IAAvB,0FAAuB;IAU7B,0DAAuB;IAAvB,0FAAuB;;;IAuBxD,yEAGC;IAEO,uDAMJ;;IAAA,4DAAqB;;;IANjB,0DAMJ;IANI,qQAMJ;;;;IAGA,4FAOC;IADG,8XAAU,oDAAoC,CAAC,cAAc,IAAC;IACjE,4DAAwB;;;IALrB,kGAAiC;;;;IAOrC,+FAOC;IADG,wZAAmB,oDAAoC,CAAC,cAAc,IAAC;IAC1E,4DAA4B;;;IALzB,kGAAiC;;;IAZzC,yEAA6G;IACzG,0MAOyB;IAEzB,kNAO6B;IACjC,4DAAM;;;IAhBG,0DAAqC;IAArC,yGAAqC;IASrC,0DAAoC;IAApC,wGAAoC;;;IAQ7C,yEAGC;IAEO,uDAMJ;;IAAA,4DAAqB;;;IANjB,0DAMJ;IANI,qQAMJ;;;;IAGA,4FAOC;IADG,8XAAU,oDAAoC,CAAC,cAAc,IAAC;IACjE,4DAAwB;;;IALrB,kGAAiC;;;;IAOrC,+FAOC;IADG,wZAAmB,oDAAoC,CAAC,cAAc,IAAC;IAC1E,4DAA4B;;;IALzB,kGAAiC;;;IAZzC,yEAA6G;IACzG,0MAOyB;IAEzB,kNAO6B;IACjC,4DAAM;;;IAhBG,0DAAqC;IAArC,yGAAqC;IASrC,0DAAoC;IAApC,wGAAoC;;;IAzDjD,wEAAqD;IACjD,gKAYM;IACN,gKAkBM;IACN,gKAYM;IACN,gKAkBM;IACV,qEAAe;;;IA9DN,0DAA0E;IAA1E,2JAA0E;IAW9C,0DAA0E;IAA1E,2JAA0E;IAqBtG,0DAA0E;IAA1E,2JAA0E;IAW9C,0DAA0E;IAA1E,2JAA0E;;;IAjFnH,wEAAoC;IAEhC,mKA+Be;IAEf,mKAiEe;IACnB,qEAAe;;;IAnGI,0DAAoC;IAApC,uGAAoC;IAiCpC,0DAAoC;IAApC,uGAAoC;;;IAqEnD,yEAAuE;IAE/D,uDACJ;;IAAA,4DAAqB;;IADjB,0DACJ;IADI,gKACJ;;;;IAGA,4FAOC;IADG,+WAAU,oDAAoC,CAAC,cAAc,IAAC;IACjE,4DAAwB;;;IALrB,kGAAiC;;;;IAOrC,+FAOC;IADG,yYAAmB,oDAAoC,CAAC,cAAc,IAAC;IAC1E,4DAA4B;;;IALzB,kGAAiC;;;IAZzC,yEAAiE;IAC7D,2LAOyB;IAEzB,mMAO6B;IACjC,4DAAM;;;IAhBG,0DAAqC;IAArC,yGAAqC;IASrC,0DAAoC;IAApC,wGAAoC;;;IAjBjD,wEAAqC;IACjC,iJAIM;IACN,iJAkBM;IACV,qEAAe;;;IAxB4B,0DAA8B;IAA9B,iGAA8B;IAKpC,0DAA8B;IAA9B,iGAA8B;;ADpG5D,MAAM,sCAAsC;IAU/C,YAAmB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAT1C,kBAAa,GAAG,KAAK,CAAC;QACtB,sBAAiB,GAAe,EAAE,CAAC;QACnC,eAAU,GAAG,EAAE,CAAC;QAChB,UAAK,GAAG,CAAC,CAAC;QACV,sBAAiB,GAAG,EAAE,CAAC;QACvB,oBAAe,GAAG,CAAC,CAAC;QAEnB,oBAAe,GAAyB,IAAI,uDAAY,EAAU,CAAC;QACtE,6BAAwB,GAAkB,IAAI,CAAC;IACA,CAAC;IAEvD,QAAQ;QACJ,mGAAmG;QACnG,iGAAiG;QACjG,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,OAAsB;QAC9B,IAAI,OAAO,CAAC,mBAAmB,CAAC,IAAI,OAAO,CAAC,mBAAmB,CAAC,CAAC,YAAY,EAAE;YAC3E,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC;SAClF;IACL,CAAC;IAEM,iBAAiB,CAAC,cAAsB;QAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC;;4HA1BQ,sCAAsC;oIAAtC,sCAAsC;QCTnD,oJAqGe;QAEf,oJAyBe;;QAhIA,mFAAmB;QAuGnB,0DAAoB;QAApB,oFAAoB;;;;;;;;;;;;;;;;;;;;;;;;;AC7FZ;;;;;;;;;;;;;ICAnB,wEAKC;IACG,yEAAsC;IAE9B,uDAYJ;;;IAAA,4DAAqB;IAE7B,qEAAe;;;IAdH,0DAYJ;IAZI,4eAYJ;;;;IAYA,4FAMC;IAFG,2bAAoB,6BAAmB,IAAC;IAE3C,4DAAwB;;;;IAJrB,iFAAqB;;;;IAMzB,gGAKC;IADG,ocAAoB,8BAAmB,IAAC;IAC3C,4DAA4B;;;;IAHzB,iFAAqB;;;IAX7B,yEAA+E;IAC3E,kKAMyB;IAEzB,2KAK6B;IACjC,4DAAM;;;IAbG,0DAAqC;IAArC,wGAAqC;IAQrC,0DAAoC;IAApC,uGAAoC;;;IAlBjD,4EAOC;IACG,wHAeM;IACV,4DAAM;;;IAhBmD,0DAAc;IAAd,qFAAc;;ADpBpE,MAAM,sBAAsB;IAa/B,YAAoB,aAA4B,EAAS,eAAgC;QAArE,kBAAa,GAAb,aAAa,CAAe;QAAS,oBAAe,GAAf,eAAe,CAAiB;QAVhF,kBAAa,GAAG,KAAK,CAAC;QACtB,cAAS,GAAe,EAAE,CAAC;QAC3B,eAAU,GAAG,EAAE,CAAC;QAEhB,sBAAiB,GAAe,EAAE,CAAC;QACnC,gBAAW,GAAG,KAAK,CAAC;QACpB,oBAAe,GAAG,CAAC,CAAC;QACnB,qBAAgB,GAAyB,IAAI,uDAAY,EAAU,CAAC;QACpE,oBAAe,GAAyB,IAAI,uDAAY,EAAU,CAAC;IAEe,CAAC;IAE7F,QAAQ,KAAU,CAAC;IAEnB,WAAW,CAAC,OAAsB;QAC9B,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE;YAC3D,IAAI,IAAI,CAAC,6BAA6B,EAAE;gBACpC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;aAC9F;SACJ;IACL,CAAC;IAEM,gBAAgB,CAAC,KAAa;QACjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEM,iBAAiB,CAAC,cAAsB;QAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;;4FAhCQ,sBAAsB;oHAAtB,sBAAsB;;;;;;QCrBnC,yEAAuB;QAOf,qMAAmB,6BAAyB,IAAC;QAEjD,4DAAsC;QACtC,qIAsBe;QACf,kHAwBM;QACV,4DAAM;;QAxDE,0DAAuC;QAAvC,oGAAuC;QAStC,0DAIP;QAJO,wMAIP;QAoBO,0DAIP;QAJO,uMAIP;;;;;;;;;;;;;;;;;;;ACtCqD;AACI;;;AAE3D,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oEAAkB;KAChC;CACJ,CAAC;AAMK,MAAM,sBAAsB;;4FAAtB,sBAAsB;mHAAtB,sBAAsB;uHAHtB,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEb,sBAAsB,oFAFrB,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ1B;AAIA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnBIc,IAAAA,6DAAAA,cAAuE,CAAvE,EAAuE,oBAAvE,EAAuE,CAAvE;AAKQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAiBC,8BAAjB;AAAwC,KAAxC;AACHD,IAAAA,2DAAAA;;;;;AAJGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,mCAA0B,SAA1B,EAA0BE,oCAA1B,EAA0B,UAA1B,EAA0BA,kBAA1B;;;;;;;;AAUJF,IAAAA,6DAAAA,WAAqD,CAArD,EAAqD,sBAArD,EAAqD,EAArD;AAOQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAcG,2BAAd;AAAiC,KAAjC,EAAkC,aAAlC,EAAkC;AAAAH,MAAAA,4DAAAA;AAAA;AAAA,aACnBI,uBADmB;AACJ,KAD9B,EAAkC,UAAlC,EAAkC;AAAAJ,MAAAA,4DAAAA;AAAA;AAAA,aAEtBK,qBAFsB;AAET,KAFzB;AAGHL,IAAAA,2DAAAA;;;;;AARGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,8CAAqC,eAArC,EAAqCM,oBAArC,EAAqC,qBAArC,EAAqCA,0BAArC,EAAqC,cAArC,EAAqCA,2BAArC,EAAqC,iBAArC,EAAqCA,oCAArC;;;;;;AAWRN,IAAAA,6DAAAA,eAAoG,CAApG,EAAoG,2BAApG,EAAoG,EAApG;AAEQA,IAAAA,wDAAAA;;AACJA,IAAAA,2DAAAA;;;;;AAF2CA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AAClCA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,cAAAA,0DAAAA,6BAAAA,6DAAAA;;;;;;;;AAQTA,IAAAA,6DAAAA,eAAuE,CAAvE,EAAuE,eAAvE,EAAuE,EAAvE;AAGQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAeO,2BAAf;AAAkC,KAAlC,EAAmC,aAAnC,EAAmC;AAAAP,MAAAA,4DAAAA;AAAA;AAAA,aACpBQ,uBADoB;AACL,KAD9B;AAEHR,IAAAA,2DAAAA;;;;;AAHGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;;;;;;;;AANZA,IAAAA,6DAAAA;AAIIA,IAAAA,yDAAAA;;AAOAA,IAAAA,6DAAAA;AAKIA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAcS,6BAAd;AAAmC,KAAnC;AACHT,IAAAA,2DAAAA;;;;;AAb6CA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,SAAAA,0DAAAA;AAQ1CA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,2CAAkC,SAAlC,EAAkCU,oBAAlC,EAAkC,UAAlC,EAAkCA,kBAAlC,EAAkC,iBAAlC,EAAkCA,oCAAlC;;;;;;AASJV,IAAAA,6DAAAA;AAKIA,IAAAA,wDAAAA;AACJA,IAAAA,2DAAAA;;;;;;AACAA,IAAAA,6DAAAA;AACIA,IAAAA,wDAAAA;AACJA,IAAAA,2DAAAA;;;;;;AAVJA,IAAAA,sEAAAA;AACIA,IAAAA,yDAAAA;;AAOAA,IAAAA,yDAAAA;;AAGJA,IAAAA,oEAAAA;;;;;AAPSA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,SAAAA,0DAAAA;AAI8BA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,SAAAA,0DAAAA;;;;;;;;AAMnCA,IAAAA,6DAAAA,eAAyE,CAAzE,EAAyE,uBAAzE,EAAyE,EAAzE;AAGQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAeW,yCAAf;AAAgD,KAAhD,EAAiD,gBAAjD,EAAiD;AAAAX,MAAAA,4DAAAA;AAAA;AAAA,aAC/BY,gCAD+B;AACP,KAD1C;AAIHZ,IAAAA,2DAAAA;;;;;AALGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,uCAA6B,aAA7B,EAA6B,IAA7B,EAA6B,WAA7B,EAA6B,KAA7B;;;;;;;;AAHZA,IAAAA,sEAAAA;AACIA,IAAAA,yDAAAA;AAUAA,IAAAA,6DAAAA,mBAA0D,CAA1D,EAA0D,mBAA1D,EAA0D,EAA1D;AAQQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAoBa,kCAApB;AAA8C,KAA9C,EAA+C,iBAA/C,EAA+C;AAAAb,MAAAA,4DAAAA;AAAA;AAAA,aAC5Bc,iCAD4B;AACH,KAD5C;AAIJd,IAAAA,2DAAAA;AAERA,IAAAA,oEAAAA;;;;;AAxBoCA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AAYxBA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,gCAAuB,WAAvB,EAAuBe,gBAAvB,EAAuB,aAAvB,EAAuBA,kBAAvB,EAAuB,eAAvB,EAAuBA,oBAAvB,EAAuB,mBAAvB,EAAuBA,wBAAvB,EAAuB,iBAAvB,EAAuBA,sBAAvB,EAAuB,YAAvB,EAAuBA,iBAAvB;;;;;;;;AAaZf,IAAAA,6DAAAA,mBAIC,CAJD,EAIC,iCAJD,EAIC,EAJD;AAMQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAmBgB,6CAAnB;AAAgD,KAAhD,EAAiD,eAAjD,EAAiD;AAAAhB,MAAAA,4DAAAA;AAAA;AAAA,aAChCiB,uBADgC;AACjB,KADhC;AAEHjB,IAAAA,2DAAAA;;;;;;;;AAELA,IAAAA,6DAAAA,mBAMC,CAND,EAMC,KAND,EAMC,EAND,EAMC,CAND,EAMC,KAND,EAMC,EAND,EAMC,CAND,EAMC,GAND,EAMC,EAND;AASgEA,IAAAA,qDAAAA;;AAAyBA,IAAAA,2DAAAA;AAC7EA,IAAAA,6DAAAA;AACIA,IAAAA,qDAAAA;;AACJA,IAAAA,2DAAAA;AAEJA,IAAAA,6DAAAA;AACIA,IAAAA,qDAAAA;;;AAEAA,IAAAA,6DAAAA;AAAMA,IAAAA,qDAAAA;AAACA,IAAAA,2DAAAA;AACPA,IAAAA,qDAAAA;;AACJA,IAAAA,2DAAAA;AACAA,IAAAA,6DAAAA;AAAgEA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAASkB,uBAAT;AAAwB,KAAxB;AAC5DlB,IAAAA,qDAAAA;;AACJA,IAAAA,2DAAAA;;;;;AAbwDA,IAAAA,wDAAAA;AAAAA,IAAAA,gEAAAA,CAAAA,0DAAAA;AAEhDA,IAAAA,wDAAAA;AAAAA,IAAAA,iEAAAA,MAAAA,0DAAAA;AAIJA,IAAAA,wDAAAA;AAAAA,IAAAA,iEAAAA,MAAAA,0DAAAA,iEAAAA,0DAAAA;AAGAA,IAAAA,wDAAAA;AAAAA,IAAAA,iEAAAA,MAAAA,0DAAAA;AAGAA,IAAAA,wDAAAA;AAAAA,IAAAA,iEAAAA,MAAAA,0DAAAA;;;;;;;;;;AD/Fd,MAAOmB,kBAAP,SAAkC3B,2GAAlC,CAAsD;AA4BxD4B,cAAoBC,eAApB,EAA+DC,QAA/D,EAAiF;AAC7E,UAAMA,QAAN;AADgB;AAA2C;AAxBxD,uBAAc,WAAd;AACA,yBAAgB,KAAhB;AACA,uBAAc,KAAd;AACA,2BAAuC,EAAvC;AACA,qBAAwB,EAAxB;AACA,6BAAgC,EAAhC;AAEA,wBAAe,EAAf;AACA,sBAAa,EAAb;AACA,yBAAqC3B,0DAArC;AACA,6BAAgD;AACnD4B,uBAAiB,EAAE;AADgC,KAAhD;AAIA,gCAAuB,CAAvB;AACA,2BAAkB,CAAlB;AAEU,qBAAYnC,gFAAZ;AAET,yBAAgB,IAAID,0CAAJ,EAAhB;AACA,4BAA6B,EAA7B;AACA,6BAAoB,CAAC,CAArB;AAKJ,SAAKsC,aAAL,GAAqB,KAAKC,aAAL,EAArB;AACA,SAAKC,SAAL,GAAiB,KAAKC,yBAAL,CAA+BC,QAAhD;AACH;;AAEsB,MAAnBC,mBAAmB;AACnB,WAAOjC,qGAAA,CAA6B,KAAKmC,eAAlC,CAAP;AACH;;AAEsB,SAARC,QAAQ,CAACV,iBAAD,EAA8B;AACjD,UAAMW,GAAG,GAAgC,EAAzC;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,iBAAiB,CAACa,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/CD,SAAG,CAACX,iBAAiB,CAACY,CAAD,CAAjB,CAAqBE,WAAtB,CAAH,GAAwCF,CAAxC;AACH;;AACD,WAAOD,GAAP;AACH;;AAEDI,UAAQ;AACJ,UAAMC,WAAW,GAAG,KAAKC,iBAAL,CAAuBC,aAAvB,CAAqCrD,gFAArC,CAApB;;AACA,QAAImD,WAAW,IAAIA,WAAW,CAACG,WAA/B,EAA4C;AACxC,WAAKC,aAAL,GAAqBJ,WAAW,CAACG,WAAZ,CAAwBE,QAA7C;AACH;;AACD,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACtB,WAAKC,kBAAL,CAAwB,IAAxB;AACH,KAFD,MAEO;AACH,WAAKC,UAAL,GAAkB,EAAlB;AACA,WAAKC,iBAAL,GAAyB;AACrBC,eAAO,EAAE;AADY,OAAzB;AAGA,WAAKC,YAAL,GAAoB,KAAKC,gBAAL,CAAsB/D,gFAAtB,EAA0C,KAAKuD,aAA/C,CAApB;AACA,WAAKS,eAAL;AACA,WAAKC,eAAL,CAAqBC,uBAArB,CAA6CC,IAA7C,CAAkD7D,0DAAS,CAAC,KAAK8D,QAAN,CAA3D,EAA4E/D,qDAAI,CAAC,CAAD,CAAhF,EAAqFgE,SAArF,CAA+F,MAAK;AAChG,aAAKP,YAAL,GAAoB,KAAKC,gBAAL,CAAsB/D,gFAAtB,EAA0C,KAAKuD,aAA/C,CAApB;AACA,aAAKe,gBAAL,CAAsB,KAAtB;AACH,OAHD;AAIA,WAAKC,SAAL,GAAiB,KAAKC,eAAL,CAAqBC,uBAArB,CACZN,IADY,CACP7D,0DAAS,CAAC,KAAK8D,QAAN,CADF,EACmB/D,qDAAI,CAAC,CAAD,CADvB,EAEZgE,SAFY,CAEF,MAAK;AACZ,aAAKT,iBAAL,CAAuBc,aAAvB,GAAuC,IAAvC;AACA,aAAKJ,gBAAL,CAAsB,KAAtB;AACH,OALY,CAAjB;AAMA,WAAKK,iBAAL,GAAyB,KAAKC,gBAAL,CAAsBC,gBAAtB,CACrB3E,yFADqB,EAErB,KAAK6E,kBAFgB,EAGrB,IAHqB,CAAzB;AAKA,WAAKA,kBAAL;AACAC,aAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,WAAKX,gBAAL,CAAsB,IAAtB;AACA,WAAKY,mBAAL;AACH;AACJ;;AAEDC,aAAW;AACP,SAAKP,gBAAL,CAAsBQ,kBAAtB,CAAyC,KAAKT,iBAA9C;AACA,SAAKP,QAAL,CAAciB,IAAd,CAAmB,IAAnB;AACA,SAAKjB,QAAL,CAAckB,QAAd;AACH;;AAEMC,iBAAe,CAACC,MAAD,EAA4B;AAC9C,SAAKC,wBAAL;AACA,SAAK7C,eAAL,GAAuB4C,MAAvB;AACA,SAAKE,eAAL;AACH;;AAEMC,eAAa,CAACC,SAAD,EAAkB;AAClClF,IAAAA,4GAAA,CAAoCV,gFAApC,EAAwD4F,SAAxD;AACA,SAAKhC,iBAAL,CAAuBC,OAAvB,GAAiC+B,SAAjC;AACA,SAAKtB,gBAAL,CAAsB,KAAtB;AACH;;AAEMwB,mBAAiB,CAACC,cAAD,EAAwB;AAC5C,SAAKC,WAAL,GAAmB,KAAnB;;AACA,QAAID,cAAJ,EAAoB;AAChB,WAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,iBAAL,CAAuBa,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACpD,YAAI,KAAKZ,iBAAL,CAAuBY,CAAvB,EAA0BE,WAA1B,KAA0C8C,cAA9C,EAA8D;AAC1D,eAAK5D,iBAAL,CAAuB8D,MAAvB,CAA8BlD,CAA9B,EAAiC,CAAjC;AACA;AACH;AACJ;AACJ,KAPD,MAOO;AACH,WAAKZ,iBAAL,GAAyB,EAAzB;AACH;;AAED,SAAK+D,qBAAL,CAA2BH,cAA3B;AACA,SAAKzB,gBAAL,CAAsB,KAAtB;AACA,SAAK6B,WAAL;AACH;;AAEMC,kBAAgB,CAACC,QAAD,EAAmB;AACtC,SAAK1C,UAAL,GAAkB0C,QAAQ,CAACpD,WAA3B;AACA,SAAKiD,qBAAL;AAEA,SAAKI,mBAAL;AACAC,yBAAqB,CAAC,MAAK;AACvB,UAAI,KAAKC,2CAAT,EAAsD;AAClD,aAAKC,eAAL,CAAqB,KAAKD,2CAA1B;AACH,OAFD,MAEO;AACH,aAAKC,eAAL,CAAqB,KAAKC,6BAA1B;AACH;AACJ,KANoB,CAArB;AAOH;;AAEMC,eAAa;AAChB,SAAK1E,eAAL,CACK2E,iBADL,CACuB,KAAKzE,iBAD5B,EAEKgC,IAFL,CAEU7D,0DAAS,CAAC,KAAK8D,QAAN,CAFnB,EAGKC,SAHL,CAISwC,QAAD,IAAoB;AAChB,WAAKb,WAAL,GAAmB,KAAnB;AACA,WAAKpB,gBAAL,CAAsBkC,eAAtB,CAAsC5G,gGAAtC,EAAyE;AACrE8G,YAAI,EAAE,CAAC,KAAKhB;AADyD,OAAzE;AAGA,WAAKiB,iBAAL,CAAuBC,cAAvB,CAAsClH,gFAAtC,EAA0D,KAAKqC,aAA/D,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,IAA5F;AACH,KAVT,EAWS8E,KAAD,IAAe;AACXnC,aAAO,CAACC,GAAR,CAAYkC,KAAZ;AACH,KAbT;AAeH;;AAEMC,2BAAyB,CAACC,QAAD,EAA6B;AACzD,SAAKC,aAAL,CAAmB,KAAKC,SAAxB,EAAmCF,QAAnC,EAA6CG,IAA7C,CACKC,SAAD,IAAuB;AACnBzC,aAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,KAHL,EAIKkC,KAAD,IAAU;AACNnC,aAAO,CAACmC,KAAR,CAAcA,KAAd;AACH,KANL;AAQH;;AAEMO,oBAAkB,CAACC,KAAD,EAAc;AACnC,QAAI,KAAKC,SAAL,CAAeD,KAAf,CAAJ,EAA2B;AACvB,UAAIE,KAAK,GAAG,KAAZ;;AAEA,WAAK,IAAI9E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,iBAAL,CAAuBa,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACpD,YAAI,KAAK6E,SAAL,CAAeD,KAAf,EAAsB1E,WAAtB,KAAsC,KAAKd,iBAAL,CAAuBY,CAAvB,EAA0BE,WAApE,EAAiF;AAC7E,eAAKd,iBAAL,CAAuBY,CAAvB,IAA4B,KAAK6E,SAAL,CAAeD,KAAf,CAA5B;AACAE,eAAK,GAAG,IAAR;AACH;AACJ;;AACD,UAAI,CAACA,KAAL,EAAY;AACR,aAAK1F,iBAAL,CAAuB2F,IAAvB,CAA4B,KAAKF,SAAL,CAAeD,KAAf,CAA5B;AACH;AACJ;;AACD,SAAKrB,mBAAL;AACH;;AAEMyB,mBAAiB;AACpB,UAAMC,MAAM,GAAyC,IAAIlI,kDAAJ,CAAoB,KAAK8C,eAAzB,CAArD;AACAoF,UAAM,CAAC3D,SAAP,CAAkB4D,UAAD,IAAoC;AACjD,WAAKrF,eAAL,GAAuBqF,UAAvB;AACA,WAAKvC,eAAL;AACH,KAHD;AAIA,SAAKwC,gBAAL,CAAsBF,MAAtB,EAA8B,KAAKG,aAAnC;AACA,SAAKC,iBAAL;AACH;;AAEMC,mBAAiB;AACpB,UAAML,MAAM,GAAyC,IAAIlI,kDAAJ,CAAoB,KAAK8C,eAAzB,CAArD;AACAoF,UAAM,CAAC7D,IAAP,CAAY7D,0DAAS,CAAC,KAAK8D,QAAN,CAArB,EAAsCC,SAAtC,CAAiD4D,UAAD,IAAoC;AAChF,WAAKrF,eAAL,GAAuBqF,UAAvB;AACA,WAAKvC,eAAL;AACH,KAHD;AAIA,SAAK4C,eAAL,CAAqBN,MAArB,EAA6B,KAAKG,aAAlC;AACH;;AAEMI,eAAa;AAChB,UAAMC,QAAQ,GAAiC,IAAIzI,0CAAJ,EAA/C;AACAyI,YAAQ,CAACrE,IAAT,CAAc7D,0DAAS,CAAC,KAAK8D,QAAN,CAAvB,EAAwCC,SAAxC,CAAmD4D,UAAD,IAAoC;AAClF,WAAKrF,eAAL,GAAuBqF,UAAvB;AACA,WAAKvC,eAAL;AACH,KAHD;AAIAtF,IAAAA,uHAAA,CAAiC,KAAKwC,eAAtC,EAAuD4F,QAAvD;AACH;;AAEME,aAAW;AACd,UAAMC,KAAK,GAAoB,IAAI5I,0CAAJ,EAA/B;AACA4I,SAAK,CAACxE,IAAN,CAAW7D,0DAAS,CAAC,KAAK8D,QAAN,CAApB,EAAqCC,SAArC,CAAgDuE,OAAD,IAAoB;AAC/D,WAAKjD,aAAL,CAAmBiD,OAAnB;AACH,KAFD;AAIA,SAAKC,WAAL,CAAiB,KAAKC,aAAtB,EAAqC,KAAKlF,iBAAL,CAAuBC,OAA5D,EAAqE8E,KAArE;AACH;;AAEOrC,qBAAmB;AACvB,SAAKyC,mBAAL;;AACA,QAAI,KAAK5G,iBAAL,CAAuBa,MAAvB,GAAgC,CAApC,EAAuC;AACnC;AACH;;AACD,QAAI,KAAKO,aAAT,EAAwB;AACpB,UAAI,KAAKpB,iBAAL,CAAuBa,MAAvB,GAAgC,CAApC,EAAuC;AACnC,aAAKY,iBAAL,CAAuBX,WAAvB,GACI,KAAKd,iBAAL,CAAuB,CAAvB,EAA0Bc,WAA1B,KAA0C,eAA1C,GAA4D,eAA5D,GAA8E,eADlF;AAEA,aAAKW,iBAAL,CAAuBzB,iBAAvB,GAA2C,KAAKF,eAAL,CAAqB+G,+BAArB,CACvC,KAAK7G,iBADkC,CAA3C;AAGH,OAND,MAMO;AACH,aAAKyB,iBAAL,CAAuBX,WAAvB,GAAqC,eAArC;AACA,aAAKW,iBAAL,CAAuBzB,iBAAvB,GAA2C,IAA3C;AACH;;AACD,UAAI,KAAKA,iBAAL,CAAuBa,MAAvB,GAAgC,CAApC,EAAuC;AACnC,aAAKf,eAAL,CACKgH,iBADL,CACuB,KAAK1B,SAD5B,EACuC,KAAK3D,iBAD5C,EAC+D,KAD/D,EAEKS,SAFL,CAEgB6E,iBAAD,IAAyC;AAChD,eAAKA,iBAAL,GAAyBA,iBAAzB;AACA,eAAKtG,eAAL,GAAuBsG,iBAAiB,CAACC,GAAzC;AACA,eAAKvB,SAAL,GAAiBsB,iBAAiB,CAACE,OAAnC;AACA,eAAKC,yBAAL;AACA,eAAKC,eAAL;AACH,SARL;AASH;;AACD,WAAKP,mBAAL;AACH,KAvBD,MAuBO,CACN;AACJ;;AAEOzE,kBAAgB,CAACiF,gBAAD,EAA0B;AAC9C,QAAIA,gBAAgB,IAAI,KAAKC,iBAAL,EAAxB,EAAkD;AAC9C,WAAKC,aAAL,CAAmBC,eAAnB,GAAqC,KAArC;AACA;AACH;;AAED,UAAMC,MAAM,GAAG,KAAKvG,iBAAL,CAAuBwG,SAAvB,CAAiC5J,gFAAjC,CAAf;AACA,SAAK6J,eAAL,GAAuBF,MAAM,CAACG,UAAP,CAAkBC,KAAzC;AACA,SAAKC,qBAAL,CAA2B,KAAKzC,SAAhC;AACA,SAAKkC,aAAL,CAAmBC,eAAnB,GAAqC,IAArC;AACA,SAAK9F,iBAAL,GAAyB,KAAKqG,gBAAL,EAAzB;AACA,SAAKhI,eAAL,CACKgH,iBADL,CACuB,KAAK1B,SAD5B,EACuC,KAAK3D,iBAD5C,EAC+D2F,gBAD/D,EAEKpF,IAFL,CAEU7D,0DAAS,CAAC,KAAK8D,QAAN,CAFnB,EAGKC,SAHL,CAIS6E,iBAAD,IAAyC;AACrC,WAAKA,iBAAL,GAAyBA,iBAAzB;AACA,WAAKtG,eAAL,GAAuBsG,iBAAiB,CAACC,GAAzC;AACA,WAAKvB,SAAL,GAAiB,KAAKsC,mBAAL,CAAyBhB,iBAAiB,CAACE,OAA3C,CAAjB;AACA,WAAKC,yBAAL;AACA,WAAKlB,aAAL,CAAmB9C,IAAnB,CAAwB6D,iBAAiB,CAACiB,SAA1C;AACA,WAAKC,SAAL,GAAiBlB,iBAAiB,CAACiB,SAAnC;AACA,WAAKb,eAAL;AACA,WAAKG,aAAL,CAAmBC,eAAnB,GAAqC,KAArC;AACAW,gBAAU,CAAC,MAAK;AACZrF,eAAO,CAACC,GAAR,CAAY,qBAAZ;AACAqF,cAAM,CAACC,cAAP,GAAwB,IAAxB;AACH,OAHS,EAGP,IAHO,CAAV;AAIA;;;;AAIA,UAAI,CAACrB,iBAAiB,CAACE,OAAlB,CAA0BpG,MAA3B,IAAqC,CAAC,KAAKwH,WAAL,CAAiBtB,iBAAiB,CAACC,GAAnC,CAA1C,EAAmF;AAC/E,aAAKlH,eAAL,CAAqBwI,2BAArB,CACI,KAAKlD,SADT,EAEI,KAAK3D,iBAAL,CAAuBX,WAF3B;AAIH;AACJ,KA3BT,EA4BSkE,KAAD,IAAe,CACX;AACH,KA9BT;AAgCH;;AAEO+C,qBAAmB,CAACtC,SAAD,EAAsB;;;AAC7C,UAAM8C,MAAM,GAAG,YAAKC,QAAL,MAAa,IAAb,IAAaC,aAAb,GAAa,MAAb,GAAaA,GAAEC,KAAF,CAAQ,CAAR,CAAb,IAA0B,WAAKF,QAAL,MAAa,IAAb,IAAaG,aAAb,GAAa,MAAb,GAAaA,GAAED,KAAF,CAAQ,CAAR,EAAWE,YAAX,CAAwBC,EAA/D,GAAoE,IAAnF;;AACA,QAAIN,MAAJ,EAAY;AACR,aAAO,KAAKzI,eAAL,CAAqBgJ,wBAArB,CAAwDrD,SAAxD,EAAmE8C,MAAnE,CAAP;AACH;;AAED,WAAO9C,SAAP;AACH;;AAEOlC,iBAAe;AACnB,SAAK+D,aAAL,CAAmBC,eAAnB,GAAqC,IAArC;AACA,SAAKzH,eAAL,CACKiJ,iBADL,CACuB,KAAK3D,SAD5B,EACuC,KAAK3D,iBAD5C,EAC+D,KAAKhB,eADpE,EAEKuB,IAFL,CAEU7D,0DAAS,CAAC,KAAK8D,QAAN,CAFnB,EAGKC,SAHL,CAIS6E,iBAAD,IAAyC;AACrC,WAAKA,iBAAL,GAAyBA,iBAAzB;AACA,WAAKtG,eAAL,GAAuBsG,iBAAiB,CAACC,GAAzC;AACA,WAAKgC,aAAL,CAAmBC,aAAnB,CAAiC/F,IAAjC,CAAsC6D,iBAAiB,CAACC,GAAxD;AACA,WAAKvB,SAAL,GAAiBsB,iBAAiB,CAACE,OAAnC;AACA,WAAKC,yBAAL;AACA,YAAMgC,YAAY,GACd,KAAKzH,iBAAL,CAAuBX,WAAvB,KAAuC,eAAvC,GACMiG,iBAAiB,CAACiB,SADxB,GAEMjB,iBAAiB,CAACoC,SAH5B;AAIA,WAAKnD,aAAL,CAAmB9C,IAAnB,CAAwBgG,YAAxB;AACA,WAAKjB,SAAL,GAAiBiB,YAAjB;AACA,WAAK/B,eAAL;AACA,WAAKG,aAAL,CAAmBC,eAAnB,GAAqC,KAArC;AACH,KAlBT,EAmBSvC,KAAD,IAAU;AACN,WAAKsC,aAAL,CAAmBC,eAAnB,GAAqC,KAArC;AACH,KArBT;AAuBH;;AAEOtB,mBAAiB;AACrB,SAAKmD,WAAL,GAAmB,IAAnB;AACH;;AAEOC,gBAAc;AAClB,WAAO,KAAKrJ,iBAAL,CAAuBa,MAAvB,GACD,KAAKb,iBAAL,CAAuB,CAAvB,EAA0Bc,WAA1B,KAA0C,eAA1C,GACI,eADJ,GAEI,eAHH,GAID,eAJN;AAKH;;AAEOgH,kBAAgB;AACpB,UAAMwB,SAAS,GAAG,KAAKrI,iBAAL,CAAuBsI,aAAvB,EAAlB;;AAEA,QAAID,SAAS,KAAKA,SAAS,CAACE,YAAV,CAAuB3I,MAAvB,KAAkC,CAAlC,IAAuCyI,SAAS,CAACG,UAAV,CAAqB5I,MAArB,KAAgC,CAA5E,CAAb,EAA6F;AACzFyI,eAAS,CAACI,aAAV,GAA0B5L,kHAAA,CAAkCwL,SAAlC,IAA+C,CAAzE;AACAA,eAAS,CAACM,eAAV,GAA4B9L,oHAAA,CAAoCwL,SAApC,IAAiD,CAA7E;AACH;;AAED,WAAO;AACHQ,gBAAU,EAAER,SAAS,KAAKA,SAAS,CAACI,aAAV,GAA0B5L,kHAAA,CAAkCwL,SAAlC,CAA1B,GAAyE,CAA9E,CADlB;AAEHS,kBAAY,EAAET,SAAS,KAAKA,SAAS,CAACM,eAAV,GAA4B9L,oHAAA,CAAoCwL,SAApC,CAA5B,GAA6E,CAAlF,CAFpB;AAGHxI,iBAAW,EAAE,KAAKuI,cAAL,EAHV;AAIHrJ,uBAAiB,EAAE,KAAKF,eAAL,CAAqB+G,+BAArB,CAAqD,KAAK7G,iBAA1D,CAJhB;AAKH0B,aAAO,EAAE,KAAKD,iBAAL,CAAuBC,OAL7B;AAMHa,mBAAa,EAAE;AANZ,KAAP;AAQH;;AAEOqE,qBAAmB;AACvB,SAAK/C,WAAL,GAAmB,KAAKzC,aAAL,GAAqB,KAAKpB,iBAAL,CAAuBa,MAAvB,GAAgC,CAArD,GAAyD,CAAC,CAAC,KAAKb,iBAAL,CAAuBa,MAArG;;AACA,QAAI,KAAKgD,WAAT,EAAsB;AAClB,YAAMmG,cAAc,GAAG,KAAKhK,iBAAL,CAAuBiK,MAAvB,CAA8B,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAAG,CAACC,MAAJ,CAAWC,SAA7D,EAAwE,CAAxE,CAAvB;AACA,WAAKC,SAAL,GAAiB;AACb1C,aAAK,EAAEoC,cADM;AAEbO,qBAAa,EAAE,KAAKvK,iBAAL,CAAuB,CAAvB,EAA0BoK,MAA1B,CAAiCI;AAFnC,OAAjB;AAIApG,2BAAqB,CAAC,MAAK;AACvB,aAAKE,eAAL,CAAqB,KAAKmG,mCAA1B,EAA+D;AAAEC,eAAK,EAAE;AAAT,SAA/D;AACH,OAFoB,CAArB;AAGH;AACJ;;AAEOvK,eAAa;;;AACjB,UAAMwK,KAAK,GAAG,iBAAKC,MAAL,CAAYC,oBAAZ,QAAkC,IAAlC,IAAkCpC,aAAlC,GAAkC,MAAlC,GAAkCA,GAAEqC,MAApC,MAA0C,IAA1C,IAA0CnC,aAA1C,GAA0C,MAA1C,GAA0CA,GAAEgC,KAA1D;AACA,UAAMI,IAAI,GAAGJ,KAAK,GAAGA,KAAK,CAAC,MAAD,CAAR,GAAmB,EAArC;AACA,WAAOI,IAAI,KAAK/M,+EAAT,IAA8B+M,IAAI,KAAK/M,2EAA9C;AACH;;AAEO+F,uBAAqB,CAACH,cAAD,EAAwB;WAAA,CACjD;;;AACA,UAAM4E,QAAQ,GAAG,KAAK1I,eAAL,CAAqBoL,mBAArB,CAAyC,KAAzC,CAAjB;;AACA,QAAI,cAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAExC,KAAV,MAAe,IAAf,IAAeD,aAAf,GAAe,MAAf,GAAeA,GAAE5H,MAArB,EAA6B;AACzB,UAAIxC,4FAAA,CAAwBmK,QAAxB,CAAJ,EAAuC;AACnC,YAAI,KAAKhH,UAAL,KAAoB,EAAxB,EAA4B;AACxB,eAAKA,UAAL,GAAkB,EAAlB;AACH;AACJ,OAJD,MAIO;AACH,cAAM4J,WAAW,GAAGxL,kBAAkB,CAACc,QAAnB,CAA4B,KAAKV,iBAAjC,CAApB;;AACA,YACI,KAAKwB,UAAL,KAAoB,EAApB,KACE,KAAKJ,aAAL,IAAsBoH,QAAQ,CAACE,KAAT,CAAe7H,MAAf,KAA0B,CAAjD,IACI,CAAC,KAAKO,aAAN,IAAuBoH,QAAQ,CAACE,KAAT,CAAe7H,MAAf,KAA0B,CAFtD,CADJ,EAIE;AACE,eAAKW,UAAL,GAAkBoC,cAAc,GAAGA,cAAH,GAAoB,eAApD;AACH,SAND,MAMO,IACH,KAAKpC,UAAL,KAAoB,EAApB,KACE,KAAKJ,aAAL,IAAsBoH,QAAQ,CAACE,KAAT,CAAe7H,MAAf,KAA0B,CAAjD,IACI,CAAC,KAAKO,aAAN,IAAuBoH,QAAQ,CAACE,KAAT,CAAe7H,MAAf,KAA0B,CAFtD,CADG,EAIL;AACE,eAAKW,UAAL,GAAkB,EAAlB;AACH;AACD;;;AAIA;;;AACA,aAAK,MAAM6J,IAAX,IAAmB7C,QAAQ,CAACE,KAA5B,EAAmC;AAC/B;;;;;;;;AAQA,cACI,CAAC9E,cAAD,IACAyH,IAAI,CAACzC,YAAL,CAAkB0C,IAAlB,CAAuBxK,WAAvB,KAAuC8C,cADvC,IAECyH,IAAI,CAACzC,YAAL,CAAkB2C,cAAlB,CAAiC,CAAjC,KACGlN,uFAAA,CAAmBgN,IAAI,CAACzC,YAAL,CAAkB2C,cAAlB,CAAiC,CAAjC,EAAoCE,MAAvD,CAJR,EAKE;AACE,gBAAIC,GAAG,GAAGN,WAAW,CAACC,IAAI,CAACzC,YAAL,CAAkB0C,IAAlB,CAAuBxK,WAAxB,CAArB;;AACA,gBAAI4K,GAAG,KAAKC,SAAZ,EAAuB;AACnBD,iBAAG,GAAG,KAAK1L,iBAAL,CAAuBa,MAA7B;AACA,mBAAKb,iBAAL,CAAuB2F,IAAvB,CAA4B0F,IAAI,CAACzC,YAAL,CAAkB0C,IAA9C;AACH,aAHD,MAGO;AACH,mBAAKtL,iBAAL,CAAuB0L,GAAvB,IAA8BL,IAAI,CAACzC,YAAL,CAAkB0C,IAAhD;AACH;;AAED,gBACI,CAACD,IAAI,CAACzC,YAAL,CAAkB2C,cAAlB,CAAiC,CAAjC,CAAD,IACAlN,uFAAA,CAAmBgN,IAAI,CAACzC,YAAL,CAAkB2C,cAAlB,CAAiC,CAAjC,EAAoCE,MAAvD,CAFJ,EAGE;AACE,mBAAKzL,iBAAL,CAAuB0L,GAAvB,EAA4BF,QAA5B,GAAuC,IAAvC;;AACA,kBAAI,KAAKhK,UAAL,KAAoB,KAAKxB,iBAAL,CAAuB0L,GAAvB,EAA4B5K,WAApD,EAAiE;AAC7D,oBAAI,KAAKU,UAAL,KAAoB,eAAxB,EAAyC;AACrC,uBAAKA,UAAL,GAAkB,eAAlB;AACH,iBAFD,MAEO;AACH,uBAAKA,UAAL,GAAkB,EAAlB;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,iBAAL,CAAuBa,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACpD,UAAI,KAAKZ,iBAAL,CAAuBY,CAAvB,EAA0BE,WAA1B,KAA0C,KAAKU,UAAnD,EAA+D;AAC3D,aAAKxB,iBAAL,CAAuB8D,MAAvB,CAA8BlD,CAA9B,EAAiC,CAAjC;AACA;AACH;AACJ;AACJ;;AAEOyG,mBAAiB;AACrB,UAAMsD,KAAK,GAAGiB,OAAO,CAACjB,KAAtB;;AACA,QAAIA,KAAK,IAAIA,KAAK,CAACkB,KAAnB,EAA0B;AACtB,WAAK,MAAMC,WAAX,IAA0BnB,KAAK,CAACkB,KAAhC,EAAuC;AACnC,YAAIlB,KAAK,CAACkB,KAAN,CAAYE,cAAZ,CAA2BD,WAA3B,CAAJ,EAA6C;AACzC,kBAAQA,WAAR;AACI,iBAAK,eAAL;AACI,mBAAK7H,gBAAL,CAAsB0G,KAAK,CAACkB,KAAN,CAAYP,IAAlC;;AACJ;;;AAHJ;AAOH;AACJ;AACJ;;AACD,WAAO,KAAP;AACH;;AAEO1I,oBAAkB;AACtB,SAAKpB,UAAL,GAAkB,EAAlB;AACA,SAAKgH,QAAL,GAAgB,KAAK1I,eAAL,CAAqBoL,mBAArB,EAAhB,CAFsB,CAGtB;AACH;;AAEO/D,iBAAe;AACnB,UAAMqB,QAAQ,GAAI,KAAKA,QAAL,IAAiB,KAAKA,QAAL,CAAcE,KAAhC,IAA0C,EAA3D;AACA,SAAKjD,SAAL,GAAiB,KAAKA,SAAL,CAAeI,MAAf,CAAuB3B,QAAD,IAAuB;AAC1D,YAAM8H,OAAO,GAAGxD,QAAQ,CAACyD,IAAT,CAAeC,QAAD,IAAyBA,QAAQ,CAACtD,YAAT,CAAsBC,EAAtB,KAA6B3E,QAAQ,CAAC2E,EAA7E,CAAhB;AACA,aAAO,CAACmD,OAAR;AACH,KAHgB,CAAjB;AAIA,SAAK9E,yBAAL;AACH;;AAEOnE,qBAAmB;AACvB,QAAI,CAAC,KAAKyF,QAAN,IAAkB,CAAC,KAAKA,QAAL,CAAcE,KAArC,EAA4C;AACxC;AACH;;AACD,SAAKF,QAAL,CAAcE,KAAd,CAAoB/H,GAApB,CAAyBwL,YAAD,IAAiB;AACrC,WAAKC,gBAAL,CAAsBzG,IAAtB,CAA2BwG,YAAY,CAACvD,YAAb,CAA0B0C,IAA1B,CAA+BzC,EAA1D;AACH,KAFD;AAGH;;AAEO3B,2BAAyB;AAC7B,SAAKzB,SAAL,GAAiB,KAAK3F,eAAL,CAAqBoH,yBAArB,CAA+C,KAAKzB,SAApD,EAA+D,KAAK2G,gBAApE,CAAjB;AAEA,SAAKC,oBAAL,GAA4B7N,sHAAA,CAA2C,KAAKiC,eAAhD,CAA5B;;AAEA,QAAI,KAAKsG,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBwF,YAArD,EAAmE;AAC/D,WAAKvM,iBAAL,GAAyB,EAAzB;;AACA,WAAK,MAAMwM,QAAX,IAAuB,KAAKzF,iBAAL,CAAuBwF,YAA9C,EAA4D;AACxD,aAAKvM,iBAAL,CAAuB2F,IAAvB,CAA4B6G,QAAQ,CAACC,MAArC;AACH;AACJ;AACJ;;AAEO5K,iBAAe;AACnB,UAAM6K,IAAI,GAAGnO,2GAAA,CAAmCV,gFAAnC,CAAb;;AACA,QAAI6O,IAAJ,EAAU;AACN,WAAKjL,iBAAL,CAAuBC,OAAvB,GAAiCgL,IAAjC;AACH;AACJ;;AAngBuD;;;mBAA/C9M,oBAAkBnB,gEAAAA,CAAAA,yGAAAA,GAAAA,gEAAAA,CAAAA,oDAAAA;AAAA;;;QAAlBmB;AAAkBgN;AAAAC;AAAA;;;;;;;;;;;;;;;;;;;;AC3B/BpO,MAAAA,6DAAAA;AACIA,MAAAA,yDAAAA;;AAQAA,MAAAA,6DAAAA;AAIIA,MAAAA,yDAAAA;;AAaAA,MAAAA,yDAAAA;;AAMAA,MAAAA,yDAAAA;;AAoBAA,MAAAA,yDAAAA;AAaAA,MAAAA,yDAAAA;AA0BAA,MAAAA,yDAAAA;;AAUAA,MAAAA,yDAAAA;;AAyBJA,MAAAA,2DAAAA;;;;AA9H+CA,MAAAA,yDAAAA;AACzCA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,SAAAA,0DAAAA;AAUFA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,YAAAA,8DAAAA;AAEMA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,SAAAA,0DAAAA;AAaAA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,SAAAA,0DAAAA;AAODA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,SAAAA,0DAAAA;AAmBUA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;AAaAA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;AA2BVA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,4BAAAA,0DAAAA;AAWAA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,4BAAAA,0DAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGkC;AACqB;AACT;AACmC;AACzC;AACC;AACK;AAC3D,mCAAmC;AAC+G;AAC3D;AACN;AACV;;;AAchE,MAAM,eAAe;;8EAAf,eAAe;4GAAf,eAAe;gHAVf;YACL,yDAAY;YACZ,+DAAY;YACZ,6EAAsB;YACtB,0EAAwB,CAAC,iFAAkB,CAAC;YAC5C,sEAAe;YACf,+FAA8B;YAC9B,yFAAoB;SACvB;mIAEQ,eAAe,mBAXT,oEAAkB,EAAE,uGAAsB,EAAE,2JAAsC,aAE7F,yDAAY;QACZ,+DAAY;QACZ,6EAAsB,qEAEtB,sEAAe;QACf,+FAA8B;QAC9B,yFAAoB;;;;;;;;;;;;;;;ACrBrB,MAAM,aAAa,GAAwB;IAC9C;QACI,IAAI,EAAE,WAAW;QACjB,KAAK,EAAE,yBAAyB;KACnC;IACD;QACI,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,uBAAuB;KACjC;CACJ,CAAC;;;;;;;;;;;;;;;;;;ACViF;AACtB;;AAWtD,MAAM,gBAAiB,SAAQ,6FAAa;IAHnD;;QAIoB,cAAS,GAAc,gFAAkB,CAAC;KAiD7D;IA/CU,+BAA+B,CAAC,iBAA6B;QAChE,MAAM,KAAK,GAAqB,EAAE,CAAC;QAEnC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YAC5B,MAAM,SAAS,GAAG,CAAC,CAAC,WAAW,CAAC;YAChC,KAAK,CAAC,SAAS,CAAC,GAAG;gBACf,UAAU,EAAE,CAAC,CAAC,EAAE;gBAChB,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,gFAAkB,CAAC;gBAC5D,WAAW,EAAE,CAAC,CAAC,WAAW;aAC7B,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC7B;;;;;;aAMK;IACT,CAAC;IAEM,iBAAiB,CAAC,SAAqB;QAC1C,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,CAAC;YACnD,cAAc,EAAE;gBACZ;oBACI,WAAW,EAAE,QAAQ,CAAC,WAAW;oBACjC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,gFAAkB,CAAC;oBACpE,kBAAkB,EAAE,KAAK;iBAC5B;aACJ;YACD,EAAE,EAAE,QAAQ,CAAC,EAAE;SAClB,CAAC,CAAC,CAAC;QACJ,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAEM,yBAAyB,CAAC,IAAgB,EAAE,gBAA0B;QACzE,IAAI,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;YACnB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAEzB,IAAI,IAAI,CAAC,aAAa,CAAC,mBAAmB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gBAC/E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aAC3B;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;;mRAjDQ,gBAAgB,SAAhB,gBAAgB;iHAAhB,gBAAgB,WAAhB,gBAAgB,mBAFb,MAAM","sources":["./src/app/modules/core/utils/modules/transfers/transfer-search.utils.ts","./src/app/modules/results/results-filters/results-filters.utils.service.ts","./src/app/modules/results/transfers/components/transfer-list-result-information/transfer-list-result-information.component.ts","./src/app/modules/results/transfers/components/transfer-list-result-information/transfer-list-result-information.component.html","./src/app/modules/results/transfers/components/transfers-list/transfers-list.component.ts","./src/app/modules/results/transfers/components/transfers-list/transfers-list.component.html","./src/app/modules/results/transfers/transfers-routing.module.ts","./src/app/modules/results/transfers/transfers.component.ts","./src/app/modules/results/transfers/transfers.component.html","./src/app/modules/results/transfers/transfers.module.ts","./src/app/modules/results/transfers/transfers.sort.ts","./src/app/services/modules/transfers/dataservices/transfers.service.ts"],"sourcesContent":["export class TransferSearchUtils {\n    public static getChildSeats(passenger: any) {\n        const childAges = passenger.childrenAges;\n        let childSeats = 0;\n        for (const idx in childAges) {\n            if (childAges[idx] <= 4) {\n                childSeats++;\n            }\n        }\n        childSeats += passenger.infants > 0 ? passenger.infants : 0;\n        return childSeats;\n    }\n\n    public static getBoosterSeats(passenger: any) {\n        const childAges = passenger.childrenAges;\n        let boosterSeats = 0;\n        for (const idx in childAges) {\n            if (childAges[idx] >= 5 && childAges[idx] <= 12) {\n                boosterSeats++;\n            }\n        }\n        return boosterSeats;\n    }\n}\n","import {\n    FilterItem,\n    FilterItemCheckbox,\n    FilterReferenceItem,\n    FilterSlider,\n} from '@schemas/modules/core/filters/service-filter';\n\nexport class ResultsFiltersUtils {\n    constructor() {}\n\n    public static selectedFiltersCounter(filters: FilterReferenceItem): number {\n        if (filters[0].ref_id === 'TRAIN_STOPS' || filters[0].ref_id === 'FLIGHT_STOPS') {\n            return this.selectedFiltersCounterFlightTrain(filters);\n        }\n\n        return this.selectedFiltersCounterDefault(filters);\n    }\n\n    private static selectedFiltersCounterFlightTrain(filters: FilterReferenceItem): number {\n        let selectedFiltersCount = 0;\n        const stationsFilters: Partial<FilterItemCheckbox | FilterSlider>[] = [];\n\n        filters.forEach((filterItem: FilterItem) => {\n            if (filterItem.ref_id === 'FLIGHT_TIME_AIRPORTS' || filterItem.ref_id === 'TRAIN_TIME_STATIONS') {\n                filterItem.sections?.forEach((section) =>\n                    section.ogs.map((filter: FilterItem) => {\n                        if (filter.checkboxes) {\n                            stationsFilters.push(\n                                ...filter.checkboxes.filter((checkbox: FilterItemCheckbox) => !checkbox.disabled)\n                            );\n                        } else if (filter.slider) {\n                            stationsFilters.push(filter.slider);\n                        }\n                    })\n                );\n                selectedFiltersCount += stationsFilters.reduce((acc, filter) => acc + Number(filter.selected), 0);\n            } else {\n                if (filterItem.checkboxes) {\n                    selectedFiltersCount += filterItem.checkboxes\n                        .filter((checkbox: FilterItemCheckbox) => !checkbox.disabled)\n                        .reduce((acc: number, checkbox: FilterItemCheckbox) => acc + Number(checkbox.selected), 0);\n                } else if (filterItem.slider) {\n                    selectedFiltersCount += Number(filterItem.slider.selected);\n                }\n            }\n        });\n\n        return selectedFiltersCount;\n    }\n\n    private static selectedFiltersCounterDefault(filters: FilterReferenceItem): number {\n        let selectedFiltersCount = 0;\n        filters.forEach((filterItem: FilterItem) => {\n            if (filterItem.checkboxes) {\n                selectedFiltersCount += filterItem.checkboxes.reduce(\n                    (acc: number, checkbox: FilterItemCheckbox) => acc + Number(checkbox.selected),\n                    0\n                );\n            } else if (filterItem.slider) {\n                selectedFiltersCount += Number(filterItem.slider.selected);\n            }\n        });\n\n        return selectedFiltersCount;\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Transfer } from '@schemas/modules/transfers/transfer';\nimport { PlatformService } from '@services/platform.service';\n\n@Component({\n    selector: 'tz-transfer-list-result-information',\n    templateUrl: './transfer-list-result-information.component.html',\n    styleUrls: ['./transfer-list-result-information.component.scss'],\n})\nexport class TransferListResultInformationComponent implements OnInit, OnChanges {\n    @Input() twoWayJourney = false;\n    @Input() selectedTransfers: Transfer[] = [];\n    @Input() updJourney = '';\n    @Input() count = 0;\n    @Input() listTransfersText = '';\n    @Input() totalPassengers = 0;\n\n    @Output() cancelSelection: EventEmitter<string> = new EventEmitter<string>();\n    public selectedTransfersSummary: string | null = null;\n    constructor(public platformService: PlatformService) {}\n\n    ngOnInit() {\n        //{{ 'GENERAL.Transport_Outbound' | translate }} {{ 'GENERAL.TRANSFER' | translate | lowercase }} :\n        //                 {{ 'GENERAL.OPTIONS_FOUND' | translate: {resultsCount: count, tripType: ''} }}\n        this.listTransfersText = 'toto';\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['selectedTransfers'] && changes['selectedTransfers'].currentValue) {\n            this.selectedTransfersSummary = changes['selectedTransfers'].currentValue.name;\n        }\n    }\n\n    public onCancelSelection(discardJourney: string) {\n        this.cancelSelection.emit(discardJourney);\n    }\n}\n","<ng-container *ngIf=\"twoWayJourney\">\n    <!-- outbound transfer selected -->\n    <ng-container *ngIf=\"selectedTransfers.length === 1\">\n        <div class=\"tz-block-separator-title\" *ngIf=\"updJourney === ''\">\n            <tz-block-separator>\n                {{\n                    (selectedTransfers[0].journeyType === 'onwardJourney'\n                        ? 'TRANSFER.SELECTED_OUTBOUND'\n                        : 'TRANSFER.SELECTED_RETURN'\n                    ) | translate\n                }}\n            </tz-block-separator>\n        </div>\n        <div class=\"transfer-list-item\" *ngIf=\"updJourney === ''\">\n            <tz-transfer-list-item\n                *ngIf=\"!platformService.isMobileDevice\"\n                [transfer]=\"selectedTransfers[0]\"\n                [cancelable]=\"!selectedTransfers[0].isBooked\"\n                [selectable]=\"false\"\n                [totalPassengers]=\"totalPassengers\"\n                (cancel)=\"onCancelSelection(selectedTransfers[0].journeyType)\"\n            >\n            </tz-transfer-list-item>\n\n            <tz-mob-transfer-list-item\n                *ngIf=\"platformService.isMobileDevice\"\n                [transfer]=\"selectedTransfers[0]\"\n                [cancelable]=\"!selectedTransfers[0].isBooked\"\n                [selectable]=\"false\"\n                [totalPassengers]=\"totalPassengers\"\n                (cancelSelection)=\"onCancelSelection(selectedTransfers[0].journeyType)\"\n            ></tz-mob-transfer-list-item>\n        </div>\n    </ng-container>\n    <!-- return transfer selected -->\n    <ng-container *ngIf=\"selectedTransfers.length === 2\">\n        <div\n            class=\"tz-block-separator-title\"\n            *ngIf=\"updJourney === '' || updJourney === selectedTransfers[0].journeyType\"\n        >\n            <tz-block-separator>\n                {{\n                    (selectedTransfers[0].journeyType === 'returnJourney'\n                        ? 'TRANSFER.SELECTED_RETURN'\n                        : 'TRANSFER.SELECTED_OUTBOUND'\n                    ) | translate\n                }}\n            </tz-block-separator>\n        </div>\n        <div class=\"transfer-list-item\" *ngIf=\"updJourney === '' || updJourney === selectedTransfers[0].journeyType\">\n            <tz-transfer-list-item\n                *ngIf=\"!platformService.isMobileDevice\"\n                [transfer]=\"selectedTransfers[0]\"\n                [selectable]=\"false\"\n                [cancelable]=\"!selectedTransfers[0].isBooked\"\n                [totalPassengers]=\"totalPassengers\"\n                (cancel)=\"onCancelSelection(selectedTransfers[0].journeyType)\"\n            ></tz-transfer-list-item>\n\n            <tz-mob-transfer-list-item\n                *ngIf=\"platformService.isMobileDevice\"\n                [transfer]=\"selectedTransfers[0]\"\n                [cancelable]=\"!selectedTransfers[0].isBooked\"\n                [selectable]=\"false\"\n                [totalPassengers]=\"totalPassengers\"\n                (cancelSelection)=\"onCancelSelection(selectedTransfers[0].journeyType)\"\n            ></tz-mob-transfer-list-item>\n        </div>\n        <div\n            class=\"tz-block-separator-title\"\n            *ngIf=\"updJourney === '' || updJourney === selectedTransfers[1].journeyType\"\n        >\n            <tz-block-separator>\n                {{\n                    (selectedTransfers[1].journeyType === 'returnJourney'\n                        ? 'TRANSFER.SELECTED_RETURN'\n                        : 'TRANSFER.SELECTED_OUTBOUND'\n                    ) | translate\n                }}\n            </tz-block-separator>\n        </div>\n        <div class=\"transfer-list-item\" *ngIf=\"updJourney === '' || updJourney === selectedTransfers[1].journeyType\">\n            <tz-transfer-list-item\n                *ngIf=\"!platformService.isMobileDevice\"\n                [transfer]=\"selectedTransfers[1]\"\n                [selectable]=\"false\"\n                [cancelable]=\"!selectedTransfers[1].isBooked\"\n                [totalPassengers]=\"totalPassengers\"\n                (cancel)=\"onCancelSelection(selectedTransfers[1].journeyType)\"\n            ></tz-transfer-list-item>\n\n            <tz-mob-transfer-list-item\n                *ngIf=\"platformService.isMobileDevice\"\n                [transfer]=\"selectedTransfers[1]\"\n                [cancelable]=\"!selectedTransfers[1].isBooked\"\n                [selectable]=\"false\"\n                [totalPassengers]=\"totalPassengers\"\n                (cancelSelection)=\"onCancelSelection(selectedTransfers[1].journeyType)\"\n            ></tz-mob-transfer-list-item>\n        </div>\n    </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!twoWayJourney\">\n    <div class=\"tz-block-separator-title\" *ngIf=\"selectedTransfers.length\">\n        <tz-block-separator>\n            {{ 'TRANSFER.SELECTED' | translate }}\n        </tz-block-separator>\n    </div>\n    <div class=\"transfer-list-item\" *ngIf=\"selectedTransfers.length\">\n        <tz-transfer-list-item\n            *ngIf=\"!platformService.isMobileDevice\"\n            [transfer]=\"selectedTransfers[0]\"\n            [selectable]=\"false\"\n            [cancelable]=\"!selectedTransfers[0].isBooked\"\n            [totalPassengers]=\"totalPassengers\"\n            (cancel)=\"onCancelSelection(selectedTransfers[0].journeyType)\"\n        ></tz-transfer-list-item>\n\n        <tz-mob-transfer-list-item\n            *ngIf=\"platformService.isMobileDevice\"\n            [transfer]=\"selectedTransfers[0]\"\n            [cancelable]=\"!selectedTransfers[0].isBooked\"\n            [selectable]=\"false\"\n            [totalPassengers]=\"totalPassengers\"\n            (cancelSelection)=\"onCancelSelection(selectedTransfers[0].journeyType)\"\n        ></tz-mob-transfer-list-item>\n    </div>\n</ng-container>\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { Transfer } from '@schemas/modules/transfers/transfer';\nimport { BehaviorSubject } from 'rxjs';\nimport { ScrollService } from '@services/modules/core/scroll-service';\nimport { PlatformService } from '@services/platform.service';\n\n@Component({\n    selector: 'tz-transfers-list',\n    templateUrl: './transfers-list.component.html',\n    styleUrls: ['./transfers-list.component.scss'],\n})\nexport class TransfersListComponent implements OnInit, OnChanges {\n    @ViewChild('transfersListComponent') transfersListElementReference?: ElementRef;\n\n    @Input() twoWayJourney = false;\n    @Input() transfers: Transfer[] = [];\n    @Input() updJourney = '';\n    @Input() isMobile$?: BehaviorSubject<boolean>;\n    @Input() selectedTransfers: Transfer[] = [];\n    @Input() confirmable = false;\n    @Input() totalPassengers = 0;\n    @Output() selectedTransfer: EventEmitter<number> = new EventEmitter<number>();\n    @Output() cancelSelection: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(private scrollService: ScrollService, public platformService: PlatformService) {}\n\n    ngOnInit(): void {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.selectedTransfers.length === 1 && this.twoWayJourney) {\n            if (this.transfersListElementReference) {\n                this.scrollService.scrollToElement(this.transfersListElementReference, { block: 'start' });\n            }\n        }\n    }\n\n    public onSelectTransfer(index: number): void {\n        this.selectedTransfer.emit(index);\n    }\n\n    public onCancelSelection(discardJourney: string): void {\n        this.cancelSelection.emit(discardJourney);\n        this.selectedTransfers = [];\n    }\n}\n","<div class=\"transfers\">\n    <tz-transfer-list-result-information\n        [selectedTransfers]=\"selectedTransfers\"\n        [updJourney]=\"updJourney\"\n        [count]=\"transfers.length\"\n        [twoWayJourney]=\"twoWayJourney\"\n        [totalPassengers]=\"totalPassengers\"\n        (cancelSelection)=\"onCancelSelection($event)\"\n    >\n    </tz-transfer-list-result-information>\n    <ng-container\n        *ngIf=\"\n            ((twoWayJourney && selectedTransfers.length < 2) || (!twoWayJourney && !selectedTransfers.length)) &&\n            transfers.length\n        \"\n    >\n        <div class=\"tz-block-separator-title\">\n            <tz-block-separator>\n                {{\n                    (transfers[0].journeyType === 'onwardJourney' ? 'TRANSFER.OUTBOUND' : 'TRANSFER.RETURN') | translate\n                }}\n                {{ ' : ' }}\n                {{\n                    (transfers.length > 1 ? 'GENERAL.OPTIONS_FOUND' : 'GENERAL.OPTION_FOUND')\n                        | translate\n                            : {\n                                  resultsCount: transfers.length,\n                                  tripType: ''\n                              }\n                }}\n            </tz-block-separator>\n        </div>\n    </ng-container>\n    <div\n        class=\"transfers-list\"\n        *ngIf=\"\n            !confirmable &&\n            ((selectedTransfers.length < 2 && twoWayJourney) || (selectedTransfers.length < 1 && !twoWayJourney))\n        \"\n        #transfersListComponent\n    >\n        <div class=\"transfer-list-item\" *ngFor=\"let transfer of transfers; index as i\">\n            <tz-transfer-list-item\n                *ngIf=\"!platformService.isMobileDevice\"\n                [transfer]=\"transfer\"\n                [totalPassengers]=\"totalPassengers\"\n                (selectedTransfer)=\"onSelectTransfer(i)\"\n                [showBestValLabel]=\"!!transfer.bestValType\"\n            ></tz-transfer-list-item>\n\n            <tz-mob-transfer-list-item\n                *ngIf=\"platformService.isMobileDevice\"\n                [transfer]=\"transfer\"\n                [totalPassengers]=\"totalPassengers\"\n                (selectedTransfer)=\"onSelectTransfer(i)\"\n            ></tz-mob-transfer-list-item>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TransfersComponent } from './transfers.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TransfersComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TransfersRoutingModule {}\n","import { Component, ElementRef, Injector, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\nimport { TransfersService } from '@services/modules/transfers/dataservices/transfers.service';\nimport { Transfer } from '@schemas/modules/transfers/transfer';\nimport { TransfersResponse } from '@schemas/modules/transfers/transfers.repsonse';\nimport { ServiceId } from '@core/constants/service-id.const';\nimport { TransferSearchUtils } from '@core/utils/modules/transfers/transfer-search.utils';\nimport { TransfersFilterQueryParams } from '@schemas/modules/transfers/transfer-search-query-params';\nimport { FilterReferenceItem } from '@schemas/modules/core/filters/service-filter';\nimport { ICart } from '@schemas/modules/cart/cart';\nimport { ListenerId } from '@core/constants/listener-id.const';\nimport { StateFrom } from '@core/constants/state-from.const';\nimport { BaseServiceComponent } from '../components/base-service-component/base-service.component';\nimport { SortByValueOption } from '@schemas/modules/core/sort-by-value.option';\nimport { skip, takeUntil } from 'rxjs/operators';\nimport { ICartItem } from '@schemas/modules/cart/cart-item';\nimport { TransfersSort } from './transfers.sort';\nimport { CartUtils } from '@services/modules/cart/utils/cart.utils';\nimport { FilterService } from '@services/modules/inactivity/filter.service';\nimport { SearchUtilsService } from '@services/modules/search/utils/search.utils';\nimport { ResultsFiltersUtils } from '../results-filters/results-filters.utils.service';\n\n@Component({\n    selector: 'tz-transfers',\n    templateUrl: './transfers.component.html',\n    styleUrls: ['./transfers.component.scss', './transfers.component.mobile.scss'],\n})\nexport class TransfersComponent extends BaseServiceComponent implements OnInit, OnDestroy {\n    @ViewChild('transfersList') transfersListElementReference?: ElementRef;\n    @ViewChild('transfersListSkeletonLoader') transfersListSkeletonLoaderElementReference?: ElementRef;\n    @ViewChild('transfersSubmissionContainerElement') transfersSubmissionContainerElement?: ElementRef;\n    public journeyType = 'roundTrip';\n    public twoWayJourney = false;\n    public showSidebar = false;\n    public transfersFilter: FilterReferenceItem = [];\n    public transfers: Transfer[] = [];\n    public selectedTransfers: Transfer[] = [];\n    public cartData!: ICart;\n    public serviceTitle = '';\n    public updJourney = '';\n    public sortByOptions: SortByValueOption[] = TransfersSort;\n    public filterQueryParams: TransfersFilterQueryParams = {\n        selectedTransfers: '{}',\n    };\n    public listCount!: number;\n    public selectedFiltersCount = 0;\n    public totalPassengers = 0;\n    public cartPrice: any;\n    private readonly serviceId = ServiceId.TRANSFER;\n    private curChange!: Subscription;\n    private resultsCount$ = new Subject<number>();\n    private cartTransfersIds: string[] = [];\n    private repriceListenerId = -1;\n    private transfersResponse!: TransfersResponse;\n\n    constructor(private transferService: TransfersService, private injector: Injector) {\n        super(injector);\n        this.isNextSummary = this.nextIsSummary();\n        this.isMobile$ = this.screenSizeDetectorService.isMobile;\n    }\n\n    get isEnableClearFilter(): boolean {\n        return FilterService.enableClearAll(this.transfersFilter);\n    }\n\n    private static buildMap(selectedTransfers: Transfer[]): { [key in string]: number } {\n        const map: { [key in string]: number } = {};\n        for (let i = 0; i < selectedTransfers.length; i++) {\n            map[selectedTransfers[i].journeyType] = i;\n        }\n        return map;\n    }\n\n    ngOnInit(): void {\n        const searchInfos = this.searchDataService.getSearchData(ServiceId.TRANSFER);\n        if (searchInfos && searchInfos.transferCal) {\n            this.twoWayJourney = searchInfos.transferCal.twoDates;\n        }\n        if (this.searchRunning()) {\n            this.showSkeletonLoader(true);\n        } else {\n            this.updJourney = '';\n            this.filterQueryParams = {\n                sort_by: 'cheapest',\n            };\n            this.serviceTitle = this.formServiceTitle(ServiceId.TRANSFER, this.twoWayJourney);\n            this.setSortingValue();\n            this.settingsService.selectedLanguageSubject.pipe(takeUntil(this.destroy$), skip(1)).subscribe(() => {\n                this.serviceTitle = this.formServiceTitle(ServiceId.TRANSFER, this.twoWayJourney);\n                this.loadTransferData(false);\n            });\n            this.curChange = this.currencyService.selectedCurrencySubject\n                .pipe(takeUntil(this.destroy$), skip(1))\n                .subscribe(() => {\n                    this.filterQueryParams.refreshFilter = true;\n                    this.loadTransferData(false);\n                });\n            this.repriceListenerId = this.listenersService.registerListener(\n                ListenerId.LISTEN_REPRICED,\n                this.getCartServiceData,\n                this\n            );\n            this.getCartServiceData();\n            console.log('cart data loaded in transfer');\n            this.loadTransferData(true);\n            this.setCartTransfersIds();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.listenersService.unregisterListener(this.repriceListenerId);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public onFilterChanged($event: FilterReferenceItem): void {\n        this.scrollToServiceContainer();\n        this.transfersFilter = $event;\n        this.filterTransfers();\n    }\n\n    public sortTransfers(sortValue: string): void {\n        SearchUtilsService.saveSortingValue(ServiceId.TRANSFER, sortValue);\n        this.filterQueryParams.sort_by = sortValue;\n        this.loadTransferData(false);\n    }\n\n    public onCancelSelection(discardJourney?: string): void {\n        this.confirmable = false;\n        if (discardJourney) {\n            for (let i = 0; i < this.selectedTransfers.length; i++) {\n                if (this.selectedTransfers[i].journeyType === discardJourney) {\n                    this.selectedTransfers.splice(i, 1);\n                    break;\n                }\n            }\n        } else {\n            this.selectedTransfers = [];\n        }\n\n        this.initSelectedTransfers(discardJourney);\n        this.loadTransferData(false);\n        this.scrollToTop();\n    }\n\n    public onChangeTransfer(transfer: Transfer): void {\n        this.updJourney = transfer.journeyType;\n        this.initSelectedTransfers();\n\n        this.setSelectedTransfer();\n        requestAnimationFrame(() => {\n            if (this.transfersListSkeletonLoaderElementReference) {\n                this.scrollToElement(this.transfersListSkeletonLoaderElementReference);\n            } else {\n                this.scrollToElement(this.transfersListElementReference);\n            }\n        });\n    }\n\n    public addItemToCart(): void {\n        this.transferService\n            .addTransferToCart(this.selectedTransfers)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(\n                (response: ICart) => {\n                    this.confirmable = false;\n                    this.listenersService.NotifyListeners(ListenerId.TOGGLE_RESULTS_SUMMARY, {\n                        show: !this.confirmable,\n                    });\n                    this.userSearchService.searchCheckDep(ServiceId.TRANSFER, this.isNextSummary, false, false, true);\n                },\n                (error: any) => {\n                    console.log(error);\n                }\n            );\n    }\n\n    public onRemovedSelectedTransfer(optionId: string | undefined): void {\n        this.removeService(this.serviceId, optionId).then(\n            (isRemoved: boolean) => {\n                console.log('remove success');\n            },\n            (error) => {\n                console.error(error);\n            }\n        );\n    }\n\n    public onSelectedTransfer(index: number) {\n        if (this.transfers[index]) {\n            let found = false;\n\n            for (let i = 0; i < this.selectedTransfers.length; i++) {\n                if (this.transfers[index].journeyType === this.selectedTransfers[i].journeyType) {\n                    this.selectedTransfers[i] = this.transfers[index];\n                    found = true;\n                }\n            }\n            if (!found) {\n                this.selectedTransfers.push(this.transfers[index]);\n            }\n        }\n        this.setSelectedTransfer();\n    }\n\n    public onOpenFilterPopup() {\n        const filter: BehaviorSubject<FilterReferenceItem> = new BehaviorSubject(this.transfersFilter);\n        filter.subscribe((filterItem: FilterReferenceItem) => {\n            this.transfersFilter = filterItem;\n            this.filterTransfers();\n        });\n        this.openFilterDialog(filter, this.resultsCount$);\n        this.showSidebarMobile();\n    }\n\n    public onOpenFilterModal(): void {\n        const filter: BehaviorSubject<FilterReferenceItem> = new BehaviorSubject(this.transfersFilter);\n        filter.pipe(takeUntil(this.destroy$)).subscribe((filterItem: FilterReferenceItem) => {\n            this.transfersFilter = filterItem;\n            this.filterTransfers();\n        });\n        this.openFilterModal(filter, this.resultsCount$);\n    }\n\n    public onResetFilter(): void {\n        const filters$: Subject<FilterReferenceItem> = new Subject();\n        filters$.pipe(takeUntil(this.destroy$)).subscribe((filterItem: FilterReferenceItem) => {\n            this.transfersFilter = filterItem;\n            this.filterTransfers();\n        });\n        BaseServiceComponent.resetFilter(this.transfersFilter, filters$);\n    }\n\n    public mobOpenSort(): void {\n        const sort$: Subject<string> = new Subject<string>();\n        sort$.pipe(takeUntil(this.destroy$)).subscribe((sortKey: string) => {\n            this.sortTransfers(sortKey);\n        });\n\n        this.openSortMob(this.sortByOptions, this.filterQueryParams.sort_by, sort$);\n    }\n\n    private setSelectedTransfer(): void {\n        this.checkConfirmability();\n        if (this.selectedTransfers.length > 1) {\n            return;\n        }\n        if (this.twoWayJourney) {\n            if (this.selectedTransfers.length > 0) {\n                this.filterQueryParams.journeyType =\n                    this.selectedTransfers[0].journeyType === 'onwardJourney' ? 'returnJourney' : 'onwardJourney';\n                this.filterQueryParams.selectedTransfers = this.transferService.getTwoSelectedTransferQueryData(\n                    this.selectedTransfers\n                );\n            } else {\n                this.filterQueryParams.journeyType = 'onwardJourney';\n                this.filterQueryParams.selectedTransfers = '{}';\n            }\n            if (this.selectedTransfers.length < 2) {\n                this.transferService\n                    .searchServiceData(this.serviceId, this.filterQueryParams, false)\n                    .subscribe((transfersResponse: TransfersResponse) => {\n                        this.transfersResponse = transfersResponse;\n                        this.transfersFilter = transfersResponse.ogs;\n                        this.transfers = transfersResponse.results;\n                        this.handlingDataTransfersData();\n                        this.filterCartItems();\n                    });\n            }\n            this.checkConfirmability();\n        } else {\n        }\n    }\n\n    private loadTransferData(checkConsistency: boolean): void {\n        if (checkConsistency && this.handleExtraParams()) {\n            this.loaderService.skeletonLoading = false;\n            return;\n        }\n\n        const search = this.searchDataService.getSearch(ServiceId.TRANSFER);\n        this.totalPassengers = search.passengers.total;\n        this.checkResultsAvailable(this.serviceId);\n        this.loaderService.skeletonLoading = true;\n        this.filterQueryParams = this.initSearchParams();\n        this.transferService\n            .searchServiceData(this.serviceId, this.filterQueryParams, checkConsistency)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(\n                (transfersResponse: TransfersResponse) => {\n                    this.transfersResponse = transfersResponse;\n                    this.transfersFilter = transfersResponse.ogs;\n                    this.transfers = this.filterTransfersData(transfersResponse.results);\n                    this.handlingDataTransfersData();\n                    this.resultsCount$.next(transfersResponse.nbOnwards);\n                    this.listCount = transfersResponse.nbOnwards;\n                    this.filterCartItems();\n                    this.loaderService.skeletonLoading = false;\n                    setTimeout(() => {\n                        console.log('set prerender ready');\n                        window.prerenderReady = true;\n                    }, 1500);\n                    /*if (checkConsistency) {\n                        this.handleExtraParams();\n                    }*/\n\n                    if (!transfersResponse.results.length && !this.filterCount(transfersResponse.ogs)) {\n                        this.transferService.checkServiceFailedAndNotify(\n                            this.serviceId,\n                            this.filterQueryParams.journeyType\n                        );\n                    }\n                },\n                (error: any) => {\n                    //this.loaderService.skeletonLoading = false;\n                }\n            );\n    }\n\n    private filterTransfersData(transfers: Transfer[]): Transfer[] {\n        const cartId = this.cartData?.items[0] ? this.cartData?.items[0].selectedItem.id : null;\n        if (cartId) {\n            return this.transferService.filterDataRemoveCartItem<Transfer>(transfers, cartId);\n        }\n\n        return transfers;\n    }\n\n    private filterTransfers(): void {\n        this.loaderService.skeletonLoading = true;\n        this.transferService\n            .filterServiceData(this.serviceId, this.filterQueryParams, this.transfersFilter)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(\n                (transfersResponse: TransfersResponse) => {\n                    this.transfersResponse = transfersResponse;\n                    this.transfersFilter = transfersResponse.ogs;\n                    this.filterService.filterChange$.next(transfersResponse.ogs);\n                    this.transfers = transfersResponse.results;\n                    this.handlingDataTransfersData();\n                    const resultsCount =\n                        this.filterQueryParams.journeyType === 'onwardJourney'\n                            ? transfersResponse.nbOnwards\n                            : transfersResponse.nbReturns;\n                    this.resultsCount$.next(resultsCount);\n                    this.listCount = resultsCount;\n                    this.filterCartItems();\n                    this.loaderService.skeletonLoading = false;\n                },\n                (error) => {\n                    this.loaderService.skeletonLoading = false;\n                }\n            );\n    }\n\n    private showSidebarMobile(): void {\n        this.showSidebar = true;\n    }\n\n    private getJourneyType(): string {\n        return this.selectedTransfers.length\n            ? this.selectedTransfers[0].journeyType === 'onwardJourney'\n                ? 'returnJourney'\n                : 'onwardJourney'\n            : 'onwardJourney';\n    }\n\n    private initSearchParams(): any {\n        const passenger = this.searchDataService.getPassengers();\n\n        if (passenger && (passenger.childrenAges.length !== 0 || passenger.infantAges.length !== 0)) {\n            passenger.showChildSeat = TransferSearchUtils.getChildSeats(passenger) > 0;\n            passenger.showBoosterSeat = TransferSearchUtils.getBoosterSeats(passenger) > 0;\n        }\n\n        return {\n            childSeats: passenger && (passenger.showChildSeat ? TransferSearchUtils.getChildSeats(passenger) : 0),\n            boosterSeats: passenger && (passenger.showBoosterSeat ? TransferSearchUtils.getBoosterSeats(passenger) : 0),\n            journeyType: this.getJourneyType(),\n            selectedTransfers: this.transferService.getTwoSelectedTransferQueryData(this.selectedTransfers),\n            sort_by: this.filterQueryParams.sort_by,\n            refreshFilter: false,\n        };\n    }\n\n    private checkConfirmability() {\n        this.confirmable = this.twoWayJourney ? this.selectedTransfers.length > 1 : !!this.selectedTransfers.length;\n        if (this.confirmable) {\n            const totalCartPrice = this.selectedTransfers.reduce((acc, obj) => acc + obj.prices.listPrice, 0);\n            this.cartPrice = {\n                total: totalCartPrice,\n                priceCurrency: this.selectedTransfers[0].prices.listPriceCur,\n            };\n            requestAnimationFrame(() => {\n                this.scrollToElement(this.transfersSubmissionContainerElement, { block: 'end' });\n            });\n        }\n    }\n\n    private nextIsSummary(): boolean {\n        const state = this.router.getCurrentNavigation()?.extras?.state;\n        const from = state ? state['from'] : '';\n        return from === StateFrom.SUMMARY || from === StateFrom.TAB;\n    }\n\n    private initSelectedTransfers(discardJourney?: string) {\n        //this.selectedTransfers = [];\n        const cartData = this.transferService.getServiceCartItems(false) as ICart;\n        if (cartData?.items?.length) {\n            if (CartUtils.areAllInError(cartData)) {\n                if (this.updJourney !== '') {\n                    this.updJourney = '';\n                }\n            } else {\n                const selectedMap = TransfersComponent.buildMap(this.selectedTransfers);\n                if (\n                    this.updJourney === '' &&\n                    ((this.twoWayJourney && cartData.items.length === 2) ||\n                        (!this.twoWayJourney && cartData.items.length === 1))\n                ) {\n                    this.updJourney = discardJourney ? discardJourney : 'onwardJourney';\n                } else if (\n                    this.updJourney !== '' &&\n                    ((this.twoWayJourney && cartData.items.length !== 2) ||\n                        (!this.twoWayJourney && cartData.items.length !== 1))\n                ) {\n                    this.updJourney = '';\n                }\n                /* if (!discardJourney){\n                    discardJourney = \"returnJourney\"\n                }*/\n\n                // merge selected transfers with items in card\n                for (const item of cartData.items) {\n                    /*\n                     !CartUtils.isFailed(item.selectedItem.bookingOptions[0].status) && (\n                            !discardJourney ||\n                            item.selectedItem.data.journeyType !== discardJourney ||\n                            (item.selectedItem.bookingOptions[0] &&\n                                CartUtils.isBooked(item.selectedItem.bookingOptions[0].status))\n                        )) {\n                     */\n                    if (\n                        !discardJourney ||\n                        item.selectedItem.data.journeyType !== discardJourney ||\n                        (item.selectedItem.bookingOptions[0] &&\n                            CartUtils.isBooked(item.selectedItem.bookingOptions[0].status))\n                    ) {\n                        let idx = selectedMap[item.selectedItem.data.journeyType];\n                        if (idx === undefined) {\n                            idx = this.selectedTransfers.length;\n                            this.selectedTransfers.push(item.selectedItem.data);\n                        } else {\n                            this.selectedTransfers[idx] = item.selectedItem.data;\n                        }\n\n                        if (\n                            !item.selectedItem.bookingOptions[0] ||\n                            CartUtils.isBooked(item.selectedItem.bookingOptions[0].status)\n                        ) {\n                            this.selectedTransfers[idx].isBooked = true;\n                            if (this.updJourney === this.selectedTransfers[idx].journeyType) {\n                                if (this.updJourney === 'onwardJourney') {\n                                    this.updJourney = 'returnJourney';\n                                } else {\n                                    this.updJourney = '';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < this.selectedTransfers.length; i++) {\n            if (this.selectedTransfers[i].journeyType === this.updJourney) {\n                this.selectedTransfers.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    private handleExtraParams(): boolean {\n        const state = history.state;\n        if (state && state.extra) {\n            for (const extraAction in state.extra) {\n                if (state.extra.hasOwnProperty(extraAction)) {\n                    switch (extraAction) {\n                        case 'changeTickets':\n                            this.onChangeTransfer(state.extra.data);\n                        /* if (this.twoWayJourney) {\n                             return true;\n                         }*/\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private getCartServiceData() {\n        this.updJourney = '';\n        this.cartData = this.transferService.getServiceCartItems();\n        // this.initSelectedTransfers();\n    }\n\n    private filterCartItems(): void {\n        const cartData = (this.cartData && this.cartData.items) || [];\n        this.transfers = this.transfers.filter((transfer: Transfer) => {\n            const idFound = cartData.find((cartItem: ICartItem) => cartItem.selectedItem.id === transfer.id);\n            return !idFound;\n        });\n        this.handlingDataTransfersData();\n    }\n\n    private setCartTransfersIds(): void {\n        if (!this.cartData || !this.cartData.items) {\n            return;\n        }\n        this.cartData.items.map((cartTransfer) => {\n            this.cartTransfersIds.push(cartTransfer.selectedItem.data.id);\n        });\n    }\n\n    private handlingDataTransfersData(): void {\n        this.transfers = this.transferService.handlingDataTransfersData(this.transfers, this.cartTransfersIds);\n\n        this.selectedFiltersCount = ResultsFiltersUtils.selectedFiltersCounter(this.transfersFilter);\n\n        if (this.transfersResponse && this.transfersResponse.selectedData) {\n            this.selectedTransfers = [];\n            for (const selected of this.transfersResponse.selectedData) {\n                this.selectedTransfers.push(selected.result);\n            }\n        }\n    }\n\n    private setSortingValue(): void {\n        const sort = SearchUtilsService.getSortingValue(ServiceId.TRANSFER);\n        if (sort) {\n            this.filterQueryParams.sort_by = sort;\n        }\n    }\n}\n","<div class=\"tz-container transfers-container flex\" [hidden]=\"noResultAvailable\">\n    <div *ngIf=\"(isMobile$ | async) === false\" class=\"tz-filter-container\">\n        <tz-results-filters\n            [filter]=\"transfersFilter\"\n            [loading]=\"loaderService.skeletonLoading\"\n            [disabled]=\"confirmable\"\n            (filterChanged)=\"onFilterChanged($event)\"\n        ></tz-results-filters>\n    </div>\n    <div\n        class=\"transfer-list-submission-container flex flex-column\"\n        [ngClass]=\"{ 'transfer-list-submission-container--confirmable': confirmable }\"\n    >\n        <div *ngIf=\"platformService.isMobileDevice$ | async\">\n            <tz-mob-filter-navbar\n                [sortKey]=\"filterQueryParams.sort_by\"\n                [sortByOptions]=\"sortByOptions\"\n                [isEnableClearFilter]=\"isEnableClearFilter\"\n                [filtersCount]=\"selectedFiltersCount\"\n                [skeletonLoading]=\"loaderService.skeletonLoading\"\n                (openFilter)=\"onOpenFilterModal()\"\n                (resetFilter)=\"onResetFilter()\"\n                (openSort)=\"mobOpenSort()\"\n            ></tz-mob-filter-navbar>\n        </div>\n\n        <div *ngIf=\"(platformService.isMobileDevice$ | async) === false\" class=\"result-top-info-block-item\">\n            <tz-results-top-info-block blockType=\"red\" [loading]=\"loaderService.skeletonLoading\">\n                <div [innerHTML]=\"serviceTitle | safeHtml\"></div>\n            </tz-results-top-info-block>\n        </div>\n\n        <div\n            *ngIf=\"(platformService.isMobileDevice$ | async) === false\"\n            class=\"price-range-container flex align-center\"\n        >\n            <div class=\"transfer-filter-btn inline-flex\" *ngIf=\"isMobile$ | async\">\n                <tz-filter-btn\n                    [filterCount]=\"filterCount(transfersFilter)\"\n                    (clickFilter)=\"onOpenFilterPopup()\"\n                    (clearFilter)=\"onResetFilter()\"\n                ></tz-filter-btn>\n            </div>\n            <tz-price-range-filter\n                [sort]=\"filterQueryParams.sort_by\"\n                [options]=\"sortByOptions\"\n                [disabled]=\"confirmable\"\n                [skeletonLoading]=\"loaderService.skeletonLoading\"\n                (sortChange)=\"sortTransfers($event)\"\n            ></tz-price-range-filter>\n        </div>\n\n        <ng-container *ngIf=\"loaderService.skeletonLoading\">\n            <div\n                #transfersListSkeletonLoader\n                class=\"transfers-list-container-skeleton-loader flex\"\n                *ngIf=\"(platformService.isMobileDevice$ | async) === false\"\n            >\n                <tz-acc-car-transfer-skeleton-loader></tz-acc-car-transfer-skeleton-loader>\n            </div>\n            <div #transfersListSkeletonLoader *ngIf=\"platformService.isMobileDevice$ | async\">\n                <tz-car-transfer-skeleton></tz-car-transfer-skeleton>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!loaderService.skeletonLoading\">\n            <div class=\"flights-cart-data\" *ngIf=\"cartData && cartData.items.length\">\n                <tz-selected-transfers\n                    [transferCartData]=\"cartData\"\n                    (removedItem)=\"onRemovedSelectedTransfer($event)\"\n                    (changeTransfer)=\"onChangeTransfer($event)\"\n                    [serviceList]=\"true\"\n                    [isSummary]=\"false\"\n                ></tz-selected-transfers>\n            </div>\n\n            <div class=\"transfers-list-container flex\" #transfersList>\n                <tz-transfers-list\n                    [transfers]=\"transfers\"\n                    [isMobile$]=\"isMobile$\"\n                    [confirmable]=\"confirmable\"\n                    [twoWayJourney]=\"twoWayJourney\"\n                    [selectedTransfers]=\"selectedTransfers\"\n                    [totalPassengers]=\"totalPassengers\"\n                    (selectedTransfer)=\"onSelectedTransfer($event)\"\n                    (cancelSelection)=\"onCancelSelection($event)\"\n                    [updJourney]=\"updJourney\"\n                >\n                </tz-transfers-list>\n            </div>\n        </ng-container>\n        <div\n            *ngIf=\"confirmable && (platformService.isMobileDevice$ | async) === false\"\n            class=\"service-submission-container\"\n            #transfersSubmissionContainerElement\n        >\n            <tz-service-booking-confirmation\n                (cancelSelection)=\"onCancelSelection(updJourney)\"\n                (submitBooking)=\"addItemToCart()\"\n            ></tz-service-booking-confirmation>\n        </div>\n        <div\n            class=\"service-submission-container tz-fixed-bottom\"\n            *ngIf=\"confirmable && (platformService.isMobileDevice$ | async)\"\n            #transfersSubmissionContainerElement\n            data-test=\"transfers-confirm-cart\"\n            id=\"transferDetailsFooter\"\n        >\n            <div class=\"tz-mob-modal-rent-details__confirm\">\n                <div class=\"tz-mob-modal-rent-details__confirm-top\">\n                    <p class=\"tz-mob-modal-rent-details__confirm-total\">{{ 'TOTAL' | translate }}</p>\n                    <p class=\"tz-mob-modal-rent-details__confirm-price\">\n                        {{ cartPrice.total | tzCurrency: cartPrice.priceCurrency }}\n                    </p>\n                </div>\n                <p class=\"tz-mob-modal-rent-details__confirm-description\">\n                    {{ 'GENERAL.PRICE_FOR' | translate }} {{ totalPassengers }}\n                    {{ 'TRAVELLER.' + (totalPassengers > 1 ? 'PEOPLE' : 'PERSON') | translate }}\n                    <span>|</span>\n                    {{ 'All taxes included' | translate }}\n                </p>\n                <button class=\"tz-btn tz-btn-primary tz-btn--select full-width\" (click)=\"addItemToCart()\">\n                    {{ 'GENERAL.CONFIRM' | translate }}\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TransfersRoutingModule } from './transfers-routing.module';\nimport { TransfersComponent } from './transfers.component';\nimport { TransfersListComponent } from './components/transfers-list/transfers-list.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n// eslint-disable-next-line max-len\nimport { TransferListResultInformationComponent } from './components/transfer-list-result-information/transfer-list-result-information.component';\nimport { ResultsCartItemSelectionModule } from '../results-cart-item-selection.module';\nimport { ResultsFiltersModule } from '../results-filters/results-filters.module';\nimport { TRANSLATION_CONFIG } from 'src/app/config/translation.config';\n\n@NgModule({\n    declarations: [TransfersComponent, TransfersListComponent, TransferListResultInformationComponent],\n    imports: [\n        CommonModule,\n        SharedModule,\n        TransfersRoutingModule,\n        TranslateModule.forChild(TRANSLATION_CONFIG),\n        MatDialogModule,\n        ResultsCartItemSelectionModule,\n        ResultsFiltersModule,\n    ],\n})\nexport class TransfersModule {}\n","import { SortByValueOption } from '@schemas/modules/core/sort-by-value.option';\n\nexport const TransfersSort: SortByValueOption[] = [\n    {\n        sort: 'bestValue',\n        label: 'GENERAL.SORT.BEST_VALUE',\n    },\n    {\n        sort: 'cheapest',\n        label: 'GENERAL.SORT.CHEAPEST',\n    },\n];\n","import { Injectable } from '@angular/core';\nimport { ResultService } from '@services/modules/core/dataservices/result.service';\nimport { ServiceId } from '@core/constants/service-id.const';\nimport { Transfer } from '@schemas/modules/transfers/transfer';\nimport { DataId } from '@schemas/modules/core/base-types';\n\nexport interface ITransfersParams {\n    [key: string]: any;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TransfersService extends ResultService {\n    public override serviceId: ServiceId = ServiceId.TRANSFER;\n\n    public getTwoSelectedTransferQueryData(selectedTransfers: Transfer[]): string {\n        const final: ITransfersParams = {};\n\n        selectedTransfers.forEach((t) => {\n            const uniqueKey = t.journeyType;\n            final[uniqueKey] = {\n                selectedID: t.id,\n                dataId: this.searchDataService.getDataId(ServiceId.TRANSFER),\n                journeyType: t.journeyType,\n            };\n        });\n\n        return JSON.stringify(final);\n        /*return JSON.stringify({\n            onwardJourney: {\n                dataId: this.searchDataService.getDataId(this.serviceId),\n                journeyType: 'onwardJourney',\n                selectedID: transfer.id,\n            },\n        });*/\n    }\n\n    public addTransferToCart(transfers: Transfer[]) {\n        const options = transfers.map((transfer: Transfer) => ({\n            bookingOptions: [\n                {\n                    journeyType: transfer.journeyType,\n                    transferDataID: this.searchDataService.getDataId(ServiceId.TRANSFER),\n                    updateTransferCart: false,\n                },\n            ],\n            id: transfer.id,\n        }));\n        return this.addToCart(options);\n    }\n\n    public handlingDataTransfersData(data: Transfer[], cartTransfersIds: string[]): Transfer[] {\n        data.map((item: any) => {\n            item.recommended = false;\n\n            if (item.onwardDetails.isHighlyRecommended && !cartTransfersIds.includes(item.id)) {\n                item.recommended = true;\n            }\n        });\n\n        return data;\n    }\n}\n"],"names":["BehaviorSubject","Subject","ServiceId","TransferSearchUtils","ListenerId","StateFrom","BaseServiceComponent","skip","takeUntil","TransfersSort","CartUtils","FilterService","SearchUtilsService","ResultsFiltersUtils","i0","ctx_r8","ctx_r0","ctx_r10","ctx_r12","ctx_r13","ctx_r1","ctx_r15","ctx_r17","ctx_r18","ctx_r3","ctx_r26","ctx_r28","ctx_r29","ctx_r31","ctx_r5","ctx_r33","ctx_r35","ctx_r37","TransfersComponent","constructor","transferService","injector","selectedTransfers","TRANSFER","isNextSummary","nextIsSummary","isMobile$","screenSizeDetectorService","isMobile","isEnableClearFilter","enableClearAll","transfersFilter","buildMap","map","i","length","journeyType","ngOnInit","searchInfos","searchDataService","getSearchData","transferCal","twoWayJourney","twoDates","searchRunning","showSkeletonLoader","updJourney","filterQueryParams","sort_by","serviceTitle","formServiceTitle","setSortingValue","settingsService","selectedLanguageSubject","pipe","destroy$","subscribe","loadTransferData","curChange","currencyService","selectedCurrencySubject","refreshFilter","repriceListenerId","listenersService","registerListener","LISTEN_REPRICED","getCartServiceData","console","log","setCartTransfersIds","ngOnDestroy","unregisterListener","next","complete","onFilterChanged","$event","scrollToServiceContainer","filterTransfers","sortTransfers","sortValue","saveSortingValue","onCancelSelection","discardJourney","confirmable","splice","initSelectedTransfers","scrollToTop","onChangeTransfer","transfer","setSelectedTransfer","requestAnimationFrame","transfersListSkeletonLoaderElementReference","scrollToElement","transfersListElementReference","addItemToCart","addTransferToCart","response","NotifyListeners","TOGGLE_RESULTS_SUMMARY","show","userSearchService","searchCheckDep","error","onRemovedSelectedTransfer","optionId","removeService","serviceId","then","isRemoved","onSelectedTransfer","index","transfers","found","push","onOpenFilterPopup","filter","filterItem","openFilterDialog","resultsCount$","showSidebarMobile","onOpenFilterModal","openFilterModal","onResetFilter","filters$","resetFilter","mobOpenSort","sort$","sortKey","openSortMob","sortByOptions","checkConfirmability","getTwoSelectedTransferQueryData","searchServiceData","transfersResponse","ogs","results","handlingDataTransfersData","filterCartItems","checkConsistency","handleExtraParams","loaderService","skeletonLoading","search","getSearch","totalPassengers","passengers","total","checkResultsAvailable","initSearchParams","filterTransfersData","nbOnwards","listCount","setTimeout","window","prerenderReady","filterCount","checkServiceFailedAndNotify","cartId","cartData","_a","items","_b","selectedItem","id","filterDataRemoveCartItem","filterServiceData","filterService","filterChange$","resultsCount","nbReturns","showSidebar","getJourneyType","passenger","getPassengers","childrenAges","infantAges","showChildSeat","getChildSeats","showBoosterSeat","getBoosterSeats","childSeats","boosterSeats","totalCartPrice","reduce","acc","obj","prices","listPrice","cartPrice","priceCurrency","listPriceCur","transfersSubmissionContainerElement","block","state","router","getCurrentNavigation","extras","from","SUMMARY","TAB","getServiceCartItems","areAllInError","selectedMap","item","data","bookingOptions","isBooked","status","idx","undefined","history","extra","extraAction","hasOwnProperty","idFound","find","cartItem","cartTransfer","cartTransfersIds","selectedFiltersCount","selectedFiltersCounter","selectedData","selected","result","sort","getSortingValue","selectors","viewQuery"],"sourceRoot":"webpack:///"}