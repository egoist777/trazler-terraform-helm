{"version":3,"file":"src_app_modules_results_accommodations_accommodations_module_ts.js","mappings":";;;;;;;;;;;;;;;;AACuD;AACc;;;AAErE,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,8EAAuB;KACrC;CACJ,CAAC;AAMK,MAAM,2BAA2B;;sGAA3B,2BAA2B;wHAA3B,2BAA2B;4HAH3B,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEb,2BAA2B,oFAF1B,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ1B;AACA;AAWA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxBQgB,IAAAA,6DAAAA;AAA0BA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAASC,wBAAT;AAA0B,KAA1B;AACtBD,IAAAA,wDAAAA,mBAAyC,CAAzC,EAAyC,KAAzC,EAAyC,EAAzC;AAEJA,IAAAA,2DAAAA;;;;;;;;AACAA,IAAAA,6DAAAA;AAGIA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAUE,sBAAV;AAAwB,KAAxB;AAEJF,IAAAA,2DAAAA;;;;;AAHIA,IAAAA,yDAAAA;;;;;;;;;;;;AAIJA,IAAAA,sEAAAA;AACIA,IAAAA,6DAAAA;AACIA,IAAAA,wDAAAA;AAKJA,IAAAA,2DAAAA;AACJA,IAAAA,oEAAAA;;;;AALYA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,UAAAA,8DAAAA;;;;;;;;AAdhBA,IAAAA,6DAAAA;AACIA,IAAAA,yDAAAA;AAIAA,IAAAA,yDAAAA;AAMAA,IAAAA,yDAAAA;AASAA,IAAAA,6DAAAA;AAGIA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAiBG,+BAAjB;AAAwC,KAAxC;AACHH,IAAAA,2DAAAA;;;;;AAvBsDA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AAKlDA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AAKUA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AAUXA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,wCAA+B,SAA/B,EAA+BI,oCAA/B;;;;;;;;AAMJJ,IAAAA,6DAAAA,WAA4C,CAA5C,EAA4C,sBAA5C,EAA4C,EAA5C;AAQQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAcK,2BAAd;AAAiC,KAAjC,EAAkC,aAAlC,EAAkC;AAAAL,MAAAA,4DAAAA;AAAA;AAAA,aACnBM,uBADmB;AACJ,KAD9B,EAAkC,UAAlC,EAAkC;AAAAN,MAAAA,4DAAAA;AAAA;AAAA,aAEtBO,qBAFsB;AAET,KAFzB,EAAkC,SAAlC,EAAkC;AAAAP,MAAAA,4DAAAA;AAAA;AAAA,aAGvBQ,yBAHuB;AAGN,KAH5B;AAIHR,IAAAA,2DAAAA;;;;;AAVGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,8CAAqC,eAArC,EAAqCS,oBAArC,EAAqC,YAArC,EAAqC,IAArC,EAAqC,qBAArC,EAAqCA,0BAArC,EAAqC,cAArC,EAAqCA,2BAArC,EAAqC,iBAArC,EAAqCA,oCAArC;;;;;;AAaRT,IAAAA,6DAAAA,eAAgF,CAAhF,EAAgF,2BAAhF,EAAgF,EAAhF;AAEQA,IAAAA,wDAAAA;;AACJA,IAAAA,2DAAAA;;;;;AAF8CA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AACrCA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,cAAAA,0DAAAA,6BAAAA,6DAAAA;;;;;;;;AAITA,IAAAA,6DAAAA,eAA4E,CAA5E,EAA4E,eAA5E,EAA4E,EAA5E;AAGQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAeU,2BAAf;AAAkC,KAAlC,EAAmC,aAAnC,EAAmC;AAAAV,MAAAA,4DAAAA;AAAA;AAAA,aACpBW,uBADoB;AACL,KAD9B;AAEHX,IAAAA,2DAAAA;;;;;AAHGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;;;;;;;;AAYRA,IAAAA,6DAAAA;AAGIA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAASY,yBAAT;AAA0B,KAA1B;AAEAZ,IAAAA,wDAAAA;AACJA,IAAAA,2DAAAA;;;;;;;;AArBJA,IAAAA,6DAAAA;AACIA,IAAAA,yDAAAA;;AAOAA,IAAAA,6DAAAA;AAKIA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAca,kCAAd;AAAwC,KAAxC;;AACHb,IAAAA,2DAAAA;AACDA,IAAAA,yDAAAA;;AAOJA,IAAAA,2DAAAA;;;;;AArBuDA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,SAAAA,0DAAAA;AAQ/CA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,aAAAA,0DAAAA,sDAA4D,SAA5D,EAA4Dc,oBAA5D,EAA4D,MAA5D,EAA4DA,yEAA5D,EAA4D,iBAA5D,EAA4DA,oCAA5D;AAQCd,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,kDAAAA,0DAAAA;;;;;;AAQLA,IAAAA,6DAAAA;AAKIA,IAAAA,wDAAAA;AACJA,IAAAA,2DAAAA;;;;;;AACAA,IAAAA,6DAAAA;AACIA,IAAAA,wDAAAA;AACJA,IAAAA,2DAAAA;;;;;;AAVJA,IAAAA,sEAAAA;AACIA,IAAAA,yDAAAA;;AAOAA,IAAAA,yDAAAA;;AAGJA,IAAAA,oEAAAA;;;;;AARSA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,SAAAA,0DAAAA;AAKmCA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,SAAAA,0DAAAA;;;;;;;;AAMxCA,IAAAA,6DAAAA,eAAkF,CAAlF,EAAkF,4BAAlF,EAAkF,EAAlF;AAIQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAee,6CAAf;AAAoD,KAApD,EAAqD,aAArD,EAAqD;AAAAf,MAAAA,4DAAAA;AAAA;AAAA,aACtCgB,uBADsC;AACvB,KAD9B,EAAqD,aAArD,EAAqD;AAAAhB,MAAAA,4DAAAA;AAAA;AAAA,aAEtCiB,6BAFsC;AAEjB,KAFpC;AAGHjB,IAAAA,2DAAAA;;;;;AALGA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,sBAAoB,uBAApB,EAAoBkB,gBAApB;;;;;;;;AAHZlB,IAAAA,sEAAAA;AACIA,IAAAA,yDAAAA;AAUAA,IAAAA,6DAAAA,mBAAoE,CAApE,EAAoE,uBAApE,EAAoE,EAApE;AAQQA,IAAAA,yDAAAA;AAAAA,MAAAA,4DAAAA;AAAA;AAAA,aAAmBmB,2BAAnB;AAAsC,KAAtC,EAAuC,UAAvC,EAAuC;AAAAnB,MAAAA,4DAAAA;AAAA;AAAA,aAC3BoB,oBAD2B;AACf,KADxB,EAAuC,aAAvC,EAAuC;AAAApB,MAAAA,4DAAAA;AAAA;AAAA,aAGxBqB,6BAHwB;AAGH,KAHpC,EAAuC,wBAAvC,EAAuC;AAAArB,MAAAA,4DAAAA;AAAA;AAAA,aAIbsB,+BAJa;AAIU,KAJjD;AAMJtB,IAAAA,2DAAAA;AAERA,IAAAA,oEAAAA;;;;;AA1B2CA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA;AAY/BA,IAAAA,wDAAAA;AAAAA,IAAAA,yDAAAA,0CAAiC,uBAAjC,EAAiCuB,4BAAjC,EAAiC,WAAjC,EAAiCA,gBAAjC,EAAiC,iBAAjC,EAAiCA,sBAAjC,EAAiC,2BAAjC,EAAiCA,gCAAjC,EAAiC,kCAAjC,EAAiCA,uCAAjC,EAAiC,iBAAjC,EAAiCA,oBAAjC;;;;AD3Dd,MAAOC,uBAAP,SAAuCrC,2GAAvC,CAA2D;AAyB7DsC,cACYC,yBADZ,EAEYC,qBAFZ,EAGYC,QAHZ,EAG8B;AAE1B,UAAMA,QAAN;AAJQ;AACA;AACA;AAxBL,gCAA4C,EAA5C;AACA,0BAA0C,EAA1C;AACA,iCAAiD,EAAjD;AAKA,yBAAqCnC,oEAArC;AACA,6BAAgD,EAAhD;AACA,yBAAgB,CAAhB;AACA,wBAAe,EAAf;AACA,wBAAe,CAAf;AACA,gCAAuB,CAAvB;AAEU,qBAAYT,2EAAZ;AACT,mBAAU,CAAV;AACA,yBAAgB,IAAIE,0CAAJ,EAAhB;AACA,sCAA6B,EAA7B;AACA,6BAAoB,CAAC,CAArB;AASJ,SAAK4C,aAAL,GAAqB,KAAKC,aAAL,EAArB;AACA,SAAKC,SAAL,GAAiB,KAAKC,yBAAL,CAA+BC,QAAhD;AACA,SAAKC,SAAL,GAAiB,KAAKC,2BAAL,EAAjB;AACA,SAAKC,yBAAL,GAAiC,KAAKV,qBAAL,CAA2BW,4BAA3B,EAAjC;AACA,SAAKC,gCAAL,GAAwC,KAAKZ,qBAAL,CAA2Ba,mCAA3B,EAAxC;AACA,SAAKC,iBAAL,GAAyB;AACrBC,WAAK,EAAE,KAAKA,KADS;AAErBC,WAAK,EAAE,KAAKN,yBAAL,CAA+BO,SAFjB;AAGrBC,aAAO,EAAE,KAAKA;AAHO,KAAzB;AAKH;;AAEsB,MAAnBC,mBAAmB;AACnB,WAAOjD,qGAAA,CAA6B,KAAKmD,oBAAlC,CAAP;AACH;;AAEDC,UAAQ;AACJ,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACtB,WAAKC,kBAAL,CAAwB,IAAxB;AACH,KAFD,MAEO;AACH,WAAKC,kBAAL;;AAEA,UAAI,KAAKC,QAAL,IAAiB,KAAKA,QAAL,CAAcC,KAAd,CAAoBC,MAAzC,EAAiD;AAC7C,YAAI5D,wFAAA,CAAoB,KAAK0D,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBG,YAAvB,CAAoCC,cAAxD,CAAJ,EAA6E;AACzE,eAAKC,iBAAL,CAAuBC,SAAvB,CACI5E,mFADJ,EAEI;AACI8E,mBAAO,EAAE,KAAKT,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBG,YAAvB,CAAoCM,IAApC,CAAyCC,OADtD;AAEIC,qBAAS,EAAE,KAAKZ,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBG,YAAvB,CAAoCM,IAApC,CAAyCG;AAFxD,WAFJ,EAMI,KANJ,EAOI,KAAK/B,SAPT;AASA;AACH;AACJ;;AACD,WAAKgC,mBAAL;AACH;AACJ;;AAEDC,aAAW;AACP,SAAKC,gBAAL,CAAsBC,kBAAtB,CAAyC,KAAKC,iBAA9C;AACA,SAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB;AACA,SAAKD,QAAL,CAAcE,QAAd;AACH;;AAEMC,QAAM,CAACC,aAAD,EAA2B;AACpC,UAAMC,SAAS,GAAG,KAAKxC,yBAAL,CAA+ByC,KAA/B,GAAuC,KAAKvC,gCAAL,CAAsCuC,KAA/F;;AACA,QAAI,CAACF,aAAD,IAAkB,CAACC,SAAnB,IAAgCD,aAAa,CAACG,GAAd,GAAoBF,SAAxD,EAAmE;AAC/D;AACH;;AACDG,WAAO,CAACC,GAAR,CAAY,mBAAmBL,aAAa,CAACV,IAA7C;AACA,UAAMgB,IAAI,GAAG,IAAb;AACA,UAAMC,YAAY,GAAG,KAAKC,cAAL,CAAoB7B,MAApB,GAA6B,KAAK8B,qBAAL,CAA2B9B,MAA7E;;AAEA,QAAI4B,YAAY,GAAGP,aAAa,CAACG,GAAjC,EAAsC;AAClC,WAAKO,YAAL,CAAkB,IAAlB,EAAwBV,aAAxB;AAEA;AACH,KAbmC,CAepC;;;AACA,SAAKW,UAAL,CAAgBX,aAAa,CAACG,GAAd,GAAoBI,YAApC,EAAkD,MAAK;AACnDK,gBAAU,CAAC,MAAK;AACZ;AACAN,YAAI,CAACI,YAAL,CAAkBJ,IAAlB,EAAwBN,aAAxB;AACH,OAHS,EAGP,CAHO,CAAV;AAIH,KALD;AAMH;;AAEMa,iBAAe,CAACC,MAAD,EAA4B;AAC9C,SAAKC,wBAAL;AACA,SAAK3C,oBAAL,GAA4B0C,MAA5B;AACA,SAAKE,oBAAL;AACH;;AAEMC,oBAAkB,CAACC,SAAD,EAAkB;AACvC,SAAKC,eAAL;AAEAjG,IAAAA,6GAAA,CAAoCd,2EAApC,EAAmD8G,SAAnD;AACA,SAAKG,iBAAL,CAAuBC,OAAvB,GAAiCJ,SAAjC;AACA,SAAKK,sBAAL,CAA4B,KAA5B;AACH;;AAEMC,mBAAiB;AACpB,SAAKD,sBAAL,CAA4B,KAA5B;AACH;;AAEME,mBAAiB;AACpB,UAAMC,MAAM,GAAyC,IAAIrH,kDAAJ,CAAoB,KAAK+D,oBAAzB,CAArD;AACAsD,UAAM,CAACC,SAAP,CAAkBC,mBAAD,IAA6C;AAC1D,WAAKxD,oBAAL,GAA4BwD,mBAA5B;AACA,WAAKZ,oBAAL;AACH,KAHD;AAKA,UAAMa,WAAW,GAAG,IAAIvH,0CAAJ,EAApB;AACAuH,eAAW,CAACF,SAAZ,CAAuB3B,aAAD,IAA+B;AACjD,WAAKD,MAAL,CAAYC,aAAZ;AACH,KAFD;AAGA,SAAK8B,gBAAL,CAAsBJ,MAAtB,EAA8B,KAAKK,aAAnC,EAAkDF,WAAlD;AACH;;AAEMlB,YAAU,CAAC3C,SAAD,EAAqBgE,oBAArB,EAAsD;AACnE5B,WAAO,CAAC6B,KAAR,CAAc,oBAAd;AACA,SAAKC,QAAL,CAAclE,SAAd,EAAyBgE,oBAAzB;AACH;;AAEMG,eAAa;AAChB,QAAI,KAAKC,gDAAT,EAA2D;AACvD,WAAKC,eAAL,CAAqB,KAAKD,gDAA1B;AACH,KAFD,MAEO;AACH,WAAKC,eAAL,CAAqB,KAAKC,kCAA1B;AACH;AACJ;;AAEMC,eAAa,CAACpD,IAAD,EAAuBqD,QAAvB,EAAuD;AACvE,SAAKC,WAAL,CAAiBtD,IAAjB,EAAuBqD,QAAvB;AAEA,SAAKzD,iBAAL,CAAuBC,SAAvB,CACI5E,mFADJ,EAEI;AAAE8E,aAAO,EAAEC,IAAI,CAACD,OAAhB;AAAyBG,eAAS,EAAEF,IAAI,CAACE;AAAzC,KAFJ,EAGI,KAHJ,EAII7E,gFAJJ,EAKI;AACImI,gBAAU,EAAE;AADhB,KALJ;AASH;;AAEMC,eAAa,CAACzD,IAAD,EAAuBqD,QAAvB,EAAuD;AACvE,SAAKC,WAAL,CAAiBtD,IAAjB,EAAuBqD,QAAvB;AAEA,SAAKzD,iBAAL,CAAuBC,SAAvB,CACI5E,mFADJ,EAEI;AAAE8E,aAAO,EAAEC,IAAI,CAACD,OAAhB;AAAyBG,eAAS,EAAEF,IAAI,CAACE;AAAzC,KAFJ,EAGI,KAHJ,EAII7E,gFAJJ;AAMH;;AAEMqI,+BAA6B,CAACC,QAAD,EAA6B;AAC7D,SAAKC,aAAL,CAAmB,KAAKC,SAAxB,EAAmCF,QAAnC,EAA6CG,IAA7C,CACKC,SAAD,IAAuB;AACnB9C,aAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,KAHL,EAIK4B,KAAD,IAAU;AACN7B,aAAO,CAAC6B,KAAR,CAAcA,KAAd;AACH,KANL;AAQH;;AAEMkB,iBAAe,CAAChE,IAAD,EAAkE;AACpF,UAAMiE,aAAa,GAAG,KAAKC,iBAAL,CAAuBC,aAAvB,CAAqC,KAAKN,SAA1C,CAAtB;;AACA,QAAI,CAACI,aAAD,IAAkB,CAACA,aAAa,CAACG,OAArC,EAA8C;AAC1C;AACH;;AAED,UAAMC,iBAAiB,GAAG;AACtBC,SAAG,EAAEL,aAAa,CAACG,OAAd,CAAsBG,SADL;AAEtBC,SAAG,EAAEP,aAAa,CAACG,OAAd,CAAsBK;AAFL,KAA1B;;AAKA,QAAIzE,IAAJ,EAAU;AACNqE,uBAAiB,CAACC,GAAlB,GAAwB,CAACtE,IAAI,CAAC0E,aAAL,CAAmBC,QAAnB,CAA4BJ,SAArD;AACAF,uBAAiB,CAACG,GAAlB,GAAwB,CAACxE,IAAI,CAAC0E,aAAL,CAAmBC,QAAnB,CAA4BF,QAArD;AACH;;AAED,UAAMG,OAAO,GAAG;AACZC,YAAM,EAAE,MADI;AAEZC,WAAK,EAAE,MAFK;AAGZC,cAAQ,EAAE,OAHE;AAIZC,gBAAU,EAAE,gBAJA;AAKZhF,UAAI,EAAE;AACFqE,yBADE;AAEFY,uBAAe,EAAEjF,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAE0E,aAAN,CAAoBQ,EAFnC;AAGFrB,iBAAS,EAAE,KAAKA;AAHd;AALM,KAAhB;AAYA,SAAKsB,aAAL,CACKC,uBADL,CAC6BzJ,8DAD7B,EAC6CiJ,OAD7C,EAEKS,WAFL,GAGK7C,SAHL,CAGgB8C,KAAD,IAAiC;AACxC,UAAIA,KAAJ,EAAW;AACP,aAAK7B,aAAL,CACI;AACI1D,iBAAO,EAAEuF,KAAK,CAACrF,OADnB;AAEIsF,kBAAQ,EAAEvF,IAAI,GAAGA,IAAI,CAACuF,QAAR,GAAmB,CAFrC;AAGIrF,mBAAS,EAAEoF,KAAK,CAACnF;AAHrB,SADJ,EAMImF,KANJ;AAQH;AACJ,KAdL;AAeH;;AAEYE,mBAAiB;AAAA;;AAAA;AAC1B,YAAMjD,MAAM,GAAyC,IAAIrH,kDAAJ,CAAoB,KAAI,CAAC+D,oBAAzB,CAArD;AACAsD,YAAM,CAACC,SAAP,CAAkBC,mBAAD,IAA6C;AAC1D,aAAI,CAACxD,oBAAL,GAA4BwD,mBAA5B;;AACA,aAAI,CAACZ,oBAAL;AACH,OAHD;;AAIA,WAAI,CAAC4D,eAAL,CAAqBlD,MAArB,EAA6B,KAAI,CAACK,aAAlC;AAN0B;AAO7B;;AAEM8C,eAAa;AAChB,UAAMC,QAAQ,GAAiC,IAAIxK,0CAAJ,EAA/C;AACAwK,YAAQ,CAACC,IAAT,CAAcnK,0DAAS,CAAC,KAAKgF,QAAN,CAAvB,EAAwC+B,SAAxC,CAAmDD,MAAD,IAAgC;AAC9E,WAAKtD,oBAAL,GAA4BsD,MAA5B;AACA,WAAKV,oBAAL;AACH,KAHD;AAIAzG,IAAAA,uHAAA,CAAiC,KAAK6D,oBAAtC,EAA4D0G,QAA5D;AACH;;AAEMG,aAAW;AACd,UAAMC,KAAK,GAAoB,IAAI5K,0CAAJ,EAA/B;AACA4K,SAAK,CAACH,IAAN,CAAWnK,0DAAS,CAAC,KAAKgF,QAAN,CAApB,EAAqC+B,SAArC,CAAgDwD,OAAD,IAAoB;AAC/D,WAAKlE,kBAAL,CAAwBkE,OAAxB;AACH,KAFD;AAIA,SAAKC,WAAL,CAAiB,KAAKC,aAAtB,EAAqC,KAAKhE,iBAAL,CAAuBC,OAA5D,EAAqE4D,KAArE;AACH,GA5P4D,CA8P7D;;;AACQhD,UAAQ,CAAClE,SAAD,EAAqBgE,oBAArB,EAAsD;AAClE,UAAMsD,GAAG,GAAGtH,SAAS,GAAGA,SAAH,GAAe,KAAKP,yBAAL,CAA+BO,SAAnE;AAEA,UAAMuH,MAAM,GAAG;AACXzH,WAAK,EAAE,KAAKA,KADD;AAEXC,WAAK,EAAEuH,GAFI;AAGXE,YAAM,EAAE,KAAKnE,iBAAL,CAAuBC,OAHpB;AAIXmE,kBAAY,EAAE,CAJH;AAKXxH,aAAO,EAAE,KAAKA;AALH,KAAf;;AAQA,QAAI,KAAKyH,eAAL,IAAwB,KAAKC,oBAAL,CAA0BJ,MAA1B,CAA5B,EAA+D;AAC3D,UAAIvD,oBAAJ,EAA0B;AACtBA,4BAAoB;AACvB;;AACD;AACH;;AACD,SAAKnE,iBAAL,GAAyB0H,MAAzB;;AAEA,QAAI,CAAC,KAAKK,UAAL,CAAgBN,GAAhB,EAAqBtD,oBAArB,CAAL,EAAiD;AAC7C;AACH;;AAED,SAAKlF,yBAAL,CAA+BoF,QAA/B,CAAwC,KAAKc,SAA7C,EAAwDuC,MAAxD,EAAgE5D,SAAhE,CACKnB,cAAD,IAA4C;AACxCJ,aAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAKwF,oCAAL,CAA0CrF,cAA1C,EAA0D8E,GAA1D,EAA+DtD,oBAA/D;AACH,KAJL,EAKKC,KAAD,IAAW,MAAK,CAAG,CALvB;AAOH;;AAEOvB,cAAY,CAACJ,IAAD,EAAYN,aAAZ,EAAwC8F,eAAuB,CAA/D,EAAgE;AAChF,QAAIA,YAAY,GAAG,EAAnB,EAAuB;AACnB;AACH;;AACD,UAAMC,EAAE,GAAGC,QAAQ,CAACC,cAAT,CAAwBjG,aAAa,CAACd,OAAtC,CAAX;;AACA,QAAI6G,EAAJ,EAAQ;AACJ3F,aAAO,CAACC,GAAR,CAAY,2BAA2BL,aAAa,CAACd,OAArD;AACA6G,QAAE,CAACG,cAAH,CAAkB;AAAEC,aAAK,EAAE,QAAT;AAAmBC,gBAAQ,EAAE;AAA7B,OAAlB;AACH,KAHD,MAGO;AACHhG,aAAO,CAACC,GAAR,CAAY,qCAAqCL,aAAa,CAACd,OAA/D;AACA0B,gBAAU,CAAC,MAAK;AACZ;AACA,cAAMyF,IAAI,GAAGL,QAAQ,CAACC,cAAT,CAAwBjG,aAAa,CAACd,OAAtC,CAAb;;AACA,YAAI,CAACmH,IAAL,EAAW;AACP;AACA,gBAAMC,UAAU,GAAGhG,IAAI,CAACiG,aAAxB,CAFO,CAGP;;AACAjG,cAAI,CAACiG,aAAL,GAAqBvG,aAAa,CAACG,GAAd,GAAoB,GAApB,GAA0B,EAA1B,IAAgCH,aAAa,CAAC/B,OAAd,KAA0B,CAA1B,GAA8B,EAA9B,GAAmC,CAAnE,CAArB;;AACA,cAAIqI,UAAU,KAAKhG,IAAI,CAACiG,aAAxB,EAAuC;AACnCjG,gBAAI,CAACiG,aAAL;AACH;;AACDT,sBAAY;AACf;;AACDxF,YAAI,CAACI,YAAL,CAAkBJ,IAAlB,EAAwBN,aAAxB,EAAuC8F,YAAvC;AACH,OAdS,EAcP,GAdO,CAAV;AAeH;AACJ;;AAEO3E,iBAAe;AACnB,SAAKlD,OAAL,GAAe,CAAf;AACA,SAAKH,KAAL,GAAa,CAAb;AACA,SAAK4H,eAAL,GAAuB,KAAvB;AACA,SAAKjF,qBAAL,GAA6B,EAA7B;AACA,SAAK8F,aAAL,GAAqB,CAArB;AACA,SAAKxJ,qBAAL,CAA2ByJ,oBAA3B,CAAgD,EAAhD,EAAoD,EAApD,EAAwD,CAAxD,EAA2D,EAA3D;AACH;;AAEO/D,aAAW,CAACtD,IAAD,EAAuBqD,QAAvB,EAAuD;AACtE,SAAKzF,qBAAL,CAA2B0J,WAA3B,CAAuCjE,QAAvC;AACA,SAAKzF,qBAAL,CAA2ByJ,oBAA3B,CACI,KAAKhG,cADT,EAEIrB,IAAI,CAACD,OAFT,EAGIC,IAAI,CAACuF,QAHT,EAII,KAAKgC,UAJT;AAMA,SAAK3J,qBAAL,CAA2B4J,2BAA3B,CAAuD,KAAKlG,qBAA5D,EAAmFtB,IAAI,CAACD,OAAxF,EAAiGC,IAAI,CAACuF,QAAtG;AACA,SAAK3H,qBAAL,CAA2B6J,6BAA3B,CAAyD,KAAK9I,KAA9D;AACA,SAAKf,qBAAL,CAA2B8J,SAA3B,CAAqC,KAAKzI,oBAA1C;AACH;;AAEOmD,wBAAsB,CAACuF,gBAAD,EAA0B;AACpD,SAAKC,qBAAL,CAA2B,KAAK/D,SAAhC;;AACA,QACI8D,gBAAgB,IAChB,KAAK/J,qBAAL,CAA2BiK,aAA3B,KAA6C,EAD7C,IAEA,KAAKzJ,SAAL,KAAmB/C,mFAFnB,IAGA,KAAKuC,qBAAL,CAA2BkK,gBAA3B,EAHA,IAIA,KAAKlK,qBAAL,CAA2BiK,aAA3B,KAA6C,KAAK3D,iBAAL,CAAuB6D,SAAvB,CAAiC9M,2EAAjC,CALjD,EAME;AACE,WAAK+M,qBAAL;AACH,KARD,MAQO;AACH,WAAKhG,eAAL;AACA,WAAK5C,kBAAL,CAAwB,IAAxB;AACA,YAAMgH,MAAM,GAAG,KAAK6B,gBAAL,EAAf;AACA,WAAKtK,yBAAL,CACKuK,iBADL,CACuB,KAAKrE,SAD5B,EACuCuC,MADvC,EAC+CuB,gBAD/C,EAEK/B,IAFL,CAEUnK,0DAAS,CAAC,KAAKgF,QAAN,CAFnB,EAGK+B,SAHL,CAIS2F,sBAAD,IAAmD;AAC/C,aAAKC,kBAAL;AACA,aAAKC,gCAAL,CAAsCF,sBAAtC;AACA,aAAKG,iBAAL;;AAEA,YAAI,CAACH,sBAAsB,CAACpH,KAAxB,IAAiC,CAAC,KAAKwH,WAAL,CAAiBJ,sBAAsB,CAACK,GAAxC,CAAtC,EAAoF;AAChF,eAAK7K,yBAAL,CAA+B8K,2BAA/B,CAA2D,KAAK5E,SAAhE;AACH;;AACDpC,kBAAU,CAAC,MAAK;AACZR,iBAAO,CAACC,GAAR,CAAY,qBAAZ;AACAwH,gBAAM,CAACC,cAAP,GAAwB,IAAxB;AACH,SAHS,EAGP,IAHO,CAAV;AAIH,OAhBT,EAiBS7F,KAAD,IAAe,CAAG,CAjB1B;AAmBH;AACJ;;AAEOjB,sBAAoB;AACxB,SAAKG,eAAL;AAEA,SAAK5C,kBAAL,CAAwB,IAAxB;AACA,SAAKzB,yBAAL,CACKiL,iBADL,CACuB,KAAK/E,SAD5B,EACuC,KAAK3B,iBAD5C,EAC+D,KAAKjD,oBADpE,EAEK2G,IAFL,CAGQnK,0DAAS,CAAC,KAAKgF,QAAN,CAHjB,EAIQlF,yDAAQ,CAAC,MAAK;AACV,WAAK6M,kBAAL,CAAwB,IAAxB;AACH,KAFO,CAJhB,EAQK5F,SARL,CASS2F,sBAAD,IAAmD;AAC/C,WAAKE,gCAAL,CAAsCF,sBAAtC;AACH,KAXT,EAYSrF,KAAD,IAAe,CAAG,CAZ1B;AAcH;;AAEOmF,kBAAgB;AACpB,UAAMY,WAAW,GAAG,KAAKC,WAAL,CAAiBC,WAAjB,CAA6B,KAAKlF,SAAlC,EAA6Ca,aAA7C,CAA2DzE,OAA/E;AACA,WAAO;AACHqG,kBAAY,EAAE,CADX;AAEHnE,aAAO,EAAE,KAAKD,iBAAL,CAAuBC,OAF7B;AAGH6G,mBAAa,EAAE,KAHZ;AAIHC,gBAAU,EAAE,IAJT;AAKHJ;AALG,KAAP;AAOH;;AAEOR,kCAAgC,CAACF,sBAAD,EAA+C;AACnF,SAAKvF,aAAL,CAAmBlC,IAAnB,CAAwByH,sBAAsB,CAACpH,KAA/C;AACA,SAAKmI,YAAL,GAAoBf,sBAAsB,CAACpH,KAA3C;AACA,SAAK9B,oBAAL,GAA4BkJ,sBAAsB,CAACK,GAAnD;AACA,SAAKW,aAAL,CAAmBC,aAAnB,CAAiC1I,IAAjC,CAAsCyH,sBAAsB,CAACK,GAA7D;AACA,SAAKjB,UAAL,GAAkBY,sBAAsB,CAACZ,UAAzC;AACA,SAAK8B,oBAAL,GAA4BrN,uHAAA,CAA2C,KAAKiD,oBAAhD,CAA5B;;AAEA,SAAK,MAAMH,OAAX,IAAsBqJ,sBAAsB,CAAC9G,cAA7C,EAA6D;AACzD,YAAMkI,QAAQ,GAAGzK,OAAO,CAACkB,IAAR,CAAawJ,IAAb,CAAmBC,GAAD,IAAS,CAACA,GAAG,CAACC,MAAhC,CAAjB;;AACA,UAAI5K,OAAO,CAACkB,IAAR,CAAaR,MAAb,KAAwB,CAAxB,IAA6B,CAAC+J,QAAlC,EAA4C;AACxCzK,eAAO,CAACkB,IAAR,GAAe,EAAf;AACH;AACJ;;AAED,SAAK2J,kBAAL,CACI9N,4HAAA,CAAoC,IAApC,EAA0CsM,sBAAsB,CAAC9G,cAAjE,CADJ,EAEIxF,4HAAA,CAAoC,KAApC,EAA2CsM,sBAAsB,CAAC9G,cAAlE,CAFJ,EAGI8G,sBAAsB,CAAC0B,iBAH3B;AAMA,QAAIxI,cAAc,GAAG8G,sBAAsB,CAAC9G,cAAvB,CAAsCyI,IAAtC,CAChBC,6BAAD,IACIA,6BAA6B,CAACjL,OAA9B,KAA0C,KAAKA,OAFlC,CAArB;;AAIA,QAAI,CAACuC,cAAD,IAAmB,KAAKvC,OAAL,GAAe,CAAtC,EAAyC;AACrC,WAAKA,OAAL;AACAuC,oBAAc,GAAG8G,sBAAsB,CAAC9G,cAAvB,CAAsCyI,IAAtC,CACZC,6BAAD,IACIA,6BAA6B,CAACjL,OAA9B,KAA0C,KAAKA,OAFtC,CAAjB;AAIH;;AACD,QAAIuC,cAAJ,EAAoB;AAChB,WAAK2I,0BAAL,GAAkC7B,sBAAsB,CAAC8B,cAAzD;AACA5I,oBAAc,CAACrB,IAAf,GAAsB,KAAKkK,0BAAL,CAAgC7I,cAAc,CAACrB,IAA/C,CAAtB;AACAqB,oBAAc,CAACrB,IAAf,GAAsB,KAAKmK,wBAAL,CAA8B9I,cAAc,CAACrB,IAA7C,CAAtB;;AAEA,UAAI,KAAKlB,OAAL,KAAiB,CAArB,EAAwB;AACpB,aAAKuC,cAAL,GAAsBA,cAAc,CAACrB,IAArC;AACA,cAAMoK,UAAU,GAAGjC,sBAAsB,CAAC9G,cAAvB,CAAsCyI,IAAtC,CACdC,6BAAD,IACIA,6BAA6B,CAACjL,OAA9B,KAA0C,CAF/B,CAAnB;;AAIA,YAAIsL,UAAJ,EAAgB;AACZ,eAAK9I,qBAAL,GAA6B8I,UAAU,CAACpK,IAAxC;AACH;AACJ,OATD,MASO;AACH,aAAKsB,qBAAL,GAA6BD,cAAc,CAACrB,IAA5C;AACH;;AACD,WAAKrB,KAAL,GAAa0C,cAAc,CAACzC,KAA5B;AACH,KAlBD,MAkBO,IAAI,KAAKE,OAAL,KAAiB,CAArB,EAAwB;AAC3B,WAAKuC,cAAL,GAAsB,EAAtB;AACA,WAAKC,qBAAL,GAA6B,EAA7B;AACH,KAHM,MAGA;AACH,WAAKE,UAAL;AACH;AACJ;;AAEO2I,0BAAwB,CAAC9I,cAAD,EAAwC;;;AACpE,UAAMgJ,MAAM,GAAG,YAAK/K,QAAL,MAAa,IAAb,IAAagL,aAAb,GAAa,MAAb,GAAaA,GAAE/K,KAAF,CAAQ,CAAR,CAAb,IAA0B,WAAKD,QAAL,MAAa,IAAb,IAAaiL,aAAb,GAAa,MAAb,GAAaA,GAAEhL,KAAF,CAAQ,CAAR,EAAWG,YAAX,CAAwBwF,EAA/D,GAAoE,IAAnF;;AACA,QAAImF,MAAJ,EAAY;AACR,aAAO,KAAK1M,yBAAL,CAA+B6M,wBAA/B,CACHnJ,cADG,EAEHgJ,MAFG,CAAP;AAIH;;AACD,WAAOhJ,cAAP;AACH;;AAEOrD,eAAa;;;AACjB,UAAMyM,KAAK,GAAG,iBAAKC,MAAL,CAAYC,oBAAZ,QAAkC,IAAlC,IAAkCL,aAAlC,GAAkC,MAAlC,GAAkCA,GAAEM,MAApC,MAA0C,IAA1C,IAA0CL,aAA1C,GAA0C,MAA1C,GAA0CA,GAAEE,KAA1D;AACA,UAAMI,IAAI,GAAGJ,KAAK,GAAGA,KAAK,CAAC,MAAD,CAAR,GAAmB,EAArC;AACA,WAAOI,IAAI,KAAKxP,+EAAT,IAA8BwP,IAAI,KAAKxP,2EAA9C;AACH;;AAEOgE,oBAAkB;AACtB,SAAKC,QAAL,GAAgB,KAAK3B,yBAAL,CAA+BqN,6BAA/B,EAAhB;AACH;;AAEOtE,sCAAoC,CACxCrF,cADwC,EAExCxC,SAFwC,EAGxCgE,oBAHwC,EAGP;AAEjC,QAAI,KAAK/D,OAAL,KAAiB,CAArB,EAAwB;AACpB,WAAKuC,cAAL,GAAsB,CAAC,GAAG,KAAKA,cAAT,EAAyB,GAAGA,cAA5B,CAAtB;AACH,KAFD,MAEO;AACH,WAAKC,qBAAL,GAA6B,CAAC,GAAG,KAAKA,qBAAT,EAAgC,GAAGD,cAAnC,CAA7B;AACH;;AAED,UAAM4J,SAAS,GAAG5J,cAAc,CAAC7B,MAAjC;;AACA,QAAK,KAAKV,OAAL,KAAiB,CAAjB,IAAsBmM,SAAS,GAAGpM,SAAnC,IAAkD,KAAKC,OAAL,KAAiB,CAAjB,IAAsBmM,SAAS,GAAGpM,SAAxF,EAAoG;AAChG,UAAI,KAAKC,OAAL,IAAgB,KAAKN,gCAAL,CAAsCM,OAA1D,EAAmE;AAC/D,aAAKyH,eAAL,GAAuB,IAAvB;AACH,OAFD,MAEO;AACH,aAAKzH,OAAL;AACA,aAAKH,KAAL,GAAa,CAAb;AACA,aAAKoE,QAAL,CAAclE,SAAS,GAAGoM,SAA1B,EAAqCpI,oBAArC;AACA;AACH;AACJ,KATD,MASO;AACH,UAAI,KAAK/D,OAAL,KAAiB,CAArB,EAAwB;AACpB,aAAKH,KAAL,IAAcsM,SAAd;AACH;;AAED,UAAI,KAAKnM,OAAL,KAAiB,CAArB,EAAwB;AACpB,aAAKH,KAAL,IAAcsM,SAAd;AACH;AACJ;;AACD,QAAIpI,oBAAJ,EAA0B;AACtBA,0BAAoB;AACvB;AACJ;;AAEO8G,oBAAkB,CAACuB,WAAD,EAAsBC,aAAtB,EAA6CtB,iBAA7C,EAAsE;AAC5F,SAAKvL,yBAAL,GAA8B8M,gCACvB,KAAK9M,yBADkB,GACO;AACjCyC,WAAK,EAAEmK,WAD0B;AAEjCrB;AAFiC,KADP,CAA9B;AAKA,SAAKrL,gCAAL,GAAqC4M,gCAC9B,KAAK5M,gCADyB,GACO;AACxCuC,WAAK,EAAEoK,aADiC;AAExCtB;AAFwC,KADP,CAArC;AAKA,SAAKwB,2BAAL;AACA,SAAKzN,qBAAL,CAA2B0N,4BAA3B,CACI,KAAKhN,yBADT,EAEI,KAAKE,gCAFT;AAIH;;AAEO6M,6BAA2B;AAC/B,UAAMpH,aAAa,GAAG,KAAKC,iBAAL,CAAuBC,aAAvB,CAAqC,KAAKN,SAA1C,CAAtB;;AACA,QAAII,aAAa,IAAIA,aAAa,CAACG,OAAnC,EAA4C;AACxC,WAAK9F,yBAAL,CAA+BiN,eAA/B,GAAiDtH,aAAa,CAACG,OAAd,CAAsBoH,QAAvE;AACA,WAAKhN,gCAAL,CAAsC+M,eAAtC,GAAwDtH,aAAa,CAACG,OAAd,CAAsBoH,QAA9E;AACH;AACJ;;AAEOtB,4BAA0B,CAAC7I,cAAD,EAAwC;AACtE,UAAM/B,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMmM,SAAS,GAAGnM,QAAQ,IAAIA,QAAQ,CAACC,KAAT,CAAeC,MAA3B,GAAoCF,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBG,YAAlB,CAA+BwF,EAAnE,GAAwE,IAA1F;AACA,WAAO,KAAKvH,yBAAL,CAA+B+N,YAA/B,CACHrK,cADG,EAEH,KAAK2I,0BAFF,EAGHyB,SAHG,CAAP;AAKH;;AAEOE,iBAAe;AACnB,UAAMC,IAAI,GAAG7P,4GAAA,CAAmCd,2EAAnC,CAAb;;AACA,QAAI2Q,IAAJ,EAAU;AACN,WAAK1J,iBAAL,CAAuBC,OAAvB,GAAiCyJ,IAAjC;AACH;AACJ;;AAEOpF,sBAAoB,CAACJ,MAAD,EAK3B;AACG,UAAM0F,UAAU,GAAG,KAAKpN,iBAAxB;AACA,WACIoN,UAAU,CAAChN,OAAX,KAAuBsH,MAAM,CAACtH,OAA9B,IACAgN,UAAU,CAACnN,KAAX,KAAqByH,MAAM,CAACzH,KAD5B,IAEAmN,UAAU,CAACzF,MAAX,KAAsBD,MAAM,CAACC,MAHjC;AAKH;;AAEOI,YAAU,CAAC5H,SAAD,EAAoBgE,oBAApB,EAAqD;AACnE,UAAMkJ,kBAAkB,GAAG,KAAKzN,yBAAL,CAA+ByC,KAA1D;;AACA,QAAI,KAAKjC,OAAL,KAAiB,CAAjB,IAAsBiN,kBAAtB,IAA4C,KAAK1K,cAAL,CAAoB7B,MAApB,IAA8BuM,kBAA9E,EAAkG;AAC9F,WAAKjN,OAAL;AACA,WAAKH,KAAL,GAAa,CAAb;AACA,WAAKoE,QAAL,CAAclE,SAAd,EAAyBgE,oBAAzB;AACA,aAAO,KAAP;AACH;;AAED,UAAMmJ,yBAAyB,GAAG,KAAKxN,gCAAL,CAAsCuC,KAAxE;;AACA,QACI,KAAKjC,OAAL,KAAiB,CAAjB,IACAkN,yBADA,IAEA,KAAK1K,qBAAL,CAA2B9B,MAA3B,IAAqCwM,yBAHzC,EAIE;AACE,WAAKzF,eAAL,GAAuB,IAAvB;AACA,aAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH;;AAEOnG,qBAAmB;AACvB,SAAK8B,iBAAL,GAAyB;AACrBC,aAAO,EAAE;AADY,KAAzB;AAGA,SAAK8J,YAAL,GAAoB,KAAKC,gBAAL,CAAsBjR,2EAAtB,CAApB;AACA,SAAK0Q,eAAL;AAEA,SAAKQ,eAAL,CAAqBC,uBAArB,CAA6CxG,IAA7C,CAAkDpK,qDAAI,CAAC,CAAD,CAAtD,EAA2DC,0DAAS,CAAC,KAAKgF,QAAN,CAApE,EAAqF+B,SAArF,CAA+F,MAAK;AAChG,WAAKyJ,YAAL,GAAoB,KAAKC,gBAAL,CAAsBjR,2EAAtB,CAApB;AACA,WAAKmH,sBAAL,CAA4B,KAA5B;AACH,KAHD;AAIA,SAAKiK,eAAL,CAAqBC,uBAArB,CAA6C1G,IAA7C,CAAkDpK,qDAAI,CAAC,CAAD,CAAtD,EAA2DC,0DAAS,CAAC,KAAKgF,QAAN,CAApE,EAAqF+B,SAArF,CAA+F,MAAK;AAChG,WAAKN,iBAAL,CAAuB8G,aAAvB,GAAuC,IAAvC;AACA,WAAK5G,sBAAL,CAA4B,KAA5B;AACH,KAHD;AAIA,SAAK5B,iBAAL,GAAyB,KAAKF,gBAAL,CAAsBiM,gBAAtB,CACrBjR,yFADqB,EAErB,KAAK+D,kBAFgB,EAGrB,IAHqB,CAAzB;AAKA,SAAK+C,sBAAL,CAA4B,IAA5B;AAEA,SAAKqK,mCAAL,CAAyC,KAAK5I,SAA9C,EAAyD,KAAKhC,oBAAL,CAA0B6K,IAA1B,CAA+B,IAA/B,CAAzD;AACH;;AAEO1E,uBAAqB;AACzB,SAAK3G,cAAL,GAAsB,KAAKzD,qBAAL,CAA2B+O,qBAA3B,EAAtB;AACA,SAAKrL,qBAAL,GAA6B,KAAK1D,qBAAL,CAA2BgP,4BAA3B,EAA7B;AACA,UAAMC,WAAW,GAAG,KAAKjP,qBAAL,CAA2BW,4BAA3B,EAApB;AACA,SAAKD,yBAAL,GAAiCuO,WAAW,GAAGA,WAAH,GAAiB,KAAKvO,yBAAlE;AACA,UAAMwO,eAAe,GAAG,KAAKlP,qBAAL,CAA2Ba,mCAA3B,EAAxB;AACA,SAAKD,gCAAL,GAAwCsO,eAAe,GACjDA,eADiD,GAEjD,KAAKtO,gCAFX;AAGA,SAAKS,oBAAL,GAA4B,KAAKrB,qBAAL,CAA2BmP,SAA3B,KACtB,KAAKnP,qBAAL,CAA2BmP,SAA3B,EADsB,GAEtB,EAFN;AAGA,SAAKpO,KAAL,GAAa,KAAKf,qBAAL,CAA2BoP,WAAxC;AACA,SAAK5E,kBAAL,CAAwB,IAAxB;AACA,SAAKhB,aAAL,GAAqB,KAAKxJ,qBAAL,CAA2BqP,WAAhD;AACA,SAAK3O,yBAAL,GAAiC,KAAKV,qBAAL,CAA2BW,4BAA3B,EAAjC;AACA,SAAKC,gCAAL,GAAwC,KAAKZ,qBAAL,CAA2Ba,mCAA3B,EAAxC;AACA,UAAM4E,QAAQ,GAAG,KAAKzF,qBAAL,CAA2BsP,WAA3B,EAAjB;AACA,SAAK3F,UAAL,GAAkB,KAAK3J,qBAAL,CAA2BuP,aAA3B,EAAlB;;AACA,QAAI9J,QAAJ,EAAc;AACV,WAAKW,eAAL,CAAqB;AAAEU,qBAAa,EAAErB,QAAjB;AAA2BkC,gBAAQ,EAAE;AAArC,OAArB;AACH;AACJ;;AAEO+C,mBAAiB;AACrB,UAAMmC,KAAK,GAAG2C,OAAO,CAAC3C,KAAtB;;AACA,QAAIA,KAAK,IAAIA,KAAK,CAAC4C,KAAnB,EAA0B;AACtB,WAAK,MAAMC,WAAX,IAA0B7C,KAAK,CAAC4C,KAAhC,EAAuC;AACnC,YAAI5C,KAAK,CAAC4C,KAAN,CAAYE,cAAZ,CAA2BD,WAA3B,CAAJ,EAA6C;AACzC,kBAAQA,WAAR;AACI,iBAAK,eAAL;AACI,mBAAKtK,aAAL;AACA;AAHR;AAKH;AACJ;AACJ;AACJ;;AAnpB4D;;;mBAApDvF,yBAAuBxB,gEAAAA,CAAAA,iIAAAA,GAAAA,gEAAAA,CAAAA,oHAAAA,GAAAA,gEAAAA,CAAAA,oDAAAA;AAAA;;;QAAvBwB;AAAuB+P;AAAAC;AAAA;;;;;;;;;;;;;;;;;;ACvCpCxR,MAAAA,6DAAAA;AACIA,MAAAA,yDAAAA;;AA0BAA,MAAAA,6DAAAA;AACIA,MAAAA,yDAAAA;AAeAA,MAAAA,yDAAAA;AAKAA,MAAAA,yDAAAA;AAwBAA,MAAAA,yDAAAA;AAaAA,MAAAA,yDAAAA;AA4BJA,MAAAA,2DAAAA;;;;AAjHoDA,MAAAA,yDAAAA;AAC9CA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA,SAAAA,0DAAAA;AA2BIA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;AAeAA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;AAKAA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;AAwBSA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;AAaAA,MAAAA,wDAAAA;AAAAA,MAAAA,yDAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFwB;AACF;AAC4B;AACK;AACT;AACqC;AACrD;AAErD,mCAAmC;AAC8H;AACtG;AAC4B;AAC1B;AAC7D,mCAAmC;AAC6F;AAC/C;AAC9B;AACnD,mCAAmC;AACqH;AAC5E;AAC5E,mCAAmC;AAC6I;AAChL,mCAAmC;AACmI;AACtK,mCAAmC;AAC6H;AAChK,mCAAmC;AAC0H;AAC7J,mCAAmC;AACyI;AAC3C;AACjI,mCAAmC;AACoH;AACvJ,mCAAmC;AACoJ;AACvL,mCAAmC;AACgI;AAClF;AACyC;;;;;;;;;;;;;;;AAoCnH,MAAM,oBAAoB;;wFAApB,oBAAoB;kHAApB,oBAAoB;sHAhBpB;YACL,+DAAY;YACZ,0DAAY;YACZ,uFAA2B;YAC3B,wDAAW;YACX,iEAAc;YACd,sEAAoB;YACpB,+FAA8B;YAC9B,uEAAqB;YACrB,yFAAoB;YACpB,wDAAW;YACX,qFAAmB;YACnB,0FAAoB;SACvB;oIAGQ,oBAAoB,mBAhCzB,8EAAuB;QACvB,mHAA0B;QAC1B,yIAAgC;QAChC,0KAA2C;QAC3C,kKAAwC;QACxC,0LAAgD;QAChD,gLAA4C;QAC5C,0KAA0C;QAC1C,uKAAyC;QACzC,qLAAyC;QACzC,2IAAiC;QACjC,iKAAuC;QACvC,gMAA4C;QAC5C,6KAA2C;QAC3C,oIAA8B,aAG9B,+DAAY;QACZ,0DAAY;QACZ,uFAA2B;QAC3B,wDAAW;QACX,iEAAc;QACd,sEAAoB;QACpB,+FAA8B;QAC9B,uEAAqB;QACrB,yFAAoB;QACpB,wDAAW;QACX,qFAAmB;QACnB,0FAAoB,aAEd,oEAAiB;mEA9BvB,8EAAuB,+lCAUvB,2IAAiC,uIATjC,mHAA0B;;;;;;;;;;;;;;;AC1C3B,MAAM,kBAAkB,GAAwB;IACnD;QACI,IAAI,EAAE,GAAG;QACT,KAAK,EAAE,yBAAyB;KACnC;IACD;QACI,IAAI,EAAE,GAAG;QACT,KAAK,EAAE,yBAAyB;KACnC;IACD;QACI,IAAI,EAAE,GAAG;QACT,KAAK,EAAE,qBAAqB;KAC/B;IACD;QACI,IAAI,EAAE,GAAG;QACT,KAAK,EAAE,0BAA0B;KACpC;IACD;QACI,IAAI,EAAE,GAAG;QACT,KAAK,EAAE,wBAAwB;KAClC;CACJ,CAAC;;;;;;;;;;;;;;;;;;;;;ACvBuG;;;;;;;;ICAzG,yEAAyD;IAEjD,uDACJ;IAAA,4DAAqB;;;IADjB,0DACJ;IADI,+GACJ;;;IAEJ,yEAA4D;IACxD,2FAAkG;IACtG,4DAAM;;;IAD0B,0DAAuC;IAAvC,uGAAuC;;;;;IAEvE,yEAIC;IAEO,uDAKJ;;;IAAA,4DAAqB;;;IARrB,qHAA0D;IAGtD,0DAKJ;IALI,ggBAKJ;;;IAEJ,yEAA0G;IAElG,uDAKJ;;;IAAA,4DAAqB;;;IALjB,0DAKJ;IALI,meAKJ;;ADnBG,MAAM,2CAA2C;IAQpD,YAAmB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAN1C,UAAK,GAAuB,CAAC,CAAC;QAC9B,YAAO,GAAG,KAAK,CAAC;QAChB,oBAAe,GAAuB,EAAE,CAAC;QACxC,oBAAe,GAAuB,IAAI,uDAAY,EAAE,CAAC;QAC5D,iCAA4B,GAAkB,IAAI,CAAC;IAEJ,CAAC;IAEvD,QAAQ,KAAI,CAAC;IAEb,WAAW,CAAC,OAAsB;QAC9B,IAAI,OAAO,CAAC,uBAAuB,CAAC,IAAI,OAAO,CAAC,uBAAuB,CAAC,CAAC,YAAY,EAAE;YACnF,MAAM,aAAa,GAA0B,OAAO,CAAC,uBAAuB,CAAC,CAAC,YAAY,CAAC;YAC3F,IAAI,CAAC,4BAA4B,GAAG,aAAa,CAAC,IAAI,CAAC;SAC1D;IACL,CAAC;IAEM,iBAAiB;QACpB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;;sIArBQ,2CAA2C;yIAA3C,2CAA2C;QCTxD,uIAIM;QACN,uIAEM;QACN,wIAYM;QACN,wIAQM;;QA7BsB,2FAA2B;QAKxB,0DAA2B;QAA3B,2FAA2B;QAIrD,0DAAiD;QAAjD,yHAAiD;QAYhD,0DAAgD;QAAhD,wHAAgD;;;;;;;;;;;;;;;;;;;;;;;ACrBtD;;;;;;;;;;;;;ACEQA,IAAAA,4DAAAA;AAKIA,IAAAA,wDAAAA;AAAAA,MAAAA,2DAAAA;AAAA;AAAA,aAAeuB,sBAAf;AAA8B,KAA9B,EAA+B,wBAA/B,EAA+B;AAAAvB,MAAAA,2DAAAA;AAAA;AAAA,aACL0R,0CADK;AAC8B,KAD7D;AAEH1R,IAAAA,0DAAAA;;;;;AALGA,IAAAA,wDAAAA,+BAAsB,UAAtB,EAAsBc,yBAAtB,EAAsB,aAAtB,EAAsB,IAAtB;;;;;;;;AAOJd,IAAAA,4DAAAA;AAIIA,IAAAA,wDAAAA;AAAAA,MAAAA,2DAAAA;AAAA;AAAA,aAAe2R,sBAAf;AAA8B,KAA9B;AACH3R,IAAAA,0DAAAA;;;;;AAHGA,IAAAA,wDAAAA,+BAAsB,UAAtB,EAAsB4R,yBAAtB;;;;;;AAbZ5R,IAAAA,qEAAAA;AACIA,IAAAA,4DAAAA;AACIA,IAAAA,wDAAAA;;AASAA,IAAAA,wDAAAA;;AAMJA,IAAAA,0DAAAA;AACJA,IAAAA,mEAAAA;;;;;AAfaA,IAAAA,uDAAAA;AAAAA,IAAAA,wDAAAA,SAAAA,yDAAAA;AASAA,IAAAA,uDAAAA;AAAAA,IAAAA,wDAAAA,SAAAA,yDAAAA;;;;;;AAQTA,IAAAA,4DAAAA;AACIA,IAAAA,uDAAAA;AAMJA,IAAAA,0DAAAA;;;;;AALQA,IAAAA,uDAAAA;AAAAA,IAAAA,wDAAAA,kBAAgB,OAAhB,EAAgB6R,4DAAhB,EAAgB,iBAAhB,EAAgBA,sEAAhB;;;;ADVN,MAAOC,gCAAP,CAAuC;AAUzCrQ,cAAmBsQ,eAAnB,EAA6DC,WAA7D,EAAqF;AAAlE;AAA0C;AATpD,gBAAgC,KAAhC;AAEC,uBAAkC,IAAIP,uDAAJ,EAAlC;AACA,kCAA8D,IAAIA,uDAAJ,EAA9D;AAEH,iBAAQ,IAAR;AAIkF;;AAEzFxO,UAAQ;AACJ,SAAKgP,KAAL,GAAa,KAAKC,IAAL,KAAc,KAA3B;;AACA,QAAI,KAAKD,KAAT,EAAgB;AACZ,WAAKzE,GAAL,GAAW,KAAKzJ,IAAhB;AACH,KAFD,MAEO;AACH,WAAK6M,WAAL,GAAmB,KAAK7M,IAAxB;AACH;AACJ;;AAEMoO,kBAAgB;;;AACnB,QAAI,CAAC,KAAKF,KAAV,EAAiB;AACb,aAAO,EAAP;AACH;;AACD,QAAI,KAAKD,WAAL,CAAiBI,QAAjB,MAA+B,KAAK5E,GAApC,IAA2C,KAAKA,GAAL,CAAS6E,iBAAxD,EAA2E;AACvE,aAAO,KAAK7E,GAAL,CAAS6E,iBAAhB;AACH;;AAED,WAAO;AACHC,mBAAa,EAAE,WAAK9E,GAAL,MAAQ,IAAR,IAAQa,aAAR,GAAQ,MAAR,GAAQA,GAAEiE,aADtB;AAEHC,aAAO,EAAE,WAAK/E,GAAL,MAAQ,IAAR,IAAQc,aAAR,GAAQ,MAAR,GAAQA,GAAEiE,OAFhB;AAGHC,cAAQ,EAAE,WAAKhF,GAAL,MAAQ,IAAR,IAAQiF,aAAR,GAAQ,MAAR,GAAQA,GAAED,QAHjB;AAIHE,mBAAa,EAAE,WAAKlF,GAAL,MAAQ,IAAR,IAAQmF,aAAR,GAAQ,MAAR,GAAQA,GAAED,aAJtB;AAKHE,uBAAiB,EAAE,WAAKpF,GAAL,MAAQ,IAAR,IAAQqF,aAAR,GAAQ,MAAR,GAAQA,GAAED,iBAL1B;AAMHE,WAAK,EAAE,WAAKtF,GAAL,MAAQ,IAAR,IAAQuF,aAAR,GAAQ,MAAR,GAAQA,GAAED,KANd;AAOHE,YAAM,EAAE,WAAKxF,GAAL,MAAQ,IAAR,IAAQyF,aAAR,GAAQ,MAAR,GAAQA,GAAED,MAPf;AAQHE,eAAS,EAAE,WAAK1F,GAAL,MAAQ,IAAR,IAAQ2F,aAAR,GAAQ,MAAR,GAAQA,GAAED,SARlB;AASHE,mBAAa,EAAE,WAAK5F,GAAL,MAAQ,IAAR,IAAQ6F,aAAR,GAAQ,MAAR,GAAQA,GAAED;AATtB,KAAP;AAWH;;AAEM5L,eAAa;AAChB,SAAKH,WAAL,CAAiBiM,IAAjB;AACH;;AA5CwC;;;mBAAhCxB,kCAAgC9R,+DAAAA,CAAAA,uEAAAA,GAAAA,+DAAAA,CAAAA,qFAAAA;AAAA;;;QAAhC8R;AAAgCP;AAAAgC;AAAArB;AAAAnO;AAAA;AAAAyP;AAAAnM;AAAAoM;AAAA;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;ACZ7C7T,MAAAA,wDAAAA;AAmBAA,MAAAA,wDAAAA,2FAAAA,oEAAAA;;;;;;AAnBeA,MAAAA,wDAAAA,6BAAsB,UAAtB,EAAsB8T,GAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYQ;AAI8E;AAGxD;;;;;;;;;;;;;ICjBrC,0EAAsF;IAG9E,qWAAmB,0BAAmB,IAAC;IAG1C,4DAA2C;;;IAJxC,0DAA+C;IAA/C,+GAA+C;;;;IAwB/C,0EAGC;IAKO,wZAEX,kHAGc,CAAC,GAE1B,IADuB,wTACyB,wCAAgC,IADzD;IAEJ,4DAAgC;;;IAX7B,0DAAqC;IAArC,wGAAqC;IACrC,uFAA2B;;;;IAjC/C,4EAAqG;IACjG,4HAOM;IACN,yEASC;IAHG,mTAAY,wBAAgB,IAAC;IAI7B,yFAOC;IAFG,0TAAY,iCAAyB,IAAC,4PAC7B,iCAAyB,IADI;IAGtC,4HAiBM;IACV,4DAAmB;;;;IA5CkC,0DAA2B;IAA3B,8FAA2B;IAWhF,0DAAuD;IAAvD,kHAAuD;IASnD,0DAA6B;IAA7B,6FAA6B;IAQC,0DAAyC;IAAzC,sFAAyC;;;;IA2EnF,0EAA0E;IAEnC,0SAAS,2BAAmB,IAAC;IAAC,uDAAmC;;IAAA,4DAAS;IACzG,6EAAwC;IAAA,uDAA4C;;IAAA,4DAAS;;IADhC,0DAAmC;IAAnC,mJAAmC;IACxD,0DAA4C;IAA5C,4JAA4C;;AD/EzF,MAAM,0BAA2B,SAAQ,+GAAoB;IA4BhE,YAAoB,QAAmB,EAAS,eAAgC;QAC5E,KAAK,EAAE,CAAC;QADQ,aAAQ,GAAR,QAAQ,CAAW;QAAS,oBAAe,GAAf,eAAe,CAAiB;QA3BxB,oBAAe,GACnE,SAAS,CAAC;QAC+C,kBAAa,GAA2B,SAAS,CAAC;QACtG,mBAAc,GAA4B,EAAE,CAAC;QAC7C,0BAAqB,GAA4B,EAAE,CAAC;QAEpD,oBAAe,GAAG,CAAC,CAAC;QACpB,8BAAyB,GAA8B;YAC5D,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,CAAC;SACX,CAAC;QACO,qCAAgC,GAA8B;YACnE,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,CAAC;SACX,CAAC;QACO,oBAAe,GAAG,KAAK,CAAC;QACvB,aAAQ,GAAuB,IAAI,uDAAY,EAAQ,CAAC;QACxD,oBAAe,GAAuB,IAAI,uDAAY,EAAQ,CAAC;QAC/D,gBAAW,GAAiC,IAAI,uDAAY,EAAkB,CAAC;QAC/E,2BAAsB,GAC5B,IAAI,uDAAY,EAA8D,CAAC;QAG5E,wBAAmB,GAA8B,EAAE,CAAC;IAI3D,CAAC;IAED,WAAW,CAAC,OAAsB;QAC9B,IAAI,OAAO,CAAC,gBAAgB,CAAC,IAAI,OAAO,CAAC,uBAAuB,CAAC,EAAE;YAC/D,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC3B;QACD,IAAI,OAAO,CAAC,iBAAiB,CAAC,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;YAC1D,IAAI,CAAC,6BAA6B,EAAE,CAAC;SACxC;IACL,CAAC;IAEM,QAAQ,KAAU,CAAC;IAEnB,iBAAiB;QACpB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACtC,CAAC;IAEM,QAAQ,CAAC,MAA4B;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;SACxB;IACL,CAAC;IAEM,aAAa,CAAC,IAAoB;;QACrC,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;gBAClB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,QAAQ,EAAE,UAAI,CAAC,eAAe,0CAAE,YAAY,CAAC,mBAAmB;aACnE,CAAC,CAAC;SACN;IACL,CAAC;IAEM,wBAAwB,CAAC,aAAoC;;QAChE,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;gBAC7B,aAAa,EAAE,aAAa;gBAC5B,QAAQ,EAAE,UAAI,CAAC,eAAe,0CAAE,YAAY,CAAC,mBAAmB;aACnE,CAAC,CAAC;SACN;IACL,CAAC;IAEM,QAAQ,CAAC,KAAa,EAAE,IAA6B;QACxD,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAClC,CAAC;IAED,eAAe;QACX,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACzC,CAAC;IAEM,uBAAuB,CAAC,MAAM,GAAG,IAAI;QACxC,qBAAqB,CAAC,GAAG,EAAE;;YACvB,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,IAAI,MAAM,GAAG,EAAE,CAAC;gBAEhB,MAAM,WAAW,GACb,WAAI,CAAC,eAAe,0CAAE,YAAY,CAAC,iBAAiB;qBACpD,UAAI,CAAC,eAAe,0CAAE,YAAY,CAAC,iBAAiB;qBACpD,UAAI,CAAC,eAAe,0CAAE,YAAY,CAAC,mBAAmB,EAAC;gBAE3D,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;oBACtC,MAAM,GAAG,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;iBACzC;qBAAM;oBACH,MAAM,GAAG,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC;iBACpC;gBAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;oBAC7E,MAAM,GAAG,MAAM,CAAC;iBACnB;gBAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAI,CAAC,aAAa,0CAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAE5E,IAAI,MAAM,EAAE;oBACR,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;iBACvC;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qBAAqB;QACxB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAClE,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,uDAAM,CAAC;IACzD,CAAC;IAEO,gBAAgB;QACpB,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YAC5B,MAAM,MAAM,GAA8B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAA0B,EAAE,EAAE,CAAC,CAAC;gBAC/F,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,GAAG;gBACT,EAAE,EAAE,GAAG,CAAC,OAAO;aAClB,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE;YACnC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;gBAC1B,IAAI,EAAE,eAAe;gBACrB,IAAI,EAAE,IAAI,CAAC,gCAAgC;aAC9C,CAAC,CAAC;YACH,MAAM,MAAM,GAA8B,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAA0B,EAAE,EAAE,CAAC,CAAC;gBACtG,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,GAAG;gBACT,EAAE,EAAE,GAAG,CAAC,OAAO;aAClB,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;SAC5C;IACL,CAAC;IAEO,6BAA6B;QACjC,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,qBAAqB,CAAC,GAAG,EAAE;gBACvB,qBAAqB,CAAC,GAAG,EAAE;;oBACvB,UAAI,CAAC,eAAe,0CAAE,gBAAgB,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SACN;IACL,CAAC;;oGApJQ,0BAA0B;wHAA1B,0BAA0B;;;;;;;;QC7BvC,yEAA4B;QACxB,uHA+CM;QAyDN,sHAKM;QACV,4DAAM;;QA9GiE,0DAAgC;QAAhC,gGAAgC;QAwGtD,0DAA2B;QAA3B,2FAA2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGf;AAG4C;AAGrC;AAGK;;;;;;;;;;;;;;;;;ICRjE,wEAA+C;IAC3C,wDASJ;;;IAAA,6DAAO;;;IATH,2DASJ;IATI,ktBASJ;;;;IAQQ,2EAAuF;IACnF,sEAA2B;IAE3B,+GAIC;IAHG,kbAAkB,mCAAyB,IAAC;IAG/C,6DAA0C;IAE3C,2EAA0C;IAOlC,yXAAoB,0BAAkB,IAAC,8TACvB,4BAAoB,IADG;IAE1C,6DAA4C;;;;;;IAb7C,2DAAuB;IAAvB,oFAAuB;IAMnB,2DAAwB;IAAxB,qFAAwB;;;IAf5C,0EAA2G;IACvG,6GAAyG;IAEzG,0EAAwC;IACpC,0IAoBM;IACV,6DAAM;;;IAzBkF,2EAAc;IACzD,2DAAa;IAAb,0EAAa;IAGF,2DAAoB;IAApB,wFAAoB;;;;IA0BxF,mGAKC;IADG,2WAAW,mBAAW,IAAC;IAC1B,6DAA8B;;;IAH3B,gGAA+B;;;AD/B5B,MAAM,uCAAuC;IAqBhD,YACY,qBAA4C,EAC5C,WAAwB,EACxB,WAAwB,EACxB,+BAAgE;QAHhE,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,oCAA+B,GAA/B,+BAA+B,CAAiC;QApB5D,oBAAe,GAAG,CAAC,CAAC;QAC7B,0BAAqB,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7C,kBAAa,GAAG,KAAK,CAAC;QACtB,kBAAa,GAAG,CAAC,CAAC;QAClB,eAAU,GAAG,CAAC,CAAC;QAQd,mBAAc,GAAqC,EAAE,CAAC;QACtD,cAAS,GAAG,KAAK,CAAC;QAClB,kBAAa,GAAgB,EAAE,CAAC;IAOrC,CAAC;IAEG,QAAQ;QACX,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;IAEM,YAAY,CAAC,SAAoB;QACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,+BAA+B,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACvG,CAAC;IAEM,gBAAgB;QACnB,IAAI,CAAC,aAAa,GAAG,2IAAkD,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACvG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC;IAC3E,CAAC;IAEM,SAAS;QACZ,IAAI,CAAC,+BAA+B,CAAC,0BAA0B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxF,CAAC;IAEM,cAAc,CAAC,UAAsB;QACxC,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IACpE,CAAC;IAEO,QAAQ;QACZ,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,qBAAqB,CAAC,4BAA4B,EAAE,CAAC;QAC3F,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW;aAChC,WAAW,CAAC,2EAAa,CAAC;aAC1B,KAAK,CAAC,IAAI,CAAC,CAAC,OAAkB,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,KAAK,mFAAe,CAAC,2EAAa,CAAC,CAAC,CAAC;QAC7F,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAChD,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,CAAC,aAAa,GAAG,QAAQ,KAAK,SAAS,CAAC;QAC5C,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACxE,IAAI,CAAC,SAAS,GAAG,wFAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;;8HA7DQ,uCAAuC;sIAAvC,uCAAuC;QCvBpD,0EAAqB;QACjB,yGAI2C;QAE3C,sFAAoB;QAChB,uIAUO;QACX,6DAAqB;QAErB,0EAA+G;QAC3G,oIA0BM;QACV,6DAAM;QAGV,oLAK+B;;QAvDvB,2DAA+B;QAA/B,6FAA+B;QAMxB,2DAAsC;QAAtC,sGAAsC;QAaL,2DAAkE;QAAlE,+JAAkE;QACrD,2DAAwB;QAAxB,6FAAwB;QA+BhF,2DAAmB;QAAnB,oFAAmB;;;;;;;;;;;;;;;;;;;;;;ACrDiF;AAIA;;;;;;;ICGrG,uEAAqC;IAAA,uDAA4B;IAAA,4DAAO;;;IAAnC,0DAA4B;IAA5B,8FAA4B;;;IACjE,wEAAgH;;;ADI7G,MAAM,2CAA2C;IAcpD,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QATrC,2BAAsB,GAAG,CAAC,CAAC;QAC1B,qBAAgB,GAAuB,IAAI,uDAAY,EAAQ,CAAC;QAChE,iBAAY,GAAgD,IAAI,uDAAY,EAGlF,CAAC;QAEE,aAAQ,GAAG,CAAC,CAAC;IAE6B,CAAC;IAElD,IAAI,cAAc;QACd,OAAO,kIAAyC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACzF,CAAC;IAEM,WAAW,CAAC,OAAsB;QACrC,IACI,OAAO,CAAC,wBAAwB,CAAC;YACjC,CAAC,OAAO,CAAC,wBAAwB,CAAC,IAAI,OAAO,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,EAChF;YACE,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;YAChD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;YAC5C,IAAI,CAAC,QAAQ,GAAG,6IAAoD,CAChE,EAAE,WAAW,EAAE,SAAS,EAAE,EAC1B,IAAI,CAAC,sBAAsB,CAC9B,CAAC;SACL;IACL,CAAC;IAEM,QAAQ;QACX,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEM,eAAe;QAClB,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,KAAK,CAAC,EAAE;YACtE,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;YACpF,OAAO;SACV;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,EAAE;YACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,OAAO;SACV;QAED,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;YACnB,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,KAAK,CAAC,EAAE;gBACnC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC;gBAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;aACvF;SACJ;IACL,CAAC;IAEO,cAAc,CAAC,sBAA8B;QACjD,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,EAAE;YAC3C,sBAAsB,GAAG,sBAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;SACjF;QAED,MAAM,MAAM,GAAsB,EAAE,CAAC;QAErC,KAAK,IAAI,CAAC,GAAG,sBAAsB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7C,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SACnD;QAED,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAChB,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;SAC7C;QAED,IAAI,CAAC,YAAY;aACZ,eAAe,CACZ,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,EACnD,EAAE,aAAa,EAAE,gBAAgB,EAAE,KAAK,EAAE,oBAAoB,EAAE,CACnE;aACA,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;YACZ,IAAI,WAAK,CAAC,IAAI,0CAAE,QAAQ,EAAE;gBACtB,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBACnE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;aACvF;YAED,IAAI,WAAK,CAAC,IAAI,0CAAE,MAAM,EAAE;gBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC;gBAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;aACvF;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,cAAc;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACrF,CAAC;;sIAnGQ,2CAA2C;yIAA3C,2CAA2C;QCZxD,4EAKC;QAFG,mKAAS,qBAAiB,IAAC;QAG3B,uDACA;;;QAAA,yIAAwE;QACxE,+IAAgH;QACpH,4DAAS;;QALL,sKAA0D;QAE1D,0DACA;QADA,oRACA;QAAO,0DAA4B;QAA5B,4FAA4B;QACzB,0DAA8B;QAA9B,8FAA8B;;;;;;;;;;;;;;;;;;;;;;;;;IEPxC,yEAA+D;IAOvD,uDACJ;IAAA,4DAAO;IACP,0EAA4C;IAAA,4DAAC;IAAA,4DAAO;IACpD,0EAA4C;IAAA,uDAAwB;IAAA,4DAAO;;;IAPvE,0DAEC;IAFD,8LAEC;IAED,0DACJ;IADI,kGACJ;IAE4C,0DAAwB;IAAxB,0FAAwB;;;ADHrE,MAAM,0CAA0C;;oIAA1C,0CAA0C;wIAA1C,0CAA0C;QCRvD,yEAAgC;QAC5B,sIAWM;QAEN,yEAKC;QACG,uDAIJ;;;QAAA,4DAAM;QAEN,yEAAqG;QACjG,uDACJ;;QAAA,4DAAM;QAGV,yEAA6B;QACiB,wDAA0C;QAAA,4DAAO;;QA/BrF,0DAA8B;QAA9B,8FAA8B;QAehC,0DAEC;QAFD,8KAEC;QAED,0DAIJ;QAJI,2XAIJ;QAGI,0DACJ;QADI,uKACJ;QAI0C,0DAA0C;QAA1C,kHAA0C;;;;;;;;;;;;;;;;;;;;;;;;IE/BpF,yEAA0D;IAElD,oFAAuF;IAC3F,4DAAM;IACN,yEAAiC;IAC7B,oFAAuF;IAG3F,4DAAM;;IANmB,0DAA2C;IAA3C,wIAA2C;IAG3C,0DAA2C;IAA3C,wIAA2C;IAC3C,0DAA2C;IAA3C,wIAA2C;IAC7B,0DAA2C;IAA3C,wIAA2C;;ADDnF,MAAM,iCAAiC;IAG1C;QAFO,UAAK,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;IAEd,CAAC;IAEhB,QAAQ,KAAI,CAAC;;kHALJ,iCAAiC;+HAAjC,iCAAiC;QCP9C,yEAAgC;QAC5B,6HASM;QACV,4DAAM;;QAVoB,0DAAQ;QAAR,8EAAQ;;;;;;;;;;;;;;;;;;;;ACDqC;;;;;;ICK3D,uEAA6D;IACzD,uDAEE;;;IAAA,0EAAoC;IAAA,wEAAa;IAAA,4DAAO;IAAA,uDAC9D;;IAAA,4DAAI;;;IAHA,0DAEE;IAFF,iUAEE;IAAwD,0DAC9D;IAD8D,6JAC9D;;ADFL,MAAM,8BAA8B;IAL3C;QASqB,YAAO,GAAuB,IAAI,uDAAY,EAAQ,CAAC;KAK3E;IAHU,SAAS;QACZ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;;4GARQ,8BAA8B;4HAA9B,8BAA8B;QCP3C,yEAA4C;QAEO,uDAAiC;;QAAA,4DAAI;QAChF,yEAAqC;QACA,uDAA4C;;QAAA,4DAAI;QACjF,uHAII;QACR,4DAAM;QAGV,qEAAkD;QAClD,6EAA8F;QAAtB,uJAAS,eAAW,IAAC;QACzF,wDACJ;;QAAA,4DAAS;;QAdsC,0DAAiC;QAAjC,iJAAiC;QAEvC,0DAA4C;QAA5C,mKAA4C;QACrC,0DAAmB;QAAnB,mFAAmB;QAU/D,0DACJ;QADI,+JACJ","sources":["./src/app/modules/results/accommodations/accommodations-routing.module.ts","./src/app/modules/results/accommodations/accommodations.component.ts","./src/app/modules/results/accommodations/accommodations.component.html","./src/app/modules/results/accommodations/accommodations.module.ts","./src/app/modules/results/accommodations/accommodations.sort.ts","./src/app/modules/results/accommodations/components/accommodation-list-result-information/accommodation-list-result-information.component.ts","./src/app/modules/results/accommodations/components/accommodation-list-result-information/accommodation-list-result-information.component.html","./src/app/modules/results/accommodations/components/accommodation-list-ui-item/accommodation-list-ui-item.component.ts","./src/app/modules/results/accommodations/components/accommodation-list-ui-item/accommodation-list-ui-item.component.html","./src/app/modules/results/accommodations/components/accommodation-list/accommodation-list.component.ts","./src/app/modules/results/accommodations/components/accommodation-list/accommodation-list.component.html","./src/app/modules/results/accommodations/components/mob-accommodation-rooms-list-modal/mob-accommodation-rooms-list-modal.component.ts","./src/app/modules/results/accommodations/components/mob-accommodation-rooms-list-modal/mob-accommodation-rooms-list-modal.component.html","./src/app/modules/results/accommodations/components/mob-accommodation-select-option-button/mob-accommodation-select-option-button.component.ts","./src/app/modules/results/accommodations/components/mob-accommodation-select-option-button/mob-accommodation-select-option-button.component.html","./src/app/modules/results/accommodations/components/mob-accommodation-selected-room-offer/mob-accommodation-selected-room-offer.component.ts","./src/app/modules/results/accommodations/components/mob-accommodation-selected-room-offer/mob-accommodation-selected-room-offer.component.html","./src/app/modules/results/accommodations/components/mob-accommodation-skeleton/mob-accommodation-skeleton.component.ts","./src/app/modules/results/accommodations/components/mob-accommodation-skeleton/mob-accommodation-skeleton.component.html","./src/app/modules/results/accommodations/components/mob-confirm-button-block/mob-confirm-button-block.component.ts","./src/app/modules/results/accommodations/components/mob-confirm-button-block/mob-confirm-button-block.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AccommodationsComponent } from './accommodations.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AccommodationsComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class AccommodationsRoutingModule {}\n","import { Component, ElementRef, Injector, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ServiceId } from '@core/constants/service-id.const';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { AccommodationsDataService } from '@services/modules/accommodations/dataservices/accommodations.data.service';\nimport { TransfersFilterQueryParams } from '@schemas/modules/transfers/transfer-search-query-params';\nimport { FilterReferenceItem } from '@schemas/modules/core/filters/service-filter';\nimport { AccommodationListMetadata } from '@schemas/modules/accommodations/accommodation-list-metadata';\nimport {\n    AccommodationsResponse,\n    AccommodationsResponseSection,\n    IHotelNames,\n} from '@schemas/modules/accommodations/accommodations-response';\nimport { AccommodationListItem } from '@schemas/modules/accommodations/accommodation.model';\nimport { BaseServiceComponent } from '../components/base-service-component/base-service.component';\nimport { StateFrom } from '@core/constants/state-from.const';\nimport { IAccommodationsCartData } from '@schemas/modules/accommodations/accommodations-cart-data';\nimport { SortByValueOption } from '@schemas/modules/core/sort-by-value.option';\nimport { ListenerId } from '@core/constants/listener-id.const';\nimport { finalize, skip, takeUntil } from 'rxjs/operators';\nimport { AccommodationsService } from '@services/modules/accommodations/services/accommodations.service';\nimport { AccommodationsSort } from './accommodations.sort';\nimport { TzMapComponent } from '../../map/map.component';\nimport { CartUtils } from '@services/modules/cart/utils/cart.utils';\nimport { AccommodationsUtilsService } from '@services/modules/accommodations/utils/accommodations.utils';\nimport { FilterService } from '@services/modules/inactivity/filter.service';\nimport { SearchUtilsService } from '@services/modules/search/utils/search.utils';\nimport { ResultsFiltersUtils } from '../results-filters/results-filters.utils.service';\n\nexport interface ISelectedHotel {\n    giataId: string;\n    position: number;\n    hotelName: string;\n}\n\n@Component({\n    selector: 'tz-accommodations',\n    templateUrl: './accommodations.component.html',\n    styleUrls: ['./accommodations.component.scss'],\n})\nexport class AccommodationsComponent extends BaseServiceComponent implements OnInit, OnDestroy {\n    @ViewChild('accommodationsList') accommodationsListElementReference?: ElementRef;\n    @ViewChild('accommodationsListSkeletonLoader') accommodationsListSkeletonLoaderElementReference?: ElementRef;\n\n    public accommodationsFilter: FilterReferenceItem = [];\n    public accommodations: AccommodationListItem[] = [];\n    public nearestAccommodations: AccommodationListItem[] = [];\n    public accommodationListMetadata: AccommodationListMetadata;\n    public nearestAccommodationListMetadata: AccommodationListMetadata;\n\n    public cartData: IAccommodationsCartData | undefined;\n    public sortByOptions: SortByValueOption[] = AccommodationsSort;\n    public filterQueryParams: TransfersFilterQueryParams = {};\n    public scrollToIndex = 0;\n    public serviceTitle = '';\n    public resultsCount = 0;\n    public selectedFiltersCount = 0;\n\n    private readonly serviceId = ServiceId.ACC;\n    private section = 1;\n    private resultsCount$ = new Subject<number>();\n    private accommodationRecommendedID = '';\n    private repriceListenerId = -1;\n    private lastRequestParams: any;\n\n    constructor(\n        private accommodationsDataService: AccommodationsDataService,\n        private accommodationsService: AccommodationsService,\n        private injector: Injector\n    ) {\n        super(injector);\n        this.isNextSummary = this.nextIsSummary();\n        this.isMobile$ = this.screenSizeDetectorService.isMobile;\n        this.stateFrom = this.getStateFromParamFromRouter();\n        this.accommodationListMetadata = this.accommodationsService.getAccommodationListMetadata();\n        this.nearestAccommodationListMetadata = this.accommodationsService.getNearestAccommodationListMetadata();\n        this.lastRequestParams = {\n            start: this.start,\n            limit: this.accommodationListMetadata.increment,\n            section: this.section,\n        };\n    }\n\n    get isEnableClearFilter(): boolean {\n        return FilterService.enableClearAll(this.accommodationsFilter);\n    }\n\n    ngOnInit(): void {\n        if (this.searchRunning()) {\n            this.showSkeletonLoader(true);\n        } else {\n            this.getCartServiceData();\n\n            if (this.cartData && this.cartData.items.length) {\n                if (CartUtils.hasBooked(this.cartData.items[0].selectedItem.bookingOptions)) {\n                    this.cartRouterService.goToState(\n                        ServiceId.ACC_DETAILS,\n                        {\n                            giataId: this.cartData.items[0].selectedItem.data.giataID,\n                            hotelName: this.cartData.items[0].selectedItem.data.name,\n                        },\n                        false,\n                        this.stateFrom\n                    );\n                    return;\n                }\n            }\n            this.initializeComponent();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.listenersService.unregisterListener(this.repriceListenerId);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public search(searchedHotel: IHotelNames) {\n        const maxHotels = this.accommodationListMetadata.total + this.nearestAccommodationListMetadata.total;\n        if (!searchedHotel || !maxHotels || searchedHotel.idx > maxHotels) {\n            return;\n        }\n        console.log('hotel clicked:' + searchedHotel.name);\n        const self = this;\n        const maxLoadedIdx = this.accommodations.length + this.nearestAccommodations.length;\n\n        if (maxLoadedIdx > searchedHotel.idx) {\n            this.callScroller(this, searchedHotel);\n\n            return;\n        }\n\n        // request to paginate till reaching the search element\n        this.onNextPage(searchedHotel.idx - maxLoadedIdx, () => {\n            setTimeout(() => {\n                //Pagination done, let's scroll to searched element position\n                self.callScroller(self, searchedHotel);\n            }, 0);\n        });\n    }\n\n    public onFilterChanged($event: FilterReferenceItem): void {\n        this.scrollToServiceContainer();\n        this.accommodationsFilter = $event;\n        this.filterAccommodations();\n    }\n\n    public sortAccommodations(sortValue: string): void {\n        this.resetPagination();\n\n        SearchUtilsService.saveSortingValue(ServiceId.ACC, sortValue);\n        this.filterQueryParams.sort_by = sortValue;\n        this.loadAccommodationsData(false);\n    }\n\n    public onCancelSelection(): void {\n        this.loadAccommodationsData(false);\n    }\n\n    public onOpenFilterPopup() {\n        const filter: BehaviorSubject<FilterReferenceItem> = new BehaviorSubject(this.accommodationsFilter);\n        filter.subscribe((filterReferenceItem: FilterReferenceItem) => {\n            this.accommodationsFilter = filterReferenceItem;\n            this.filterAccommodations();\n        });\n\n        const searchHotel = new Subject<IHotelNames>();\n        searchHotel.subscribe((searchedHotel: IHotelNames) => {\n            this.search(searchedHotel);\n        });\n        this.openFilterDialog(filter, this.resultsCount$, searchHotel);\n    }\n\n    public onNextPage(increment?: number, paginationFinishedCB?: () => void): void {\n        console.error('pagination request');\n        this.paginate(increment, paginationFinishedCB);\n    }\n\n    public onChangeHotel(): void {\n        if (this.accommodationsListSkeletonLoaderElementReference) {\n            this.scrollToElement(this.accommodationsListSkeletonLoaderElementReference);\n        } else {\n            this.scrollToElement(this.accommodationsListElementReference);\n        }\n    }\n\n    public onChangeRooms(data: ISelectedHotel, mapHotel?: AccommodationListItem): void {\n        this.selectHotel(data, mapHotel);\n\n        this.cartRouterService.goToState(\n            ServiceId.ACC_DETAILS,\n            { giataId: data.giataId, hotelName: data.hotelName },\n            false,\n            StateFrom.ACC_LIST,\n            {\n                changeRoom: true,\n            }\n        );\n    }\n\n    public onSelectHotel(data: ISelectedHotel, mapHotel?: AccommodationListItem): void {\n        this.selectHotel(data, mapHotel);\n\n        this.cartRouterService.goToState(\n            ServiceId.ACC_DETAILS,\n            { giataId: data.giataId, hotelName: data.hotelName },\n            false,\n            StateFrom.ACC_LIST\n        );\n    }\n\n    public onRemoveSelectedAccommodation(optionId: string | undefined): void {\n        this.removeService(this.serviceId, optionId).then(\n            (isRemoved: boolean) => {\n                console.log('remove success');\n            },\n            (error) => {\n                console.error(error);\n            }\n        );\n    }\n\n    public showHotelsOnMap(data?: { selectedHotel: AccommodationListItem; position: number }): void {\n        const accSearchData = this.searchDataService.getSearchData(this.serviceId);\n        if (!accSearchData || !accSearchData.address) {\n            return;\n        }\n\n        const mapCenterPosition = {\n            lng: accSearchData.address.longitude,\n            lat: accSearchData.address.latitude,\n        };\n\n        if (data) {\n            mapCenterPosition.lng = +data.selectedHotel.location.longitude;\n            mapCenterPosition.lat = +data.selectedHotel.location.latitude;\n        }\n\n        const mapConf = {\n            height: '100%',\n            width: '100%',\n            maxWidth: '100vw',\n            panelClass: 'tz-results-map',\n            data: {\n                mapCenterPosition,\n                selectedHotelId: data?.selectedHotel.id,\n                serviceId: this.serviceId,\n            },\n        };\n\n        this.dialogService\n            .openAccommodationDialog(TzMapComponent, mapConf)\n            .afterClosed()\n            .subscribe((hotel: AccommodationListItem) => {\n                if (hotel) {\n                    this.onSelectHotel(\n                        {\n                            giataId: hotel.giataID,\n                            position: data ? data.position : 0,\n                            hotelName: hotel.name,\n                        },\n                        hotel\n                    );\n                }\n            });\n    }\n\n    public async onOpenFilterModal(): Promise<void> {\n        const filter: BehaviorSubject<FilterReferenceItem> = new BehaviorSubject(this.accommodationsFilter);\n        filter.subscribe((filterReferenceItem: FilterReferenceItem) => {\n            this.accommodationsFilter = filterReferenceItem;\n            this.filterAccommodations();\n        });\n        this.openFilterModal(filter, this.resultsCount$);\n    }\n\n    public onResetFilter(): void {\n        const filters$: Subject<FilterReferenceItem> = new Subject();\n        filters$.pipe(takeUntil(this.destroy$)).subscribe((filter: FilterReferenceItem) => {\n            this.accommodationsFilter = filter;\n            this.filterAccommodations();\n        });\n        BaseServiceComponent.resetFilter(this.accommodationsFilter, filters$);\n    }\n\n    public mobOpenSort(): void {\n        const sort$: Subject<string> = new Subject<string>();\n        sort$.pipe(takeUntil(this.destroy$)).subscribe((sortKey: string) => {\n            this.sortAccommodations(sortKey);\n        });\n\n        this.openSortMob(this.sortByOptions, this.filterQueryParams.sort_by, sort$);\n    }\n\n    //paginationFinishedCB when set, called at end of pagination\n    private paginate(increment?: number, paginationFinishedCB?: () => void): void {\n        const inc = increment ? increment : this.accommodationListMetadata.increment;\n\n        const params = {\n            start: this.start,\n            limit: inc,\n            sortBy: this.filterQueryParams.sort_by,\n            cache_buster: 1,\n            section: this.section,\n        };\n\n        if (this.isListCompleted || this.isLastRequestTheSame(params)) {\n            if (paginationFinishedCB) {\n                paginationFinishedCB();\n            }\n            return;\n        }\n        this.lastRequestParams = params;\n\n        if (!this.isNextPage(inc, paginationFinishedCB)) {\n            return;\n        }\n\n        this.accommodationsDataService.paginate(this.serviceId, params).subscribe(\n            (accommodations: AccommodationListItem[]) => {\n                console.log('got pagination response');\n                this.handleAccommodationsPaginateResponse(accommodations, inc, paginationFinishedCB);\n            },\n            (error) => () => {}\n        );\n    }\n\n    private callScroller(self: any, searchedHotel: IHotelNames, maxIteration: number = 0) {\n        if (maxIteration > 10) {\n            return;\n        }\n        const el = document.getElementById(searchedHotel.giataId);\n        if (el) {\n            console.log('scrolling to giata id:' + searchedHotel.giataId);\n            el.scrollIntoView({ block: 'center', behavior: 'smooth' });\n        } else {\n            console.log('element not found with giata id:' + searchedHotel.giataId);\n            setTimeout(() => {\n                //check if during waiting we did not get our element\n                const elem = document.getElementById(searchedHotel.giataId);\n                if (!elem) {\n                    //scroll again to trigger display of searched element\n                    const prevScroll = self.scrollToIndex;\n                    //50 in city height, 44 nearby\n                    self.scrollToIndex = searchedHotel.idx * 320 - 50 + (searchedHotel.section === 2 ? 44 : 0);\n                    if (prevScroll === self.scrollToIndex) {\n                        self.scrollToIndex++;\n                    }\n                    maxIteration++;\n                }\n                self.callScroller(self, searchedHotel, maxIteration);\n            }, 500);\n        }\n    }\n\n    private resetPagination(): void {\n        this.section = 1;\n        this.start = 0;\n        this.isListCompleted = false;\n        this.nearestAccommodations = [];\n        this.scrollToIndex = 0;\n        this.accommodationsService.setAccommodationList([], '', 0, []);\n    }\n\n    private selectHotel(data: ISelectedHotel, mapHotel?: AccommodationListItem): void {\n        this.accommodationsService.setMapHotel(mapHotel);\n        this.accommodationsService.setAccommodationList(\n            this.accommodations,\n            data.giataId,\n            data.position,\n            this.hotelNames\n        );\n        this.accommodationsService.setNearestAccommodationList(this.nearestAccommodations, data.giataId, data.position);\n        this.accommodationsService.setMetadataOfTheAccommodation(this.start);\n        this.accommodationsService.setFilter(this.accommodationsFilter);\n    }\n\n    private loadAccommodationsData(checkConsistency: boolean): void {\n        this.checkResultsAvailable(this.serviceId);\n        if (\n            checkConsistency &&\n            this.accommodationsService.currentDataId !== '' &&\n            this.stateFrom === StateFrom.ACC_DETAILS &&\n            this.accommodationsService.hasAvailableData() &&\n            this.accommodationsService.currentDataId === this.searchDataService.getDataId(ServiceId.ACC)\n        ) {\n            this.restoreAccFromService();\n        } else {\n            this.resetPagination();\n            this.showSkeletonLoader(true);\n            const params = this.initSearchParams();\n            this.accommodationsDataService\n                .searchServiceData(this.serviceId, params, checkConsistency)\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(\n                    (accommodationsResponse: AccommodationsResponse) => {\n                        this.hideSkeletonLoader();\n                        this.handleAccommodationsDataResponse(accommodationsResponse);\n                        this.handleExtraParams();\n\n                        if (!accommodationsResponse.total && !this.filterCount(accommodationsResponse.ogs)) {\n                            this.accommodationsDataService.checkServiceFailedAndNotify(this.serviceId);\n                        }\n                        setTimeout(() => {\n                            console.log('set prerender ready');\n                            window.prerenderReady = true;\n                        }, 1500);\n                    },\n                    (error: any) => {}\n                );\n        }\n    }\n\n    private filterAccommodations(): void {\n        this.resetPagination();\n\n        this.showSkeletonLoader(true);\n        this.accommodationsDataService\n            .filterServiceData(this.serviceId, this.filterQueryParams, this.accommodationsFilter)\n            .pipe(\n                takeUntil(this.destroy$),\n                finalize(() => {\n                    this.hideSkeletonLoader(true);\n                })\n            )\n            .subscribe(\n                (accommodationsResponse: AccommodationsResponse) => {\n                    this.handleAccommodationsDataResponse(accommodationsResponse);\n                },\n                (error: any) => {}\n            );\n    }\n\n    private initSearchParams(): any {\n        const selected_id = this.cartService.getSelected(this.serviceId).selectedHotel.giataID;\n        return {\n            cache_buster: 0,\n            sort_by: this.filterQueryParams.sort_by,\n            refreshFilter: false,\n            loadFilter: true,\n            selected_id,\n        };\n    }\n\n    private handleAccommodationsDataResponse(accommodationsResponse: AccommodationsResponse) {\n        this.resultsCount$.next(accommodationsResponse.total);\n        this.resultsCount = accommodationsResponse.total;\n        this.accommodationsFilter = accommodationsResponse.ogs;\n        this.filterService.filterChange$.next(accommodationsResponse.ogs);\n        this.hotelNames = accommodationsResponse.hotelNames;\n        this.selectedFiltersCount = ResultsFiltersUtils.selectedFiltersCounter(this.accommodationsFilter);\n\n        for (const section of accommodationsResponse.accommodations) {\n            const hasRooms = section.data.some((acc) => !acc.noRoom);\n            if (section.data.length === 1 && !hasRooms) {\n                section.data = [];\n            }\n        }\n\n        this.setAccListMetadata(\n            AccommodationsUtilsService.getCount(true, accommodationsResponse.accommodations),\n            AccommodationsUtilsService.getCount(false, accommodationsResponse.accommodations),\n            accommodationsResponse.selectedHotelCode\n        );\n\n        let accommodations = accommodationsResponse.accommodations.find(\n            (accommodationsResponseSection: AccommodationsResponseSection) =>\n                accommodationsResponseSection.section === this.section\n        );\n        if (!accommodations && this.section < 2) {\n            this.section++;\n            accommodations = accommodationsResponse.accommodations.find(\n                (accommodationsResponseSection: AccommodationsResponseSection) =>\n                    accommodationsResponseSection.section === this.section\n            );\n        }\n        if (accommodations) {\n            this.accommodationRecommendedID = accommodationsResponse.bestValueHotel;\n            accommodations.data = this.handlingAccommodationsData(accommodations.data);\n            accommodations.data = this.filterAccommodationsData(accommodations.data);\n\n            if (this.section === 1) {\n                this.accommodations = accommodations.data;\n                const nearestAcc = accommodationsResponse.accommodations.find(\n                    (accommodationsResponseSection: AccommodationsResponseSection) =>\n                        accommodationsResponseSection.section === 2\n                );\n                if (nearestAcc) {\n                    this.nearestAccommodations = nearestAcc.data;\n                }\n            } else {\n                this.nearestAccommodations = accommodations.data;\n            }\n            this.start = accommodations.limit;\n        } else if (this.section === 2) {\n            this.accommodations = [];\n            this.nearestAccommodations = [];\n        } else {\n            this.onNextPage();\n        }\n    }\n\n    private filterAccommodationsData(accommodations: AccommodationListItem[]): AccommodationListItem[] {\n        const cartId = this.cartData?.items[0] ? this.cartData?.items[0].selectedItem.id : null;\n        if (cartId) {\n            return this.accommodationsDataService.filterDataRemoveCartItem<AccommodationListItem>(\n                accommodations,\n                cartId\n            );\n        }\n        return accommodations;\n    }\n\n    private nextIsSummary(): boolean {\n        const state = this.router.getCurrentNavigation()?.extras?.state;\n        const from = state ? state['from'] : '';\n        return from === StateFrom.SUMMARY || from === StateFrom.TAB;\n    }\n\n    private getCartServiceData() {\n        this.cartData = this.accommodationsDataService.getSelectedAccommodationsData();\n    }\n\n    private handleAccommodationsPaginateResponse(\n        accommodations: AccommodationListItem[],\n        increment: number,\n        paginationFinishedCB?: () => void\n    ): void {\n        if (this.section === 1) {\n            this.accommodations = [...this.accommodations, ...accommodations];\n        } else {\n            this.nearestAccommodations = [...this.nearestAccommodations, ...accommodations];\n        }\n\n        const accLength = accommodations.length;\n        if ((this.section === 1 && accLength < increment) || (this.section === 2 && accLength < increment)) {\n            if (this.section >= this.nearestAccommodationListMetadata.section) {\n                this.isListCompleted = true;\n            } else {\n                this.section++;\n                this.start = 0;\n                this.paginate(increment - accLength, paginationFinishedCB);\n                return;\n            }\n        } else {\n            if (this.section === 1) {\n                this.start += accLength;\n            }\n\n            if (this.section === 2) {\n                this.start += accLength;\n            }\n        }\n        if (paginationFinishedCB) {\n            paginationFinishedCB();\n        }\n    }\n\n    private setAccListMetadata(totalInCity: number, totalNearCity: number, selectedHotelCode: string): void {\n        this.accommodationListMetadata = {\n            ...this.accommodationListMetadata,\n            total: totalInCity,\n            selectedHotelCode,\n        };\n        this.nearestAccommodationListMetadata = {\n            ...this.nearestAccommodationListMetadata,\n            total: totalNearCity,\n            selectedHotelCode,\n        };\n        this.getDestinationNameOfTheCity();\n        this.accommodationsService.setAccommodationListMetadata(\n            this.accommodationListMetadata,\n            this.nearestAccommodationListMetadata\n        );\n    }\n\n    private getDestinationNameOfTheCity(): void {\n        const accSearchData = this.searchDataService.getSearchData(this.serviceId);\n        if (accSearchData && accSearchData.address) {\n            this.accommodationListMetadata.destinationName = accSearchData.address.cityName;\n            this.nearestAccommodationListMetadata.destinationName = accSearchData.address.cityName;\n        }\n    }\n\n    private handlingAccommodationsData(accommodations: AccommodationListItem[]): AccommodationListItem[] {\n        const cartData = this.cartData;\n        const cartAccID = cartData && cartData.items.length ? cartData.items[0].selectedItem.id : null;\n        return this.accommodationsDataService.handlingData<AccommodationListItem>(\n            accommodations,\n            this.accommodationRecommendedID,\n            cartAccID\n        );\n    }\n\n    private setSortingValue(): void {\n        const sort = SearchUtilsService.getSortingValue(ServiceId.ACC);\n        if (sort) {\n            this.filterQueryParams.sort_by = sort;\n        }\n    }\n\n    private isLastRequestTheSame(params: {\n        start: number;\n        limit: number;\n        section: number;\n        sortBy: string | undefined;\n    }): boolean {\n        const lastParams = this.lastRequestParams;\n        return (\n            lastParams.section === params.section &&\n            lastParams.start === params.start &&\n            lastParams.sortBy === params.sortBy\n        );\n    }\n\n    private isNextPage(increment: number, paginationFinishedCB?: () => void): boolean {\n        const accommodationTotal = this.accommodationListMetadata.total;\n        if (this.section === 1 && accommodationTotal && this.accommodations.length >= accommodationTotal) {\n            this.section++;\n            this.start = 0;\n            this.paginate(increment, paginationFinishedCB);\n            return false;\n        }\n\n        const nearestAccommodationTotal = this.nearestAccommodationListMetadata.total;\n        if (\n            this.section === 2 &&\n            nearestAccommodationTotal &&\n            this.nearestAccommodations.length >= nearestAccommodationTotal\n        ) {\n            this.isListCompleted = true;\n            return false;\n        }\n\n        return true;\n    }\n\n    private initializeComponent(): void {\n        this.filterQueryParams = {\n            sort_by: '1',\n        };\n        this.serviceTitle = this.formServiceTitle(ServiceId.ACC);\n        this.setSortingValue();\n\n        this.settingsService.selectedLanguageSubject.pipe(skip(1), takeUntil(this.destroy$)).subscribe(() => {\n            this.serviceTitle = this.formServiceTitle(ServiceId.ACC);\n            this.loadAccommodationsData(false);\n        });\n        this.currencyService.selectedCurrencySubject.pipe(skip(1), takeUntil(this.destroy$)).subscribe(() => {\n            this.filterQueryParams.refreshFilter = true;\n            this.loadAccommodationsData(false);\n        });\n        this.repriceListenerId = this.listenersService.registerListener(\n            ListenerId.LISTEN_REPRICED,\n            this.getCartServiceData,\n            this\n        );\n        this.loadAccommodationsData(true);\n\n        this.startPollerIfTheFullDataIsNotLoaded(this.serviceId, this.filterAccommodations.bind(this));\n    }\n\n    private restoreAccFromService(): void {\n        this.accommodations = this.accommodationsService.getAccommodationsList();\n        this.nearestAccommodations = this.accommodationsService.getNearestAccommodationsList();\n        const accMetadata = this.accommodationsService.getAccommodationListMetadata();\n        this.accommodationListMetadata = accMetadata ? accMetadata : this.accommodationListMetadata;\n        const nearestMetadata = this.accommodationsService.getNearestAccommodationListMetadata();\n        this.nearestAccommodationListMetadata = nearestMetadata\n            ? nearestMetadata\n            : this.nearestAccommodationListMetadata;\n        this.accommodationsFilter = this.accommodationsService.getFilter()\n            ? this.accommodationsService.getFilter()\n            : [];\n        this.start = this.accommodationsService.currentPage;\n        this.hideSkeletonLoader(true);\n        this.scrollToIndex = this.accommodationsService.currentItem;\n        this.accommodationListMetadata = this.accommodationsService.getAccommodationListMetadata();\n        this.nearestAccommodationListMetadata = this.accommodationsService.getNearestAccommodationListMetadata();\n        const mapHotel = this.accommodationsService.getMapHotel();\n        this.hotelNames = this.accommodationsService.getHotelNames();\n        if (mapHotel) {\n            this.showHotelsOnMap({ selectedHotel: mapHotel, position: 0 });\n        }\n    }\n\n    private handleExtraParams(): void {\n        const state = history.state;\n        if (state && state.extra) {\n            for (const extraAction in state.extra) {\n                if (state.extra.hasOwnProperty(extraAction)) {\n                    switch (extraAction) {\n                        case 'changeTickets':\n                            this.onChangeHotel();\n                            break;\n                    }\n                }\n            }\n        }\n    }\n}\n","<div class=\"tz-container accommodations-container flex\" [hidden]=\"noResultAvailable && !skeletonFilterLoading\">\n    <div *ngIf=\"(isMobile$ | async) === false\" class=\"tz-filter-container\">\n        <div class=\"show-map-btn\" (click)=\"showHotelsOnMap()\" *ngIf=\"!loaderService.skeletonLoading\">\n            <tz-icon icon=\"map-btn-marekr\"></tz-icon>\n            <div class=\"btn-label\" translate=\"GENERAL.SHOW_ON_MAP\"></div>\n        </div>\n        <tz-search-hotel-name\n            *ngIf=\"!loaderService.skeletonLoading\"\n            [hotelNames]=\"hotelNames\"\n            (search)=\"search($event)\"\n        >\n        </tz-search-hotel-name>\n        <ng-container *ngIf=\"loaderService.skeletonLoading\">\n            <div class=\"tz-skeleton-loader show-map-button-skeleton-container\">\n                <ngx-skeleton-loader\n                    [theme]=\"{\n                        height: '7.5rem'\n                    }\"\n                ></ngx-skeleton-loader>\n            </div>\n        </ng-container>\n        <tz-results-filters\n            [filter]=\"accommodationsFilter\"\n            [loading]=\"loaderService.skeletonLoading\"\n            (filterChanged)=\"onFilterChanged($event)\"\n        ></tz-results-filters>\n    </div>\n    <div class=\"accommodations-cart-list-container flex flex-column\">\n        <div *ngIf=\"platformService.isMobileDevice\">\n            <tz-mob-filter-navbar\n                [sortKey]=\"filterQueryParams.sort_by\"\n                [sortByOptions]=\"sortByOptions\"\n                [displayMap]=\"true\"\n                [isEnableClearFilter]=\"isEnableClearFilter\"\n                [filtersCount]=\"selectedFiltersCount\"\n                [skeletonLoading]=\"loaderService.skeletonLoading\"\n                (openFilter)=\"onOpenFilterModal()\"\n                (resetFilter)=\"onResetFilter()\"\n                (openSort)=\"mobOpenSort()\"\n                (showMap)=\"showHotelsOnMap()\"\n            ></tz-mob-filter-navbar>\n        </div>\n\n        <div *ngIf=\"!platformService.isMobileDevice\" class=\"result-top-info-block-item\">\n            <tz-results-top-info-block blockType=\"orange\" [loading]=\"loaderService.skeletonLoading\">\n                <div [innerHTML]=\"serviceTitle | safeHtml\"></div>\n            </tz-results-top-info-block>\n        </div>\n        <div *ngIf=\"!platformService.isMobileDevice\" class=\"price-range-container flex align-center\">\n            <div class=\"accommodation-filter-btn inline-flex\" *ngIf=\"isMobile$ | async\">\n                <tz-filter-btn\n                    [filterCount]=\"filterCount(accommodationsFilter)\"\n                    (clickFilter)=\"onOpenFilterPopup()\"\n                    (clearFilter)=\"onResetFilter()\"\n                ></tz-filter-btn>\n            </div>\n            <tz-price-range-filter\n                [sortType]=\"(isMobile$ | async) ? 'select' : 'buttonToggle'\"\n                [options]=\"sortByOptions\"\n                [sort]=\"filterQueryParams.sort_by ? filterQueryParams.sort_by : '1'\"\n                [skeletonLoading]=\"loaderService.skeletonLoading\"\n                (sortChange)=\"sortAccommodations($event)\"\n            ></tz-price-range-filter>\n            <div\n                class=\"show-map-btn accommodation-map-btn inline-flex\"\n                *ngIf=\"!loaderService.skeletonLoading && (isMobile$ | async)\"\n                (click)=\"showHotelsOnMap()\"\n            >\n                <tz-icon icon=\"map-btn-marekr\"></tz-icon>\n            </div>\n        </div>\n\n        <ng-container *ngIf=\"loaderService.skeletonLoading\">\n            <div\n                #accommodationsListSkeletonLoader\n                *ngIf=\"(platformService.isMobileDevice$ | async) === false\"\n                class=\"accommodations-list-skeleton-loader-container\"\n            >\n                <tz-acc-car-transfer-skeleton-loader></tz-acc-car-transfer-skeleton-loader>\n            </div>\n            <div #accommodationsListSkeletonLoader *ngIf=\"platformService.isMobileDevice$ | async\">\n                <tz-mob-accommodation-skeleton></tz-mob-accommodation-skeleton>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!loaderService.skeletonLoading\">\n            <div class=\"accommodations-cart-data\" *ngIf=\"cartData && cartData?.items?.length\">\n                <tz-selected-accommodations\n                    [serviceList]=\"true\"\n                    [accommodationCartData]=\"cartData\"\n                    (removedItem)=\"onRemoveSelectedAccommodation($event)\"\n                    (changeHotel)=\"onChangeHotel()\"\n                    (changeRooms)=\"onChangeRooms($event)\"\n                ></tz-selected-accommodations>\n            </div>\n\n            <div class=\"accommodations-list-container flex\" #accommodationsList>\n                <tz-accommodation-list\n                    [accommodations]=\"accommodations\"\n                    [nearestAccommodations]=\"nearestAccommodations\"\n                    [isMobile$]=\"isMobile$\"\n                    [isListCompleted]=\"isListCompleted\"\n                    [accommodationListMetadata]=\"accommodationListMetadata\"\n                    [nearestAccommodationListMetadata]=\"nearestAccommodationListMetadata\"\n                    (cancelSelection)=\"onCancelSelection()\"\n                    (nextPage)=\"onNextPage()\"\n                    [scrollToElement]=\"scrollToIndex\"\n                    (selectHotel)=\"onSelectHotel($event)\"\n                    (openAccommodationInMap)=\"showHotelsOnMap($event)\"\n                >\n                </tz-accommodation-list>\n            </div>\n        </ng-container>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectComponent, NgSelectModule } from '@ng-select/ng-select';\nimport { AccommodationsRoutingModule } from './accommodations-routing.module';\nimport { AccommodationsComponent } from './accommodations.component';\nimport { AccommodationListComponent } from './components/accommodation-list/accommodation-list.component';\nimport { SharedModule } from '@shared/shared.module';\n\n// eslint-disable-next-line max-len\nimport { AccommodationListResultInformationComponent } from './components/accommodation-list-result-information/accommodation-list-result-information.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ResultsCartItemSelectionModule } from '../results-cart-item-selection.module';\nimport { VirtualScrollerModule } from 'ngx-virtual-scroller';\n// eslint-disable-next-line max-len\nimport { AccommodationListUiItemComponent } from './components/accommodation-list-ui-item/accommodation-list-ui-item.component';\nimport { ResultsFiltersModule } from '../results-filters/results-filters.module';\nimport { TzMapModule } from '../../map/map.module';\n// eslint-disable-next-line max-len\nimport { MobSelectedAccommodationDetailsComponent } from './components/mob-selected-accommodation-details/mob-selected-accommodation-details.component';\nimport { AccommodationModule } from '../accommodation/accommodation.module';\n// eslint-disable-next-line max-len\nimport { MobAccommodationAdvantagesDisadvantagesComponent } from './components/mob-accommodation-advantages-disadvantages/mob-accommodation-advantages-disadvantages.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationSelectedRoomDetailsComponent } from './components/mob-accommodation-selected-room-details/mob-accommodation-selected-room-details.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationSelectedRoomOfferComponent } from './components/mob-accommodation-selected-room-offer/mob-accommodation-selected-room-offer.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationSelectedRoomListComponent } from './components/mob-accommodation-selected-room-list/mob-accommodation-selected-room-list.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationDetailsRoomOfferComponent } from '../accommodation/components/mob-accommodation-details-room-offer/mob-accommodation-details-room-offer.component';\nimport { MobAccommodationSkeletonComponent } from './components/mob-accommodation-skeleton/mob-accommodation-skeleton.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationRoomsListModalComponent } from './components/mob-accommodation-rooms-list-modal/mob-accommodation-rooms-list-modal.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationDetailsRoomMainInfoComponent } from '../accommodation/components/mob-accommodation-details-room-main-info/mob-accommodation-details-room-main-info.component';\n// eslint-disable-next-line max-len\nimport { MobAccommodationSelectOptionButtonComponent } from './components/mob-accommodation-select-option-button/mob-accommodation-select-option-button.component';\nimport { ResultsSummaryModule } from '../results-summary/results-summary.module';\nimport { MobConfirmButtonBlockComponent } from './components/mob-confirm-button-block/mob-confirm-button-block.component';\n\n@NgModule({\n    declarations: [\n        AccommodationsComponent,\n        AccommodationListComponent,\n        AccommodationListUiItemComponent,\n        AccommodationListResultInformationComponent,\n        MobSelectedAccommodationDetailsComponent,\n        MobAccommodationAdvantagesDisadvantagesComponent,\n        MobAccommodationSelectedRoomDetailsComponent,\n        MobAccommodationSelectedRoomOfferComponent,\n        MobAccommodationSelectedRoomListComponent,\n        MobAccommodationDetailsRoomOfferComponent,\n        MobAccommodationSkeletonComponent,\n        MobAccommodationRoomsListModalComponent,\n        MobAccommodationDetailsRoomMainInfoComponent,\n        MobAccommodationSelectOptionButtonComponent,\n        MobConfirmButtonBlockComponent,\n    ],\n    imports: [\n        SharedModule,\n        CommonModule,\n        AccommodationsRoutingModule,\n        FormsModule,\n        NgSelectModule,\n        InfiniteScrollModule,\n        ResultsCartItemSelectionModule,\n        VirtualScrollerModule,\n        ResultsFiltersModule,\n        TzMapModule,\n        AccommodationModule,\n        ResultsSummaryModule,\n    ],\n    exports: [NgSelectComponent],\n})\nexport class AccommodationsModule {}\n","import { SortByValueOption } from '@schemas/modules/core/sort-by-value.option';\n\nexport const AccommodationsSort: SortByValueOption[] = [\n    {\n        sort: '1',\n        label: 'GENERAL.SORT.BEST_VALUE',\n    },\n    {\n        sort: '2',\n        label: 'FILTER.ACC.LOWEST_PRICE',\n    },\n    {\n        sort: '7',\n        label: 'FILTER.ACC.DISTANCE',\n    },\n    {\n        sort: '8',\n        label: 'FILTER.ACC.REVIEWS_SCORE',\n    },\n    {\n        sort: '4',\n        label: 'FILTER.ACC.STAR_RATING',\n    },\n];\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { AccommodationListItem } from '@schemas/modules/accommodations/accommodation.model';\nimport { PlatformService } from '@services/platform.service';\n\n@Component({\n    selector: 'tz-accommodation-list-result-information',\n    templateUrl: './accommodation-list-result-information.component.html',\n    styleUrls: ['./accommodation-list-result-information.component.scss'],\n})\nexport class AccommodationListResultInformationComponent implements OnInit, OnChanges {\n    @Input() selectedAccommodation: AccommodationListItem | undefined | null;\n    @Input() count: number | undefined = 0;\n    @Input() nearest = false;\n    @Input() destinationCity: string | undefined = '';\n    @Output() cancelSelection: EventEmitter<void> = new EventEmitter();\n    public selectedAccommodationSummary: string | null = null;\n\n    constructor(public platformService: PlatformService) {}\n\n    ngOnInit() {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['selectedAccommodation'] && changes['selectedAccommodation'].currentValue) {\n            const accommodation: AccommodationListItem = changes['selectedAccommodation'].currentValue;\n            this.selectedAccommodationSummary = accommodation.name;\n        }\n    }\n\n    public onCancelSelection() {\n        this.cancelSelection.emit();\n    }\n}\n","<div class=\"results-title\" *ngIf=\"selectedAccommodation\">\n    <tz-block-separator>\n        {{ selectedAccommodationSummary }}\n    </tz-block-separator>\n</div>\n<div class=\"flight-list-item\" *ngIf=\"selectedAccommodation\">\n    <tz-accommodation-list-item [accommodation]=\"selectedAccommodation\"> </tz-accommodation-list-item>\n</div>\n<div\n    *ngIf=\"!selectedAccommodation && !nearest && count\"\n    class=\"tz-block-separator-title\"\n    [class.no-bottom-margin]=\"!platformService.isMobileDevice\"\n>\n    <tz-block-separator>\n        {{\n            (count > 1 ? 'HOTELS.Properties_found' : 'HOTELS.Property_found')\n                | translate: { resultsCount: count, tripType: '' }\n        }}\n        {{ destinationCity ? ('HOTELS.FOUND_IN' | translate: { place: destinationCity }) : '' }}\n    </tz-block-separator>\n</div>\n<div *ngIf=\"!selectedAccommodation && nearest && count\" class=\"tz-block-separator-title no-bottom-margin\">\n    <tz-block-separator>\n        {{\n            (count > 1 ? 'HOTELS.Properties_found' : 'HOTELS.Property_found')\n                | translate: { resultsCount: count, tripType: '' }\n        }}\n        {{ 'HOTELS.FOUND_NEAR' | translate: { place: destinationCity } }}\n    </tz-block-separator>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AccommodationListItem } from '@schemas/modules/accommodations/accommodation.model';\nimport { AccommodationListMetadata } from '@schemas/modules/accommodations/accommodation-list-metadata';\nimport { PlatformService } from '@services/platform.service';\nimport { AccommodationRecOffersLoggedIn } from '@schemas/modules/accommodations/accommodation-rec-offers-logged-in.model';\nimport { UserService } from '@services/modules/user/services/user.service';\n\n@Component({\n    selector: 'tz-accommodation-list-ui-item',\n    templateUrl: './accommodation-list-ui-item.component.html',\n    styleUrls: ['./accommodation-list-ui-item.component.scss'],\n})\nexport class AccommodationListUiItemComponent implements OnInit {\n    @Input() type: 'locationLabel' | 'acc' = 'acc';\n    @Input() data: any | undefined;\n    @Output() selectHotel: EventEmitter<void> = new EventEmitter();\n    @Output() openAccommodationInMap: EventEmitter<AccommodationListItem> = new EventEmitter<AccommodationListItem>();\n\n    public isAcc = true;\n    public acc: AccommodationListItem | undefined;\n    public accMetadata: AccommodationListMetadata | undefined;\n\n    constructor(public platformService: PlatformService, private userService: UserService) {}\n\n    ngOnInit() {\n        this.isAcc = this.type === 'acc';\n        if (this.isAcc) {\n            this.acc = this.data;\n        } else {\n            this.accMetadata = this.data;\n        }\n    }\n\n    public getCheapestOffer(): AccommodationRecOffersLoggedIn {\n        if (!this.isAcc) {\n            return {} as AccommodationRecOffersLoggedIn;\n        }\n        if (this.userService.IsLogged() && this.acc && this.acc.recOffersLoggedIn) {\n            return this.acc.recOffersLoggedIn;\n        }\n\n        return {\n            cheapestPrice: this.acc?.cheapestPrice,\n            taxInfo: this.acc?.taxInfo,\n            roomType: this.acc?.roomType,\n            breakFastType: this.acc?.breakFastType,\n            breakFastTypeCode: this.acc?.breakFastTypeCode,\n            payAt: this.acc?.payAt,\n            cpType: this.acc?.cpType,\n            roomsLeft: this.acc?.roomsLeft,\n            numberOfRooms: this.acc?.numberOfRooms,\n        } as AccommodationRecOffersLoggedIn;\n    }\n\n    public onSelectHotel(): void {\n        this.selectHotel.emit();\n    }\n}\n","<ng-container *ngIf=\"type === 'acc'; else locationLabel\">\n    <div class=\"accommodation-list-item\">\n        <tz-accommodation-list-item\n            *ngIf=\"(platformService.isMobileDevice$ | async) === false\"\n            [accommodation]=\"data\"\n            [cheapest]=\"getCheapestOffer()\"\n            [serviceList]=\"true\"\n            (selectHotel)=\"onSelectHotel()\"\n            (openAccommodationInMap)=\"openAccommodationInMap.emit($event)\"\n        ></tz-accommodation-list-item>\n\n        <tz-mob-accommodations-list-item\n            *ngIf=\"platformService.isMobileDevice$ | async\"\n            [accommodation]=\"data\"\n            [cheapest]=\"getCheapestOffer()\"\n            (selectHotel)=\"onSelectHotel()\"\n        ></tz-mob-accommodations-list-item>\n    </div>\n</ng-container>\n<ng-template #locationLabel>\n    <div class=\"accommodation-result-information-container\">\n        <tz-accommodation-list-result-information\n            [nearest]=\"true\"\n            [count]=\"accMetadata?.total\"\n            [destinationCity]=\"accMetadata?.destinationName\"\n        >\n        </tz-accommodation-list-result-information>\n    </div>\n</ng-template>\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { AccommodationListItem } from '@schemas/modules/accommodations/accommodation.model';\nimport { AccommodationListMetadata } from '@schemas/modules/accommodations/accommodation-list-metadata';\nimport { ServiceListComponent } from '@core/components/paginate.component.ts/service.list.component';\nimport { IInfiniteScrollEvent } from 'ngx-infinite-scroll';\nimport { VirtualScrollerComponent } from 'ngx-virtual-scroller';\nimport { window } from 'ngx-bootstrap/utils';\nimport { AccommodationUiListItem } from '@schemas/modules/accommodations/accommodation-ui-list-item';\nimport { PlatformService } from '@services/platform.service';\nimport { ISelectedHotel } from '../../accommodations.component';\n\n@Component({\n    selector: 'tz-accommodation-list',\n    templateUrl: './accommodation-list.component.html',\n    styleUrls: ['./accommodation-list.component.scss'],\n})\nexport class AccommodationListComponent extends ServiceListComponent implements OnInit, AfterViewInit, OnChanges {\n    @ViewChild('accommodationsScroller', { static: false }) virtualScroller: VirtualScrollerComponent | undefined =\n        undefined;\n    @ViewChild('accommodationsListContainer', { static: false }) listContainer: ElementRef | undefined = undefined;\n    @Input() accommodations: AccommodationListItem[] = [];\n    @Input() nearestAccommodations: AccommodationListItem[] = [];\n    @Input() isMobile$?: BehaviorSubject<boolean>;\n    @Input() scrollToElement = 0;\n    @Input() accommodationListMetadata: AccommodationListMetadata = {\n        increment: 80,\n        section: 1,\n        total: 0,\n    };\n    @Input() nearestAccommodationListMetadata: AccommodationListMetadata = {\n        increment: 80,\n        section: 2,\n        total: 0,\n    };\n    @Input() isListCompleted = false;\n    @Output() nextPage: EventEmitter<void> = new EventEmitter<void>();\n    @Output() cancelSelection: EventEmitter<void> = new EventEmitter<void>();\n    @Output() selectHotel: EventEmitter<ISelectedHotel> = new EventEmitter<ISelectedHotel>();\n    @Output() openAccommodationInMap: EventEmitter<{ selectedHotel: AccommodationListItem; position: number }> =\n        new EventEmitter<{ selectedHotel: AccommodationListItem; position: number }>();\n\n    public selectedAccommodation: AccommodationListItem | undefined | null;\n    public accommodationListUi: AccommodationUiListItem[] = [];\n\n    constructor(private renderer: Renderer2, public platformService: PlatformService) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['accommodations'] || changes['nearestAccommodations']) {\n            this.handleAccChanges();\n        }\n        if (changes['scrollToElement'] || changes['scrollToElement']) {\n            this.scrollToTheSelectedAccElement();\n        }\n    }\n\n    public ngOnInit(): void {}\n\n    public onCancelSelection(): void {\n        this.cancelSelection.emit();\n        this.selectedAccommodation = null;\n    }\n\n    public onScroll($event: IInfiniteScrollEvent): void {\n        if (!this.isListCompleted) {\n            this.nextPage.emit();\n        }\n    }\n\n    public onSelectHotel(data: ISelectedHotel): void {\n        if (this.virtualScroller) {\n            this.selectHotel.emit({\n                giataId: data.giataId,\n                hotelName: data.hotelName,\n                position: this.virtualScroller?.viewPortInfo.scrollStartPosition,\n            });\n        }\n    }\n\n    public onOpenAccommodationInMap(accommodation: AccommodationListItem): void {\n        if (this.virtualScroller) {\n            this.openAccommodationInMap.emit({\n                selectedHotel: accommodation,\n                position: this.virtualScroller?.viewPortInfo.scrollStartPosition,\n            });\n        }\n    }\n\n    public identify(index: number, item: AccommodationUiListItem): string {\n        return item.id ? item.id : '';\n    }\n\n    ngAfterViewInit() {\n        this.setScrollingContainer();\n        this.scrollToTheSelectedAccElement();\n    }\n\n    public handleScrollOnContainer(double = true): void {\n        requestAnimationFrame(() => {\n            if (this.virtualScroller) {\n                let height = '';\n\n                const heightValue =\n                    this.virtualScroller?.viewPortInfo.maxScrollPosition +\n                    this.virtualScroller?.viewPortInfo.scrollEndPosition -\n                    this.virtualScroller?.viewPortInfo.scrollStartPosition;\n\n                if (!this.platformService.isMobileDevice) {\n                    height = heightValue + 24 + 24 + 'px';\n                } else {\n                    height = heightValue + 24 + 'px';\n                }\n\n                if (this.accommodationListUi.length <= 1 && this.platformService.isMobileDevice) {\n                    height = 'auto';\n                }\n\n                this.renderer.setStyle(this.listContainer?.nativeElement, 'height', height);\n\n                if (double) {\n                    this.handleScrollOnContainer(false);\n                }\n            }\n        });\n    }\n\n    public setScrollingContainer(): void {\n        const element = this.renderer.selectRootElement('.wrapper', true);\n        this.scrollingContainer = element ? element : window;\n    }\n\n    private handleAccChanges(): void {\n        this.accommodationListUi = [];\n        if (this.accommodations.length) {\n            const uiList: AccommodationUiListItem[] = this.accommodations.map((acc: AccommodationListItem) => ({\n                type: 'acc',\n                data: acc,\n                id: acc.giataID,\n            }));\n            this.accommodationListUi.push(...uiList);\n        }\n        if (this.nearestAccommodations.length) {\n            this.accommodationListUi.push({\n                type: 'locationLabel',\n                data: this.nearestAccommodationListMetadata,\n            });\n            const uiList: AccommodationUiListItem[] = this.nearestAccommodations.map((acc: AccommodationListItem) => ({\n                type: 'acc',\n                data: acc,\n                id: acc.giataID,\n            }));\n            this.accommodationListUi.push(...uiList);\n        }\n    }\n\n    private scrollToTheSelectedAccElement(): void {\n        if (this.scrollToElement) {\n            requestAnimationFrame(() => {\n                requestAnimationFrame(() => {\n                    this.virtualScroller?.scrollToPosition(this.scrollToElement, 0);\n                });\n            });\n        }\n    }\n}\n","<div class=\"accommodations\">\n    <div class=\"searched-accommodations\" #accommodationsListContainer *ngIf=\"accommodationListUi.length\">\n        <div class=\"accommodation-result-information-container\" *ngIf=\"accommodations.length\">\n            <tz-accommodation-list-result-information\n                [selectedAccommodation]=\"selectedAccommodation\"\n                (cancelSelection)=\"onCancelSelection()\"\n                [count]=\"accommodationListMetadata.total\"\n                [destinationCity]=\"accommodationListMetadata.destinationName\"\n            ></tz-accommodation-list-result-information>\n        </div>\n        <div\n            class=\"accommodations-list\"\n            infiniteScroll\n            [scrollWindow]=\"this.infiniteScrollConfig.scrollWindow\"\n            [infiniteScrollDistance]=\"this.infiniteScrollConfig.infiniteScrollDistance\"\n            [infiniteScrollThrottle]=\"this.infiniteScrollConfig.infiniteScrollThrottle\"\n            (scrolled)=\"onScroll($event)\"\n            [fromRoot]=\"this.infiniteScrollConfig.fromRoot\"\n            [infiniteScrollContainer]=\"this.infiniteScrollConfig.infiniteScrollContainer\"\n        >\n            <virtual-scroller\n                #accommodationsScroller\n                [items]=\"accommodationListUi\"\n                [parentScroll]=\"scrollingContainer\"\n                [enableUnequalChildrenSizes]=\"true\"\n                (vsChange)=\"handleScrollOnContainer()\"\n                (vsEnd)=\"handleScrollOnContainer()\"\n            >\n                <div\n                    class=\"accommodation-list-item\"\n                    *ngFor=\"let accommodation of accommodationsScroller.viewPortItems; trackBy: identify; index as i\"\n                >\n                    <tz-accommodation-list-ui-item\n                        id=\"{{ accommodation.data.giataID }}\"\n                        [data]=\"accommodation.data\"\n                        [type]=\"accommodation.type\"\n                        (selectHotel)=\"\n                            onSelectHotel({\n                                giataId: accommodation.data.giataID,\n                                hotelName: accommodation.data.name,\n                                position: -1\n                            })\n                        \"\n                        (openAccommodationInMap)=\"onOpenAccommodationInMap($event)\"\n                    ></tz-accommodation-list-ui-item>\n                </div>\n            </virtual-scroller>\n        </div>\n    </div>\n    <!--    <div class=\"searched-accommodations\" #accommodationsListContainer *ngIf=\"accommodations.length\">\n          <div\n              class=\"accommodations-list\"\n\n          >\n\n            <virtual-scroller #accommodationsScroller [items]=\"accommodations\" [parentScroll]=\"scrollingContainer\" [enableUnequalChildrenSizes]=\"true\" (vsChange)=\"handleScrollOnContainer($event)\">\n              <div class=\"accommodation-list-item\" *ngFor=\"let accommodation of accommodationsScroller.viewPortItems; trackBy:identify; index as i\">\n                <tz-accommodation-list-item\n                  [accommodation]=\"accommodation\"\n                  (selectHotel)=\"onSelectHotel(accommodation.giataID)\"\n                ></tz-accommodation-list-item>\n              </div>\n            </virtual-scroller>\n              &lt;!&ndash;<div class=\"accommodation-list-item\" *ngFor=\"let accommodation of accommodations; index as i\">\n                  <tz-accommodation-list-item\n                      [accommodation]=\"accommodation\"\n                      (selectHotel)=\"onSelectHotel(accommodation.giataID)\"\n                  ></tz-accommodation-list-item>\n              </div>&ndash;&gt;\n          </div>\n      </div>\n      <div class=\"nearest-accommodations\" #nearestAccommodationsListContainer *ngIf=\"this.nearestAccommodations.length\">\n          <div class=\"accommodation-result-information-container\">\n              <tz-accommodation-list-result-information\n                  [nearest]=\"true\"\n                  [count]=\"nearestAccommodationListMetadata.total\"\n                  [destinationCity]=\"nearestAccommodationListMetadata.destinationName\"\n              ></tz-accommodation-list-result-information>\n          </div>\n          <div\n              class=\"accommodations-list\"\n              *ngIf=\"!selectedAccommodation\"\n              infiniteScroll\n              [scrollWindow]=\"this.infiniteScrollConfig.scrollWindow\"\n              [infiniteScrollDistance]=\"this.infiniteScrollConfig.infiniteScrollDistance\"\n              [infiniteScrollThrottle]=\"this.infiniteScrollConfig.infiniteScrollThrottle\"\n              (scrolled)=\"onScroll($event)\"\n              [fromRoot]=\"this.infiniteScrollConfig.fromRoot\"\n              [infiniteScrollContainer]=\"this.infiniteScrollConfig.infiniteScrollContainer\"\n          >\n            <virtual-scroller #nearestAccommodationsScroller [items]=\"accommodations\" [parentScroll]=\"scrollingContainer\" [enableUnequalChildrenSizes]=\"true\" (vsChange)=\"handleNearestAccScrollOnContainer($event)\">\n              <div\n                class=\"accommodation-list-item\"\n                *ngFor=\"let accommodation of nearestAccommodations; trackBy: identify; index as i\"\n              >\n                <tz-accommodation-list-item\n                  [accommodation]=\"accommodation\"\n                  (selectHotel)=\"onSelectHotel(accommodation.giataID)\"\n                >\n                </tz-accommodation-list-item>\n              </div>\n            </virtual-scroller>\n          </div>\n      </div>-->\n\n    <div class=\"accommodations-submission flex\" *ngIf=\"selectedAccommodation\">\n        <div class=\"buttons-container flex\">\n            <button class=\"btn select-btn\" (click)=\"onCancelSelection()\">{{ 'CancelSelection' | translate }}</button>\n            <button class=\"btn select-btn selected\">{{ 'GENERAL.CONFIRM_CONTINUE' | translate }}</button>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Accommodation } from '@schemas/modules/accommodations/accommodation';\nimport { ICartItem } from '@schemas/modules/cart/cart-item';\nimport { Subject } from 'rxjs';\nimport { Room, RoomPrice } from '@schemas/modules/accommodations/room';\nimport { ICartSelectedItemBookingOption } from '@schemas/modules/cart/cart-selected-item-booking-option';\nimport { CartService } from '@services/modules/cart/services/cart.service';\nimport { ServiceId } from '@core/constants/service-id.const';\nimport { UserService } from '@services/modules/user/services/user.service';\nimport { RoomOption } from '@schemas/modules/accommodations/room-option';\nimport { AccommodationsUtilsService } from '@services/modules/accommodations/utils/accommodations.utils';\nimport { ICartSelectedItem } from '@schemas/modules/cart/cart-selected-item';\nimport { AccommodationsService } from '@services/modules/accommodations/services/accommodations.service';\nimport { CartUtils } from '@services/modules/cart/utils/cart.utils';\nimport { AccommodationListMetadata } from '@schemas/modules/accommodations/accommodation-list-metadata';\nimport { AccommodationDetailsUtilService } from '../../../accommodation-details-util.service';\nimport { ServiceIdToName } from '@core/constants/service-ids-name.const';\n\n@Component({\n    selector: 'tz-mob-accommodation-rooms-list-modal',\n    templateUrl: './mob-accommodation-rooms-list-modal.component.html',\n    styleUrls: ['./mob-accommodation-rooms-list-modal.component.scss'],\n})\nexport class MobAccommodationRoomsListModalComponent implements OnInit {\n    public accommodation!: Accommodation;\n    public accommodationListMetadata?: AccommodationListMetadata;\n    public selectedHotel!: ICartItem;\n    public isUserLogged!: boolean;\n    public readonly maxRoomQuantity = 4;\n    public roomsLeftForSelection = this.maxRoomQuantity;\n    public fromHotelsMap = false;\n    public roomsQuantity = 0;\n    public totalPrice = 0;\n    public data!: {\n        accommodation: Accommodation;\n        selectedRooms: { rooms: Room[]; options: { [key: number]: ICartSelectedItemBookingOption[] } };\n        selectedCartItem: ICartSelectedItem;\n        openTermsModal$: Subject<RoomOption>;\n    };\n\n    private bookingOptions: ICartSelectedItemBookingOption[] = [];\n    private hasBooked = false;\n    private servicePrices: RoomPrice[] = [];\n\n    constructor(\n        private accommodationsService: AccommodationsService,\n        private userService: UserService,\n        private cartService: CartService,\n        private accommodationDetailsUtilService: AccommodationDetailsUtilService\n    ) {}\n\n    public ngOnInit(): void {\n        this.initData();\n    }\n\n    public getRoomPrice(roomPrice: RoomPrice): void {\n        this.totalPrice = this.accommodationDetailsUtilService.getRoomPrice(roomPrice, this.servicePrices);\n    }\n\n    public roomCountChanged(): void {\n        this.roomsQuantity = AccommodationsUtilsService.getSelectedRoomQuantity(this.data.accommodation.rooms);\n        this.roomsLeftForSelection = this.maxRoomQuantity - this.roomsQuantity;\n    }\n\n    public onBooking(): void {\n        this.accommodationDetailsUtilService.addAccommodationItemToCart(this.accommodation);\n    }\n\n    public openTermsModal(roomOption: RoomOption) {\n        this.accommodationDetailsUtilService.openTermsModal(roomOption);\n    }\n\n    private initData(): void {\n        this.accommodationListMetadata = this.accommodationsService.getAccommodationListMetadata();\n        this.accommodation = this.data.accommodation;\n        this.selectedHotel = this.cartService\n            .getCartData(ServiceId.ACC)\n            .items.find((service: ICartItem) => service.dataType === ServiceIdToName[ServiceId.ACC]);\n        this.isUserLogged = this.userService.IsLogged();\n        this.accommodationsService.updateAccInfoToList(this.accommodation);\n        const mapHotel = this.accommodationsService.getMapHotel();\n        this.fromHotelsMap = mapHotel !== undefined;\n        this.accommodationDetailsUtilService.checkRoomsSold(this.accommodation);\n        this.hasBooked = CartUtils.hasBooked(this.bookingOptions);\n    }\n}\n","<div class=\"wrapper\">\n    <tz-mob-accommodation-selected-room-list\n        [accommodation]=\"accommodation\"\n        [selectedRoomsData]=\"data.selectedRooms\"\n        [selectedItem]=\"selectedHotel.selectedItem\"\n    ></tz-mob-accommodation-selected-room-list>\n\n    <tz-block-separator>\n        <span *ngIf=\"accommodationListMetadata!.total\">\n            {{\n                (accommodationListMetadata!.total > 1 ? 'HOTELS.Properties_found' : 'HOTELS.Property_found')\n                    | translate: { resultsCount: accommodationListMetadata!.total, tripType: '' }\n            }}\n            {{\n                accommodationListMetadata?.destinationName\n                    ? ('HOTELS.FOUND_IN' | translate: { place: accommodationListMetadata?.destinationName })\n                    : ''\n            }}\n        </span>\n    </tz-block-separator>\n\n    <div class=\"room-details-container-wrapper\" [ngClass]=\"{ 'accommodations-rooms--selected-pb': roomsQuantity }\">\n        <div class=\"room-details-container\" *ngFor=\"let room of accommodation.rooms; let i = index\" [id]=\"room.id\">\n            <tz-mob-accommodation-details-room-main-info [room]=\"room\"></tz-mob-accommodation-details-room-main-info>\n\n            <div class=\"room-detail-item-container\">\n                <div class=\"room-detail-item\" *ngFor=\"let roomOffer of room.roomOffers; let i = index\">\n                    <div class=\"divider\"></div>\n\n                    <tz-mob-accommodation-details-room-offer\n                        (openTermsModal)=\"openTermsModal(roomOffer)\"\n                        [roomOffer]=\"roomOffer\"\n                        [stayNumber]=\"accommodation.numberOfNights\"\n                    ></tz-mob-accommodation-details-room-offer>\n\n                    <div class=\"select-option-button-wrapper\">\n                        <tz-mob-accommodation-select-option-button\n                            [roomOption]=\"roomOffer\"\n                            [roomPrice]=\"room.roomOffers[i].prices\"\n                            [isUserLogged]=\"isUserLogged\"\n                            [stayNumber]=\"accommodation.numberOfNights\"\n                            [maxRoomSelectionNumber]=\"roomsLeftForSelection\"\n                            (roomCountChanged)=\"roomCountChanged()\"\n                            (getRoomPrice)=\"getRoomPrice($event)\"\n                        ></tz-mob-accommodation-select-option-button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<tz-mob-confirm-button-block\n    *ngIf=\"roomsQuantity\"\n    [roomsQuantity]=\"roomsQuantity\"\n    [totalPrice]=\"totalPrice\"\n    (confirm)=\"onBooking()\"\n></tz-mob-confirm-button-block>\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { RoomOption } from '@schemas/modules/accommodations/room-option';\nimport { ServicePrices } from '@schemas/modules/core/service-prices';\nimport { ModalService } from '@services/modal.service';\nimport { AccommodationsUtilsService } from '@services/modules/accommodations/utils/accommodations.utils';\nimport { MobPickerWheels } from '@schemas/modules/picker/mob-picker';\n\n@Component({\n    selector: 'tz-mob-accommodation-select-option-button',\n    templateUrl: './mob-accommodation-select-option-button.component.html',\n    styleUrls: ['./mob-accommodation-select-option-button.component.scss'],\n})\nexport class MobAccommodationSelectOptionButtonComponent implements OnInit, OnChanges {\n    @Input() roomOption!: RoomOption;\n    @Input() roomPrice!: ServicePrices;\n    @Input() stayNumber!: number;\n    @Input() isUserLogged!: boolean;\n    @Input() maxRoomSelectionNumber = 0;\n    @Output() roomCountChanged: EventEmitter<void> = new EventEmitter<void>();\n    @Output() getRoomPrice: EventEmitter<{ price: number; id: string }> = new EventEmitter<{\n        price: number;\n        id: string;\n    }>();\n\n    public maxValue = 0;\n\n    constructor(private modalService: ModalService) {}\n\n    get checkShowTerms(): boolean {\n        return AccommodationsUtilsService.checkShowTerms(this.roomOption, this.isUserLogged);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes['maxRoomSelectionNumber'] &&\n            (changes['maxRoomSelectionNumber'] || changes['maxRoomSelectionNumber'] === 0)\n        ) {\n            const personCount = this.roomOption.personCount;\n            const roomsLeft = this.roomOption.roomsLeft;\n            this.maxValue = AccommodationsUtilsService.getMaxRoomSelectionNumber(\n                { personCount, roomsLeft },\n                this.maxRoomSelectionNumber\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        this.updateMaxValue();\n    }\n\n    public selectRoomOffer(): void {\n        this.updateMaxValue();\n\n        if (this.roomOption.roomsLeft === 1 && this.roomOption.personCount === 1) {\n            this.roomOption.personCount = 0;\n            this.roomCountChanged.emit();\n            this.getRoomPrice.emit({ price: this.roomPrice.listPrice, id: this.roomOption.id });\n            return;\n        }\n\n        if (this.roomOption.personCount > 0) {\n            this.openRoomPicker(this.maxValue);\n            return;\n        }\n\n        if (this.maxValue > 0) {\n            if (this.roomOption.personCount === 0) {\n                this.roomOption.personCount = 1;\n                this.roomCountChanged.emit();\n                this.getRoomPrice.emit({ price: this.roomPrice.listPrice, id: this.roomOption.id });\n            }\n        }\n    }\n\n    private openRoomPicker(maxRoomSelectionNumber: number) {\n        if (this.roomOption.roomsLeft > this.maxValue) {\n            maxRoomSelectionNumber = maxRoomSelectionNumber + this.roomOption.personCount;\n        }\n\n        const wheels: MobPickerWheels[] = [];\n\n        for (let i = maxRoomSelectionNumber; i > 0; i--) {\n            wheels.push({ display: i + '', value: i + '' });\n        }\n\n        if (!wheels.length) {\n            wheels.push({ display: '1', value: '1' });\n        }\n\n        this.modalService\n            .openPickerModal(\n                { wheels, selected: [this.roomOption.personCount] },\n                { cancelBtnText: 'GENERAL.remove', title: 'PICKER.SELECT_ROOM' }\n            )\n            .then((modal) => {\n                if (modal.data?.selected) {\n                    this.roomOption.personCount = parseInt(modal.data.selected[0], 10);\n                    this.roomCountChanged.emit();\n                    this.getRoomPrice.emit({ price: this.roomPrice.listPrice, id: this.roomOption.id });\n                }\n\n                if (modal.data?.cancel) {\n                    this.roomOption.personCount = 0;\n                    this.roomCountChanged.emit();\n                    this.getRoomPrice.emit({ price: this.roomPrice.listPrice, id: this.roomOption.id });\n                }\n            });\n    }\n\n    private updateMaxValue(): void {\n        this.maxValue = Math.min(this.maxRoomSelectionNumber, this.roomOption.roomsLeft);\n    }\n}\n","<button\n    class=\"tz-mob-select-btn room-offer-select-button\"\n    data-mob=\"room-option-on-select-room\"\n    (click)=\"selectRoomOffer()\"\n    [ngClass]=\"{ 'mob-selected-btn': roomOption.personCount }\"\n>\n    {{ roomOption.personCount > 0 ? ('GENERAL.SELECTED' | translate) : ('GENERAL.SELECT' | translate) }}\n    <span *ngIf=\"roomOption.personCount\">{{ roomOption.personCount }}</span>\n    <tz-icon *ngIf=\"roomOption.roomsLeft > 1\" class=\"room-offer-select-btn__icon\" icon=\"arrow-down-white\"></tz-icon>\n</button>\n","import { Component, Input } from '@angular/core';\nimport { RoomOption } from '@schemas/modules/accommodations/room-option';\n\n@Component({\n    selector: 'tz-mob-accommodation-selected-room-offer',\n    templateUrl: './mob-accommodation-selected-room-offer.component.html',\n    styleUrls: ['./mob-accommodation-selected-room-offer.component.scss'],\n})\nexport class MobAccommodationSelectedRoomOfferComponent {\n    @Input() roomOption!: RoomOption;\n}\n","<div class=\"room-offer-wrapper\">\n    <div *ngIf=\"roomOption.capacity <= 4\" class=\"room-option flex\">\n        <span\n            class=\"room-option__description-item\"\n            [class.room-option--description-item-green-color]=\"\n                roomOption.mealTypeCode !== 'nomeal' && roomOption.mealTypeCode !== 'RO'\n            \"\n        >\n            {{ roomOption.meal }}\n        </span>\n        <span class=\"room-option__description-item\">|</span>\n        <span class=\"room-option__description-item\">{{ roomOption.bedSize }}</span>\n    </div>\n\n    <div\n        class=\"room-offer-wrapper__free-cancelation\"\n        [class.room-offer-wrapper__free-cancelation-bgcolor]=\"\n            roomOption.roomCancellation.cancellationPolicy === 'Refundable'\n        \"\n    >\n        {{\n            roomOption.roomCancellation.messageKey\n                | translate: { date: roomOption.roomCancellation.endDateTime | tzDate: 'mediumDate' }\n        }}\n    </div>\n\n    <div class=\"room-offer-wrapper__T-C tz-purple-link\" data-mob=\"room-offer-wrapper-cancelation-policy\">\n        {{ 'HOTELS.TERMS_CONDITIONS' | translate }}\n    </div>\n</div>\n\n<div class=\"price-container\">\n    <span class=\"price-container__left-rooms\">Only {{ roomOption.roomsLeft }} rooms left</span>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'tz-mob-accommodation-skeleton',\n    templateUrl: './mob-accommodation-skeleton.component.html',\n    styleUrls: ['./mob-accommodation-skeleton.component.scss'],\n})\nexport class MobAccommodationSkeletonComponent implements OnInit {\n    public items = new Array(20);\n\n    constructor() {}\n\n    ngOnInit() {}\n}\n","<div class=\"tz-skeleton-loader\">\n    <div *ngFor=\"let item of items\" class=\"tz-skeleton-block\">\n        <div class=\"acc-img\">\n            <ngx-skeleton-loader [theme]=\"{ height: '100%', width: '100%' }\"></ngx-skeleton-loader>\n        </div>\n        <div class=\"acc-skeleton-option\">\n            <ngx-skeleton-loader [theme]=\"{ height: '100%', width: '100%' }\"></ngx-skeleton-loader>\n            <ngx-skeleton-loader [theme]=\"{ height: '100%', width: '100%' }\"></ngx-skeleton-loader>\n            <ngx-skeleton-loader class=\"small\" [theme]=\"{ height: '100%', width: '100%' }\"></ngx-skeleton-loader>\n        </div>\n    </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'tz-mob-confirm-button-block',\n    templateUrl: './mob-confirm-button-block.component.html',\n    styleUrls: ['./mob-confirm-button-block.component.scss'],\n})\nexport class MobConfirmButtonBlockComponent {\n    @Input() public totalPrice!: number;\n    @Input() public priceCurrency!: string;\n    @Input() public roomsQuantity: number | undefined;\n    @Output() public confirm: EventEmitter<void> = new EventEmitter<void>();\n\n    public onBooking(): void {\n        this.confirm.emit();\n    }\n}\n","<div class=\"mob-book-block tz-fixed-bottom\">\n    <div class=\"mob-book-block__info-block\">\n        <p class=\"mob-book-block__info-block-text\">{{ 'GENERAL.TOTAL' | translate }}</p>\n        <div class=\"mob-book-block__summary\">\n            <p class=\"mob-book-block__price\">{{ totalPrice | tzCurrency: priceCurrency }}</p>\n            <p class=\"mob-book-block__description\" *ngIf=\"roomsQuantity\">\n                {{ 'GENERAL.TOTAL_PRICE_FOR' | translate }} {{ roomsQuantity }}\n                {{ 'HOTELS.' + (roomsQuantity > 1 ? 'rOOMS' : 'rOOM') | translate\n                }}<span class=\"text-vertical-divider\">&nbsp;|&nbsp;</span>{{ 'TRAIN.ALL_TAXES' | translate }}\n            </p>\n        </div>\n    </div>\n\n    <div class=\"mob-book-block__book-btn-block\"></div>\n    <button class=\"tz-mob-btn tz-mob-btn--tertiary\" data-test=\"confirm-btn\" (click)=\"onBooking()\">\n        {{ 'GENERAL.CONFIRM' | translate }}\n    </button>\n</div>\n"],"names":["ServiceId","BehaviorSubject","Subject","BaseServiceComponent","StateFrom","ListenerId","finalize","skip","takeUntil","AccommodationsSort","TzMapComponent","CartUtils","AccommodationsUtilsService","FilterService","SearchUtilsService","ResultsFiltersUtils","i0","ctx_r9","ctx_r11","ctx_r13","ctx_r0","ctx_r15","ctx_r17","ctx_r18","ctx_r19","ctx_r1","ctx_r22","ctx_r24","ctx_r25","ctx_r27","ctx_r3","ctx_r35","ctx_r37","ctx_r38","ctx_r33","ctx_r39","ctx_r41","ctx_r42","ctx_r43","ctx_r5","AccommodationsComponent","constructor","accommodationsDataService","accommodationsService","injector","ACC","isNextSummary","nextIsSummary","isMobile$","screenSizeDetectorService","isMobile","stateFrom","getStateFromParamFromRouter","accommodationListMetadata","getAccommodationListMetadata","nearestAccommodationListMetadata","getNearestAccommodationListMetadata","lastRequestParams","start","limit","increment","section","isEnableClearFilter","enableClearAll","accommodationsFilter","ngOnInit","searchRunning","showSkeletonLoader","getCartServiceData","cartData","items","length","hasBooked","selectedItem","bookingOptions","cartRouterService","goToState","ACC_DETAILS","giataId","data","giataID","hotelName","name","initializeComponent","ngOnDestroy","listenersService","unregisterListener","repriceListenerId","destroy$","next","complete","search","searchedHotel","maxHotels","total","idx","console","log","self","maxLoadedIdx","accommodations","nearestAccommodations","callScroller","onNextPage","setTimeout","onFilterChanged","$event","scrollToServiceContainer","filterAccommodations","sortAccommodations","sortValue","resetPagination","saveSortingValue","filterQueryParams","sort_by","loadAccommodationsData","onCancelSelection","onOpenFilterPopup","filter","subscribe","filterReferenceItem","searchHotel","openFilterDialog","resultsCount$","paginationFinishedCB","error","paginate","onChangeHotel","accommodationsListSkeletonLoaderElementReference","scrollToElement","accommodationsListElementReference","onChangeRooms","mapHotel","selectHotel","ACC_LIST","changeRoom","onSelectHotel","onRemoveSelectedAccommodation","optionId","removeService","serviceId","then","isRemoved","showHotelsOnMap","accSearchData","searchDataService","getSearchData","address","mapCenterPosition","lng","longitude","lat","latitude","selectedHotel","location","mapConf","height","width","maxWidth","panelClass","selectedHotelId","id","dialogService","openAccommodationDialog","afterClosed","hotel","position","onOpenFilterModal","openFilterModal","onResetFilter","filters$","pipe","resetFilter","mobOpenSort","sort$","sortKey","openSortMob","sortByOptions","inc","params","sortBy","cache_buster","isListCompleted","isLastRequestTheSame","isNextPage","handleAccommodationsPaginateResponse","maxIteration","el","document","getElementById","scrollIntoView","block","behavior","elem","prevScroll","scrollToIndex","setAccommodationList","setMapHotel","hotelNames","setNearestAccommodationList","setMetadataOfTheAccommodation","setFilter","checkConsistency","checkResultsAvailable","currentDataId","hasAvailableData","getDataId","restoreAccFromService","initSearchParams","searchServiceData","accommodationsResponse","hideSkeletonLoader","handleAccommodationsDataResponse","handleExtraParams","filterCount","ogs","checkServiceFailedAndNotify","window","prerenderReady","filterServiceData","selected_id","cartService","getSelected","refreshFilter","loadFilter","resultsCount","filterService","filterChange$","selectedFiltersCount","selectedFiltersCounter","hasRooms","some","acc","noRoom","setAccListMetadata","getCount","selectedHotelCode","find","accommodationsResponseSection","accommodationRecommendedID","bestValueHotel","handlingAccommodationsData","filterAccommodationsData","nearestAcc","cartId","_a","_b","filterDataRemoveCartItem","state","router","getCurrentNavigation","extras","from","SUMMARY","TAB","getSelectedAccommodationsData","accLength","totalInCity","totalNearCity","Object","getDestinationNameOfTheCity","setAccommodationListMetadata","destinationName","cityName","cartAccID","handlingData","setSortingValue","sort","getSortingValue","lastParams","accommodationTotal","nearestAccommodationTotal","serviceTitle","formServiceTitle","settingsService","selectedLanguageSubject","currencyService","selectedCurrencySubject","registerListener","LISTEN_REPRICED","startPollerIfTheFullDataIsNotLoaded","bind","getAccommodationsList","getNearestAccommodationsList","accMetadata","nearestMetadata","getFilter","currentPage","currentItem","getMapHotel","getHotelNames","history","extra","extraAction","hasOwnProperty","selectors","viewQuery","EventEmitter","ctx_r7","ctx_r8","ctx_r4","ctx_r2","AccommodationListUiItemComponent","platformService","userService","isAcc","type","getCheapestOffer","IsLogged","recOffersLoggedIn","cheapestPrice","taxInfo","roomType","_c","breakFastType","_d","breakFastTypeCode","_e","payAt","_f","cpType","_g","roomsLeft","_h","numberOfRooms","_j","emit","inputs","outputs","openAccommodationInMap","decls","vars","consts","template","_r1"],"sourceRoot":"webpack:///"}