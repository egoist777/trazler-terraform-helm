{"version":3,"file":"src_app_modules_customer_travellers_travellers_module_ts.js","mappings":"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","sources":["./src/app/modules/customer/travellers/components/mob-traveler-form/mob-traveler-form.component.ts","./src/app/modules/customer/travellers/components/mob-traveler-form/mob-traveler-form.component.html","./src/app/modules/customer/travellers/components/mob-travellers-list/mob-travellers-list.component.ts","./src/app/modules/customer/travellers/components/mob-travellers-list/mob-travellers-list.component.html","./src/app/modules/customer/travellers/components/travellers-list/travellers-list.component.ts","./src/app/modules/customer/travellers/components/travellers-list/travellers-list.component.html","./src/app/modules/customer/travellers/travellers-routing.module.ts","./src/app/modules/customer/travellers/travellers.component.ts","./src/app/modules/customer/travellers/travellers.component.html","./src/app/modules/customer/travellers/travellers.module.ts"],"sourcesContent":["import { Component, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ListenerId } from '@core/constants/listener-id.const';\nimport { ModalService } from '@services/modal.service';\nimport { ListenersService } from '@services/modules/core/listeners-service';\nimport { Passenger } from '@shared/schemas/tz-customer-info';\n\n@Component({\n    selector: 'tz-mob-traveler-form',\n    templateUrl: './mob-traveler-form.component.html',\n    styleUrls: ['./mob-traveler-form.component.scss'],\n})\nexport class MobTravelerFormComponent implements OnDestroy {\n    public data!: {\n        formGroup: FormGroup;\n        selectedTraveller: Passenger;\n    };\n\n    private listenerId;\n    constructor(private modalService: ModalService, private listenersService: ListenersService) {\n        this.listenerId = this.listenersService.registerListener(\n            ListenerId.CUSTOMER_INFO_UPDATED,\n            this.closeModel,\n            this\n        );\n    }\n\n    ngOnDestroy(): void {\n        this.listenersService.unregisterListener(this.listenerId);\n    }\n\n    public closeModel(): void {\n        this.modalService.dismiss(true);\n    }\n}\n","<tz-traveller\n    *ngIf=\"data && data.formGroup\"\n    [ngClass]=\"{ 'saved-traveler': data.selectedTraveller.id && data.selectedTraveller.id !== '' }\"\n    [formGroup]=\"data.formGroup\"\n    [selectedTraveller]=\"data.selectedTraveller\"\n    [isProfile]=\"true\"\n></tz-traveller>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ModalService } from '@services/modal.service';\nimport { CustomerInfo } from '@shared/schemas/tz-customer-info';\nimport { MobTravelerFormComponent } from '../mob-traveler-form/mob-traveler-form.component';\n\n@Component({\n    selector: 'tz-mob-travellers-list',\n    templateUrl: './mob-travellers-list.component.html',\n    styleUrls: ['./mob-travellers-list.component.scss'],\n})\nexport class MobTravellersListComponent {\n    @Input() customerInformation!: CustomerInfo;\n    @Input() travellersFormArray!: FormGroup[];\n\n    constructor(private modalService: ModalService) {}\n\n    public openTraveller(idx: number): void {\n        this.modalService.createDetailsPage(MobTravelerFormComponent, {\n            data: {\n                formGroup: this.travellersFormArray[idx],\n                selectedTraveller: this.customerInformation.passengers[idx],\n            },\n            title: 'TRAVELLER.TRAVELERS',\n            modalCustomClasses: ['profile-traveler'],\n        });\n    }\n}\n","<ng-container *ngIf=\"customerInformation.passengers.length === 1; else travelersList\">\n    <div class=\"no-traveler\">\n        <tz-icon icon=\"no-travelers\"></tz-icon>\n        <div class=\"no-traveler__title\" translate=\"TRAVELLER.NO_TRAVELERS_YET\"></div>\n        <div class=\"no-traveler__text\" translate=\"TRAVELLER.NO_TRAVELERS_TEXT\"></div>\n        <div class=\"add-new-traveler\" (click)=\"openTraveller(0)\" translate=\"TRAVELLER.ADD_NEW_TRAVELER\"></div>\n    </div>\n</ng-container>\n<ng-template #travelersList>\n    <div class=\"travelers-list\">\n        <ng-container *ngFor=\"let passenger of customerInformation.passengers; let i = index\">\n            <div *ngIf=\"passenger.id\" (click)=\"openTraveller(i)\">\n                {{ passenger.firstName }} {{ passenger.middleName }} {{ passenger.lastName }}\n            </div>\n        </ng-container>\n    </div>\n    <div\n        class=\"add-new-traveler\"\n        (click)=\"openTraveller(customerInformation.passengers.length - 1)\"\n        translate=\"TRAVELLER.ADD_NEW_TRAVELER\"\n    ></div>\n</ng-template>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CustomerInfo } from '@shared/schemas/tz-customer-info';\n\n@Component({\n    selector: 'tz-travellers-list',\n    templateUrl: './travellers-list.component.html',\n    styleUrls: ['./travellers-list.component.scss'],\n})\nexport class TravellersListComponent {\n    @Input() travellersForm = new FormGroup({});\n    @Input() customerInformation!: CustomerInfo;\n    @Input() travellerIdx = -1;\n    @Input() travellersFormArray!: FormGroup[];\n\n    @Output() openTraveller = new EventEmitter<number>();\n\n    constructor(private translateService: TranslateService) {}\n\n    public formBannerText(traveller: FormGroup, idx: number): string {\n        if (!traveller?.value?.firstName && !traveller?.value?.middleName && !traveller?.value?.lastName) {\n            if (idx === 0) {\n                return this.translateService.instant('TRAVELLER.PRIMARY_TRAVELER');\n            } else {\n                return (\n                    this.translateService.instant('GENERAL.add') +\n                    ' ' +\n                    this.translateService.instant('TRAVELLER.TRAVELER')\n                );\n            }\n        }\n\n        return `${traveller.value.firstName ?? ''}\n        ${traveller.value.middleName ?? ''}\n        ${traveller.value.lastName ?? ''}`;\n    }\n}\n","<div class=\"tz-form-container mb-0\">\n    <ng-container [formGroup]=\"travellersForm\">\n        <ng-container formArrayName=\"travellers\" *ngFor=\"let traveller of travellersFormArray; let i = index\">\n            <div\n                class=\"traveller-banner\"\n                [class]=\"customerInformation.passengers[i].id ? 'travellers-list' : 'add-banner'\"\n                [formGroup]=\"traveller\"\n                (click)=\"openTraveller.emit(i)\"\n            >\n                <div class=\"traveller-validation\" data-test=\"profile-travellers-primary-traveller\">\n                    <span class=\"body-2-semibold text-capitalize\" [ngClass]=\"{ 'primary-traveller': i === 0 }\">\n                        {{ formBannerText(traveller, i) }}</span\n                    >\n                    <div class=\"tz-icon-arrow\" [ngClass]=\"{ opened: i === travellerIdx }\"></div>\n                    <div class=\"add-traveller\" data-test=\"profile-travellers-add-traveller\"></div>\n                </div>\n            </div>\n            <tz-traveller\n                [ngClass]=\"{ opened: i === travellerIdx }\"\n                [formGroup]=\"traveller\"\n                [selectedTraveller]=\"customerInformation.passengers[i]\"\n                [isProfile]=\"true\"\n            ></tz-traveller>\n        </ng-container>\n    </ng-container>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ModifiedFormGuard } from '@core/router-gaurds/modified-form.guard';\nimport { TravellersComponent } from './travellers.component';\n\nconst routes: Routes = [{ path: '', component: TravellersComponent, canDeactivate: [ModifiedFormGuard] }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TravellersRoutingModule {}\n","import { Component, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { FormGroup, FormBuilder, FormArray } from '@angular/forms';\n\nimport { CustomerInfo, Passenger } from '@shared/schemas/tz-customer-info';\nimport { UserService } from '@services/modules/user/services/user.service';\nimport { TzTravellerService } from '@services/services/tzTraveller.service';\nimport { ListenersService } from '@services/modules/core/listeners-service';\nimport { ListenerId } from '@core/constants/listener-id.const';\nimport { PlatformService } from '@services/platform.service';\n\n@Component({\n    selector: 'tz-travellers',\n    templateUrl: './travellers.component.html',\n    styleUrls: ['./travellers.component.scss'],\n})\nexport class TravellersComponent implements OnInit, OnDestroy, AfterViewInit {\n    public customerInformation!: CustomerInfo;\n    public travellersForm = new FormGroup({});\n    public travellerIdx = -1;\n    public readonly page = 'PROFILE.TRAVELERS_INFORMATION';\n\n    private listenerId = -1;\n\n    constructor(\n        private userService: UserService,\n        private fb: FormBuilder,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        private tzTravellerService: TzTravellerService,\n        private listenersService: ListenersService,\n        public platformService: PlatformService\n    ) {}\n\n    get travellersFormArray(): FormGroup[] {\n        const formArray = this.travellersForm?.get('travellers') as FormArray;\n        return formArray.controls as FormGroup[];\n    }\n\n    get isDirty(): boolean {\n        return this.travellersFormArray.some((form: FormGroup) => form.dirty);\n    }\n\n    ngOnInit() {\n        this.customerInformation = this.userService.getCustomerInformation();\n        this.createTravellersForm();\n        this.listenerId = this.listenersService.registerListener(\n            ListenerId.CUSTOMER_INFO_UPDATED,\n            this.updateCustomerInfo,\n            this\n        );\n    }\n\n    ngAfterViewInit(): void {\n        this.changeDetectorRef.detectChanges();\n    }\n\n    public addTravellerForm(): void {\n        const travellerGrp = this.tzTravellerService.createTravellerGroup('profile', true);\n        this.travellersFormArray.push(this.fb.group(travellerGrp));\n    }\n\n    public onOpenTraveller(idx: number): void {\n        if (this.travellerIdx === idx) {\n            this.travellerIdx = -1;\n        } else {\n            this.travellerIdx = idx;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.listenersService.unregisterListener(this.listenerId);\n    }\n\n    private updateCustomerInfo(): void {\n        this.userService.getCustomer(true).then(\n            (customer: CustomerInfo) => {\n                console.log('Updated Customer info: ', customer);\n                this.customerInformation = customer;\n                this.travellerIdx = -1;\n                this.createTravellersForm();\n                this.changeDetectorRef.detectChanges();\n            },\n            (err: any) => {\n                this.customerInformation = {} as CustomerInfo;\n                console.log('Error fetching customer info: ', err);\n            }\n        );\n    }\n\n    private addNewTraveller(): void {\n        if (this.customerInformation.passengers.length === 0) {\n            this.travellerIdx = 0;\n        }\n\n        this.customerInformation.passengers.push({} as Passenger);\n        this.addTravellerForm();\n    }\n\n    private createTravellersForm(): void {\n        this.travellersForm = this.fb.group({\n            travellers: this.fb.array([]),\n        });\n\n        if (!this.customerInformation.passengers) {\n            this.customerInformation.passengers = [];\n        }\n\n        for (const passenger of this.customerInformation.passengers) {\n            if (!passenger.id) {\n                continue;\n            }\n\n            this.addTravellerForm();\n        }\n\n        this.addNewTraveller();\n    }\n}\n","<tz-mob-travellers-list\n    *ngIf=\"platformService.isMobileDevice$ | async\"\n    [travellersFormArray]=\"travellersFormArray\"\n    [customerInformation]=\"customerInformation\"\n></tz-mob-travellers-list>\n<tz-travellers-list\n    *ngIf=\"(platformService.isMobileDevice$ | async) === false\"\n    [travellersForm]=\"travellersForm\"\n    [travellersFormArray]=\"travellersFormArray\"\n    [customerInformation]=\"customerInformation\"\n    [travellerIdx]=\"travellerIdx\"\n    (openTraveller)=\"onOpenTraveller($event)\"\n></tz-travellers-list>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { TravellersRoutingModule } from './travellers-routing.module';\nimport { TravellersComponent } from './travellers.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { TravellersListComponent } from './components/travellers-list/travellers-list.component';\nimport { MobTravellersListComponent } from './components/mob-travellers-list/mob-travellers-list.component';\nimport { MobTravelerFormComponent } from './components/mob-traveler-form/mob-traveler-form.component';\n\n@NgModule({\n    declarations: [TravellersComponent, TravellersListComponent, MobTravellersListComponent, MobTravelerFormComponent],\n    imports: [CommonModule, TravellersRoutingModule, ReactiveFormsModule, SharedModule],\n})\nexport class TravellersModule {}\n"],"names":["FormGroup","ListenerId","i0","ctx_r0","ctx_r2","ctx_r1","TravellersComponent","constructor","userService","fb","changeDetectorRef","tzTravellerService","listenersService","platformService","travellersFormArray","formArray","travellersForm","_a","get","controls","isDirty","some","form","dirty","ngOnInit","customerInformation","getCustomerInformation","createTravellersForm","listenerId","registerListener","CUSTOMER_INFO_UPDATED","updateCustomerInfo","ngAfterViewInit","detectChanges","addTravellerForm","travellerGrp","createTravellerGroup","push","group","onOpenTraveller","idx","travellerIdx","ngOnDestroy","unregisterListener","getCustomer","then","customer","console","log","err","addNewTraveller","passengers","length","travellers","array","passenger","id","selectors","decls","vars","consts","template"],"sourceRoot":"webpack:///"}