{"version":3,"file":"src_app_modules_reset-password_reset-password_module_ts.js","mappings":"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","sources":["./src/app/modules/reset-password/reset-password-routing.module.ts","./src/app/modules/reset-password/reset-password.component.ts","./src/app/modules/reset-password/reset-password.component.html","./src/app/modules/reset-password/reset-password.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ResetPasswordComponent } from './reset-password.component';\n\nconst routes: Routes = [{ path: '', component: ResetPasswordComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class ResetPasswordRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ValidatorPatterns } from '@core/constants/validation-patterns.const';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DialogService } from '@services/dialog.service';\nimport { UserDataService } from '@services/modules/user/dataservices/user.data.service';\nimport { UserService } from '@services/modules/user/services/user.service';\n\n@Component({\n    selector: 'tz-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.scss'],\n})\nexport class ResetPasswordComponent implements OnInit {\n    public formGroup = new FormGroup({\n        newPassword: new FormControl('', [Validators.required, Validators.pattern(ValidatorPatterns.PASSWORD)]),\n        reEnteredNewPassword: new FormControl('', [\n            Validators.required,\n            Validators.pattern(ValidatorPatterns.PASSWORD),\n        ]),\n    });\n    public showPassword = {\n        newPassword: false,\n        confirmPassword: false,\n    };\n    public passwordUpdated = false;\n\n    private token: string;\n    private customerMail: string;\n\n    constructor(\n        private userDataService: UserDataService,\n        private activeRoute: ActivatedRoute,\n        private router: Router,\n        private dialogService: DialogService,\n        private translateService: TranslateService,\n        private userService: UserService\n    ) {\n        this.token = this.activeRoute.snapshot.params['token'];\n        this.customerMail = this.activeRoute.snapshot.data['customerMail'];\n    }\n\n    ngOnInit() {\n        this.formGroup.controls['newPassword'].addValidators([this.triggerEnteredPassword()]);\n        this.formGroup.controls['reEnteredNewPassword'].addValidators([this.updatereEnteredPassword()]);\n    }\n\n    public validatePassword(patternStr: string): boolean {\n        const pattern = new RegExp(patternStr);\n        return pattern.test(this.formGroup.controls['newPassword'].value);\n    }\n\n    public changeTzPassword(): void {\n        const formValue = this.formGroup.value;\n        const passwordData = {\n            token: this.token,\n            password: formValue.newPassword,\n            confirmPassword: formValue.reEnteredNewPassword,\n        };\n\n        this.userDataService.resetTzPassword(passwordData).subscribe(\n            () => {\n                this.passwordUpdated = true;\n            },\n            (failure) => {\n                this.router.navigate(['search']).then(() => {\n                    this.dialogService.openSnackBarDialog(this.translateService.instant('NOTIFS.INVALID_TOKEN'));\n                });\n            }\n        );\n    }\n\n    public proceedLogin(): void {\n        this.userService.openLoginModel(this.customerMail).finally(() => {\n            this.router.navigate(['search']);\n        });\n    }\n\n    private triggerEnteredPassword(): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            control.parent?.get('reEnteredNewPassword')?.updateValueAndValidity();\n            return null;\n        };\n    }\n\n    private updatereEnteredPassword(): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            const newPassword = control.parent?.get('newPassword')?.value;\n\n            if (control.valid && newPassword && newPassword !== '' && control.value !== newPassword) {\n                return { NEW_PASSWORD_DID_NOT_MATCH: true };\n            }\n\n            return null;\n        };\n    }\n}\n","<div class=\"password-updated\" *ngIf=\"passwordUpdated\">\n    <div class=\"password-updated__title\">\n        {{ 'ACCOUNT.PASSWORD.SAVED_TITLE' | translate }}\n    </div>\n    <div class=\"password-updated__text body-1\">\n        {{ 'ACCOUNT.PASSWORD.SAVED_MSG' | translate }}\n    </div>\n    <button class=\"tz-btn tz-btn-primary\" translate=\"ACCOUNT.SIGN.SIGN_IN\" (click)=\"proceedLogin()\"></button>\n</div>\n\n<div class=\"tz-form-container change-password-container\" *ngIf=\"!passwordUpdated\">\n    <div class=\"tz-form-container__title\">\n        {{ 'ACCOUNT.PASSWORD.CREATE' | translate }}\n    </div>\n    <div class=\"tz-form-container__form\">\n        <form class=\"form-group-container\" [formGroup]=\"formGroup\">\n            <div class=\"field-row\">\n                <div class=\"tz-field\">\n                    <span class=\"tz-field__name\">{{ 'ACCOUNT.PASSWORD.NEW_PASSWORD' | translate }}</span>\n                    <input\n                        #newPassword\n                        type=\"{{ showPassword.newPassword ? 'text' : 'password' }}\"\n                        formControlName=\"newPassword\"\n                        autocomplete=\"off\"\n                        autocorrect=\"off\"\n                        autocapitalize=\"off\"\n                        placeholder=\" \"\n                    />\n                    <span\n                        class=\"valid-check eye-icon\"\n                        [ngClass]=\"{ 'eye-normal': showPassword.newPassword, 'eye-slash': !showPassword.newPassword }\"\n                        (click)=\"showPassword.newPassword = !showPassword.newPassword; newPassword.focus()\"\n                    ></span>\n                </div>\n            </div>\n            <div class=\"field-row\">\n                <div class=\"tz-field\">\n                    <span class=\"tz-field__name\">{{ 'ACCOUNT.PASSWORD.REPEAT_NEW' | translate }}</span>\n                    <input\n                        #reEnteredNewPassword\n                        type=\"{{ showPassword.confirmPassword ? 'text' : 'password' }}\"\n                        formControlName=\"reEnteredNewPassword\"\n                        autocomplete=\"off\"\n                        autocorrect=\"off\"\n                        autocapitalize=\"off\"\n                        placeholder=\" \"\n                    />\n                    <span\n                        class=\"valid-check eye-icon\"\n                        [ngClass]=\"{\n                            'eye-normal': showPassword.confirmPassword,\n                            'eye-slash': !showPassword.confirmPassword\n                        }\"\n                        (click)=\"\n                            showPassword.confirmPassword = !showPassword.confirmPassword; reEnteredNewPassword.focus()\n                        \"\n                    ></span>\n                </div>\n            </div>\n            <div class=\"password-validations\">\n                <p class=\"body-2-semibold\">{{ 'ACCOUNT.PASSWORD.ACCOUNT_PASSWORD_MUST' | translate }}</p>\n                <ul class=\"body-3\">\n                    <li [class]=\"{ 'valid-check': validatePassword('.{8,}') }\">\n                        <span class=\"tz-icon-check-nobg\"></span>\n                        {{ 'ACCOUNT.PASSWORD.BE_AT_LEAST_8_CHARACTERS' | translate }}\n                    </li>\n                    <li [class]=\"{ 'valid-check': validatePassword('(?=.*?[A-Z])(?=.*?[a-z])') }\">\n                        <span class=\"tz-icon-check-nobg\"></span>\n                        {{ 'ACCOUNT.PASSWORD.USE_BOTH_UPPER_AND_LOWER_CASE_LETTERS' | translate }}\n                    </li>\n                    <li [class]=\"{ 'valid-check': validatePassword('(?=.*?[0-9])') }\">\n                        <span class=\"tz-icon-check-nobg\"></span>\n                        {{ 'ACCOUNT.PASSWORD.INCLUDE_AT_LEAST_ONE_NUMBER' | translate }}\n                    </li>\n                </ul>\n            </div>\n            <div class=\"password-actions flex space-between\">\n                <div class=\"field-row change-password-btn form-btn-container\">\n                    <button class=\"tz-btn tz-btn-primary save-btn\" (click)=\"changeTzPassword()\">\n                        {{ 'ACCOUNT.PASSWORD.MODIFY' | translate }}\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '@shared/shared.module';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\n\n@NgModule({\n    declarations: [ResetPasswordComponent],\n    imports: [CommonModule, ResetPasswordRoutingModule, ReactiveFormsModule, SharedModule],\n})\nexport class ResetPasswordModule {}\n"],"names":[],"sourceRoot":"webpack:///"}