{"version":3,"file":"src_app_modules_customer_payment_payment_module_ts.js","mappings":"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","sources":["./src/app/modules/customer/payment/payment-routing.module.ts","./src/app/modules/customer/payment/payment.component.ts","./src/app/modules/customer/payment/payment.component.html","./src/app/modules/customer/payment/payment.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ModifiedFormGuard } from '@core/router-gaurds/modified-form.guard';\nimport { PaymentComponent } from './payment.component';\n\nconst routes: Routes = [{ path: '', component: PaymentComponent, canDeactivate: [ModifiedFormGuard] }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class PaymentRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ValidatorPatterns } from '@core/constants/validation-patterns.const';\n\n@Component({\n    selector: 'tz-payment',\n    templateUrl: './payment.component.html',\n    styleUrls: ['./payment.component.scss'],\n})\nexport class PaymentComponent implements OnInit {\n    public paymentForm = new FormGroup({});\n    public readonly page = 'GENERAL.PAYMENT';\n\n    constructor(private fb: FormBuilder) {}\n\n    get cardsFormArray(): FormGroup[] {\n        const formArray = this.paymentForm?.get('cards') as FormArray;\n        return formArray.controls as FormGroup[];\n    }\n\n    get isDirty(): boolean {\n        return this.cardsFormArray.some((form: FormGroup) => form.dirty);\n    }\n\n    ngOnInit() {\n        this.createPaymentFormGroup();\n    }\n\n    private addNewCard() {\n        this.cardsFormArray.push(\n            this.fb.group({\n                cardNumber: new FormControl('', Validators.required),\n                expiryDate: new FormControl('', Validators.required),\n                holder: new FormControl('', [Validators.required, Validators.pattern(ValidatorPatterns.NAME)]),\n                cvc: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(4)]),\n                address: new FormControl('', Validators.pattern(ValidatorPatterns.STRING)),\n                zipCode: new FormControl('', Validators.pattern(ValidatorPatterns.ZIPCODE)),\n                city: new FormControl('', Validators.pattern(ValidatorPatterns.STRING)),\n                country: new FormControl(''),\n            })\n        );\n    }\n\n    private createPaymentFormGroup() {\n        this.paymentForm = this.fb.group({\n            cards: this.fb.array([] as FormGroup[]),\n        });\n        this.addNewCard();\n    }\n}\n","<div class=\"tz-form-container title-mb mb-0\">\n    <ng-container [formGroup]=\"paymentForm\">\n        <ng-container formArrayName=\"cards\" *ngFor=\"let card of cardsFormArray; let i = index\">\n            <div class=\"tz-form-container__form\">\n                <form class=\"form-group-container\" [formGroup]=\"card\">\n                    <div class=\"field-row\">\n                        <div class=\"tz-field\">\n                            <span class=\"tz-field__name\">{{ 'CREDIT_CARDS.NUMBER' | translate }}</span>\n                            <input\n                                data-test=\"payment-method-card-number\"\n                                type=\"text\"\n                                formControlName=\"cardNumber\"\n                                autocomplete=\"off\"\n                                autocorrect=\"off\"\n                                autocapitalize=\"off\"\n                                placeholder=\" \"\n                            />\n                            <span class=\"valid-check\"></span>\n                        </div>\n                        <div class=\"tz-field\">\n                            <span class=\"tz-field__name\">{{ 'CREDIT_CARDS.EXPIRATION_DATE' | translate }}</span>\n                            <input\n                                data-test=\"payment-method-expiration-date\"\n                                type=\"text\"\n                                formControlName=\"expiryDate\"\n                                autocomplete=\"off\"\n                                autocorrect=\"off\"\n                                autocapitalize=\"off\"\n                                placeholder=\"MM/YY\"\n                            />\n                            <span class=\"valid-check\"></span>\n                        </div>\n                    </div>\n                    <div class=\"field-row stripe-row\">\n                        <div class=\"tz-field\">\n                            <span class=\"tz-field__name\">{{ 'CREDIT_CARDS.HOLDERS_NAME' | translate }}</span>\n                            <input\n                                data-test=\"payment-method-cardholders-name\"\n                                type=\"text\"\n                                formControlName=\"holder\"\n                                autocomplete=\"off\"\n                                autocorrect=\"off\"\n                                autocapitalize=\"off\"\n                                placeholder=\" \"\n                            />\n                            <span class=\"valid-check\"></span>\n                        </div>\n                        <div class=\"tz-field\">\n                            <span class=\"tz-field__name\">{{ 'CREDIT_CARDS.CVC_CODE' | translate }}</span>\n                            <input\n                                data-test=\"payment-method-card-cvc\"\n                                type=\"text\"\n                                formControlName=\"cvc\"\n                                autocomplete=\"off\"\n                                autocorrect=\"off\"\n                                autocapitalize=\"off\"\n                                placeholder=\" \"\n                            />\n                            <span class=\"valid-check\"></span>\n                        </div>\n                    </div>\n                    <tz-payment-address [formGroup]=\"card\"></tz-payment-address>\n                    <div class=\"field-row mt-3\">\n                        <div class=\"field-row save-cancel\">\n                            <button class=\"btn select-btn selected save-btn\" data-test=\"payment-method-save-btn\">\n                                {{ 'PROFILE.Save' | translate }}\n                            </button>\n                            <button class=\"btn select-btn\" data-test=\"payment-method-cancel-btn\">\n                                {{ 'GENERAL.CANCEL' | translate }}\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </ng-container>\n    </ng-container>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PaymentRoutingModule } from './payment-routing.module';\nimport { SharedModule } from '@shared/shared.module';\nimport { PaymentComponent } from './payment.component';\n\n@NgModule({\n    declarations: [PaymentComponent],\n    imports: [CommonModule, PaymentRoutingModule, SharedModule, ReactiveFormsModule],\n})\nexport class PaymentModule {}\n"],"names":[],"sourceRoot":"webpack:///"}