{"version":3,"file":"src_app_modules_customer_password_password_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAQO,MAAM,wBAAwB;IACjC,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAElD,QAAQ,KAAI,CAAC;IAEN,OAAO;QACV,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;;gGAPQ,wBAAwB;sHAAxB,wBAAwB;QCRrC,yEAAgD;QACzC,uDAA4C;;QAAA,4DAAI;QACnD,4EAA4E;QAC5E,4EAAoH;QAApB,gJAAS,aAAS,IAAC;QAC/G,uDACJ;;QAAA,4DAAS;;QAJN,0DAA4C;QAA5C,4JAA4C;QAClC,0DAAe;QAAf,wEAAe;QAExB,0DACJ;QADI,yJACJ;;;;;;;;;;;;;;;;;;;;ACJmD;AACqB;AACnB;;;AAEzD,MAAM,MAAM,GAAW,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,kEAAiB,EAAE,aAAa,EAAE,CAAC,sFAAiB,CAAC,EAAE,CAAC,CAAC;AAMjG,MAAM,qBAAqB;;0FAArB,qBAAqB;kHAArB,qBAAqB;sHAHrB,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEb,qBAAqB,oFAFpB,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR0F;AACtC;AAQsB;;;;;;;;;;;;ICoFhF,wEAAyD;IACrD,0EAA0B;IAAA,uDAAwC;;IAAA,4DAAM;IACxE,uDACJ;;IAAA,qEAAe;;;IAFe,0DAAwC;IAAxC,wJAAwC;IAClE,0DACJ;IADI,kMACJ;;;IAJJ,0EAA4D;IACxD,uIAGe;IACnB,4DAAM;;;IAJa,0DAAwC;IAAxC,2GAAwC;;;;;IAMvD,6EAMC;IADG,mSAAS,kBAAW,IAAC;IAErB,uDACJ;;IAAA,4DAAS;;;IAJL,sKAA4C;IAG5C,0DACJ;IADI,6JACJ;;;;ADzFb,MAAM,iBAAiB;IAiB1B,YACW,eAAgC,EAC/B,WAAwB,EACxB,eAAgC,EAChC,aAA4B,EAC5B,gBAAkC,EACzB,iBAAoC,EAC7C,YAA0B,EAC1B,QAAkB;QAPnB,oBAAe,GAAf,eAAe,CAAiB;QAC/B,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAChC,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QACzB,sBAAiB,GAAjB,iBAAiB,CAAmB;QAC7C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,aAAQ,GAAR,QAAQ,CAAU;QAvBvB,cAAS,GAAG,IAAI,qDAAS,CAAC;YAC7B,eAAe,EAAE,IAAI,uDAAW,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,8DAAkB,CAAC,iGAA0B,CAAC,CAAC,CAAC;YAC3G,WAAW,EAAE,IAAI,uDAAW,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,8DAAkB,CAAC,iGAA0B,CAAC,CAAC,CAAC;YACvG,oBAAoB,EAAE,IAAI,uDAAW,CAAC,EAAE,EAAE;gBACtC,+DAAmB;gBACnB,8DAAkB,CAAC,iGAA0B,CAAC;aACjD,CAAC;SACL,CAAC,CAAC;QACI,iBAAY,GAAG;YAClB,eAAe,EAAE,KAAK;YACtB,WAAW,EAAE,KAAK;YAClB,eAAe,EAAE,KAAK;SACzB,CAAC;QACc,SAAI,GAAG,uBAAuB,CAAC;IAW5C,CAAC;IAEJ,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAChC,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;QAErE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;QACtF,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;IACpG,CAAC;IAEM,gBAAgB,CAAC,UAAkB;QACtC,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;QACvC,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;IAEM,SAAS;QACZ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAEM,gBAAgB;QACnB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QACvC,MAAM,UAAU,GAAG;YACf,eAAe,EAAE,SAAS,CAAC,eAAe;YAC1C,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,eAAe,EAAE,SAAS,CAAC,oBAAoB;YAC/C,UAAU,EAAE,QAAQ;SACvB,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,SAAS,CACpF,GAAG,EAAE;YACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;YACvC,IAAI,CAAC,+BAA+B,EAAE,CAAC;QAC3C,CAAC,EACD,CAAC,OAAY,EAAE,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAErB,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;YAC3C,IAAI,YAAY,GAAG,aAAa,CAAC,eAAe,CAAC;YACjD,IAAI,CAAC,YAAY,EAAE;gBACf,IAAI,aAAa,CAAC,WAAW,EAAE;oBAC3B,YAAY,GAAG,aAAa,CAAC,WAAW,CAAC;iBAC5C;qBAAM;oBACH,YAAY,GAAG,aAAa,CAAC,eAAe,CAAC;iBAChD;aACJ;YAED,IAAI,YAAY,EAAE;gBACd,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC;oBAC5B,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,YAAY,CAAC;iBACvD,CAAC,CAAC;aACN;QACL,CAAC,CACJ,CAAC;IACN,CAAC;IAEO,+BAA+B;QACnC,IAAI,CAAC,YAAY;aACZ,eAAe,CAAY,6GAAwB,EAAE,EAAE,KAAK,EAAE,yBAAyB,EAAE,CAAC;aAC1F,IAAI,CAAC,GAAG,EAAE;YACP,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,sBAAsB;QAC1B,OAAO,CAAC,OAAwB,EAA2B,EAAE;;YACzD,mBAAO,CAAC,MAAM,0CAAE,GAAG,CAAC,sBAAsB,CAAC,0CAAE,sBAAsB,EAAE,CAAC;YACtE,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC;IACN,CAAC;IAEO,uBAAuB;QAC3B,OAAO,CAAC,OAAwB,EAA2B,EAAE;;YACzD,MAAM,WAAW,GAAG,mBAAO,CAAC,MAAM,0CAAE,GAAG,CAAC,aAAa,CAAC,0CAAE,KAAK,CAAC;YAE9D,IAAI,OAAO,CAAC,KAAK,IAAI,WAAW,IAAI,WAAW,KAAK,EAAE,IAAI,OAAO,CAAC,KAAK,KAAK,WAAW,EAAE;gBACrF,OAAO,EAAE,0BAA0B,EAAE,IAAI,EAAE,CAAC;aAC/C;YAED,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC;IACN,CAAC;;kFA9GQ,iBAAiB;+GAAjB,iBAAiB;;QCnB9B,yEAAuE;QAKtB,uDAAqD;;QAAA,4DAAO;QACzF,yEASE;QACF,2EAOC;QADG,0VAAuE,WAAuB,IAAC;QAClG,4DAAO;QAGhB,0EAAuB;QAEc,wDAAiD;;QAAA,4DAAO;QACrF,4EASE;QACF,2EAIC;QADG,mVAA+D,WAAmB,IAAC;QACtF,4DAAO;QAGhB,uEAAsD;QAGb,wDAA+C;;QAAA,4DAAO;QACnF,4EASE;QACF,2EAUC;QAJG,2VAGxB,WACF,IAD2B;QACJ,4DAAO;QAGhB,2EAA4E;QAC7C,wDAA0D;;QAAA,4DAAI;QACzF,0EAAmB;QAEX,uEAAwC;QACxC,wDACJ;;QAAA,4DAAK;QACL,sEAA8E;QAC1E,uEAAwC;QACxC,wDACJ;;QAAA,4DAAK;QACL,sEAAkE;QAC9D,uEAAwC;QACxC,wDACJ;;QAAA,4DAAK;QAKjB,2EAAiD;QAC7C,gHAKM;QACN,2EAA8D;QAC1D,sHAQS;QACT,8EAIC;QADG,0IAAS,sBAAkB,IAAC;QAE5B,wDACJ;;QAAA,4DAAS;;QAjHc,0DAAuB;QAAvB,oFAAuB;QAGjB,0DAAqD;QAArD,sKAAqD;QAI9E,0DAA+D;QAA/D,mIAA+D;QAS/D,0DAGE;QAHF,gNAGE;QAOuB,0DAAiD;QAAjD,mKAAiD;QAI1E,0DAA2D;QAA3D,+HAA2D;QAS3D,0DAA8F;QAA9F,wMAA8F;QAKrG,0DAAgD;QAAhD,wGAAgD;QAGZ,0DAA+C;QAA/C,iKAA+C;QAIxE,0DAA+D;QAA/D,mIAA+D;QAS/D,0DAGE;QAHF,gNAGE;QASiB,0DAA0D;QAA1D,4KAA0D;QAE7E,0DAAsD;QAAtD,+JAAsD;QAEtD,0DACJ;QADI,0LACJ;QACI,0DAAyE;QAAzE,kLAAyE;QAEzE,0DACJ;QADI,uMACJ;QACI,0DAA6D;QAA7D,sKAA6D;QAE7D,0DACJ;QADI,6LACJ;QAMa,0DAAqC;QAArC,qGAAqC;QAQjD,0DAAqC;QAArC,qGAAqC;QAatC,0DACJ;QADI,wKACJ;;;;;;;;;;;;;;;;;;;;;;;AClH2B;AACM;AAEa;AACb;AACI;AAC2C;;AAM7F,MAAM,cAAc;;4EAAd,cAAc;2GAAd,cAAc;+GAFd,CAAC,yDAAY,EAAE,2EAAqB,EAAE,+DAAmB,EAAE,+DAAY,CAAC;mIAExE,cAAc,mBAHR,kEAAiB,EAAE,6GAAwB,aAChD,yDAAY,EAAE,2EAAqB,EAAE,+DAAmB,EAAE,+DAAY","sources":["./src/app/modules/customer/password/components/password-confirm/password-confirm.component.ts","./src/app/modules/customer/password/components/password-confirm/password-confirm.component.html","./src/app/modules/customer/password/password-routing.module.ts","./src/app/modules/customer/password/password.component.ts","./src/app/modules/customer/password/password.component.html","./src/app/modules/customer/password/password.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ModalService } from '@services/modal.service';\n\n@Component({\n    selector: 'tz-password-confirm',\n    templateUrl: './password-confirm.component.html',\n    styleUrls: ['./password-confirm.component.scss'],\n})\nexport class PasswordConfirmComponent implements OnInit {\n    constructor(private modalService: ModalService) {}\n\n    ngOnInit() {}\n\n    public onClose(): void {\n        this.modalService.dismiss();\n    }\n}\n","<div class=\"change-password-container__success\">\n    <p>{{ 'ACCOUNT.PASSWORD.CHANGED' | translate }}</p>\n    <tz-svg-icon [mobile]=\"true\" [icon]=\"'change-password-image'\"></tz-svg-icon>\n    <button class=\"tz-btn tz-btn-primary full-width\" data-test=\"password-close-change-password-btn\" (click)=\"onClose()\">\n        {{ 'GENERAL.OK' | translate }}\n    </button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ModifiedFormGuard } from '@core/router-gaurds/modified-form.guard';\nimport { PasswordComponent } from './password.component';\n\nconst routes: Routes = [{ path: '', component: PasswordComponent, canDeactivate: [ModifiedFormGuard] }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class PasswordRoutingModule {}\n","import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { ValidatorPatterns } from '@core/constants/validation-patterns.const';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DialogService } from '@services/dialog.service';\nimport { UserService } from '@services/modules/user/services/user.service';\nimport { UserDataService } from '@services/modules/user/dataservices/user.data.service';\nimport { CustomerInfo } from '@shared/schemas/tz-customer-info';\nimport { PlatformService } from '@services/platform.service';\nimport { ModalService } from '@services/modal.service';\nimport { PasswordConfirmComponent } from './components/password-confirm/password-confirm.component';\nimport { Location } from '@angular/common';\n\n@Component({\n    selector: 'tz-password',\n    templateUrl: './password.component.html',\n    styleUrls: ['./password.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PasswordComponent implements OnInit {\n    public customerInformation!: CustomerInfo;\n    public formGroup = new FormGroup({\n        currentPassword: new FormControl('', [Validators.required, Validators.pattern(ValidatorPatterns.PASSWORD)]),\n        newPassword: new FormControl('', [Validators.required, Validators.pattern(ValidatorPatterns.PASSWORD)]),\n        reEnteredNewPassword: new FormControl('', [\n            Validators.required,\n            Validators.pattern(ValidatorPatterns.PASSWORD),\n        ]),\n    });\n    public showPassword = {\n        currentPassword: false,\n        newPassword: false,\n        confirmPassword: false,\n    };\n    public readonly page = 'ACCOUNT.SIGN.PASSWORD';\n\n    constructor(\n        public platformService: PlatformService,\n        private userService: UserService,\n        private userDataService: UserDataService,\n        private dialogService: DialogService,\n        private translateService: TranslateService,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        private modalService: ModalService,\n        private location: Location\n    ) {}\n\n    get isDirty(): boolean {\n        return this.formGroup.dirty;\n    }\n\n    ngOnInit() {\n        this.customerInformation = this.userService.getCustomerInformation();\n\n        this.formGroup.controls['newPassword'].addValidators([this.triggerEnteredPassword()]);\n        this.formGroup.controls['reEnteredNewPassword'].addValidators([this.updatereEnteredPassword()]);\n    }\n\n    public validatePassword(patternStr: string): boolean {\n        const pattern = new RegExp(patternStr);\n        return pattern.test(this.formGroup.controls['newPassword'].value);\n    }\n\n    public resetForm(): void {\n        this.formGroup.reset();\n    }\n\n    public changeTzPassword(): void {\n        const formValue = this.formGroup.value;\n        const updatePass = {\n            currentPassword: formValue.currentPassword,\n            newPassword: formValue.newPassword,\n            confirmPassword: formValue.reEnteredNewPassword,\n            updateType: 'change',\n        };\n\n        this.userDataService.changeTzPassword(this.customerInformation.id, updatePass).subscribe(\n            () => {\n                this.formGroup.reset();\n                this.changeDetectorRef.detectChanges();\n                this.openModalSuccessChangedPassword();\n            },\n            (failure: any) => {\n                console.log(failure);\n\n                const failureErrors = failure.error.errors;\n                let errorMessage = failureErrors.currentPassword;\n                if (!errorMessage) {\n                    if (failureErrors.newPassword) {\n                        errorMessage = failureErrors.newPassword;\n                    } else {\n                        errorMessage = failureErrors.confirmPassword;\n                    }\n                }\n\n                if (errorMessage) {\n                    this.dialogService.openSnackBar({\n                        message: this.translateService.instant(errorMessage),\n                    });\n                }\n            }\n        );\n    }\n\n    private openModalSuccessChangedPassword(): void {\n        this.modalService\n            .createMainModal<undefined>(PasswordConfirmComponent, { title: 'ACCOUNT.PASSWORD.CHANGE' })\n            .then(() => {\n                this.location.back();\n            });\n    }\n\n    private triggerEnteredPassword(): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            control.parent?.get('reEnteredNewPassword')?.updateValueAndValidity();\n            return null;\n        };\n    }\n\n    private updatereEnteredPassword(): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            const newPassword = control.parent?.get('newPassword')?.value;\n\n            if (control.valid && newPassword && newPassword !== '' && control.value !== newPassword) {\n                return { NEW_PASSWORD_DID_NOT_MATCH: true };\n            }\n\n            return null;\n        };\n    }\n}\n","<div class=\"tz-form-container change-password-container title-mb mb-0\">\n    <div class=\"tz-form-container__form\">\n        <form class=\"form-group-container\" [formGroup]=\"formGroup\">\n            <div class=\"field-row current-password\">\n                <div class=\"tz-field\">\n                    <span class=\"tz-field__name\">{{ 'ACCOUNT.PASSWORD.CURRENT_PASSWORD' | translate }}</span>\n                    <input\n                        data-test=\"password-current-password\"\n                        #currentPassword\n                        type=\"{{ showPassword.currentPassword ? 'text' : 'password' }}\"\n                        formControlName=\"currentPassword\"\n                        autocomplete=\"off\"\n                        autocorrect=\"off\"\n                        autocapitalize=\"off\"\n                        placeholder=\" \"\n                    />\n                    <span\n                        class=\"valid-check eye-icon\"\n                        [ngClass]=\"{\n                            'eye-normal': !showPassword.currentPassword,\n                            'eye-slash': showPassword.currentPassword\n                        }\"\n                        (click)=\"showPassword.currentPassword = !showPassword.currentPassword; currentPassword.focus()\"\n                    ></span>\n                </div>\n            </div>\n            <div class=\"field-row\">\n                <div class=\"tz-field\">\n                    <span class=\"tz-field__name\">{{ 'ACCOUNT.PASSWORD.NEW_PASSWORD' | translate }}</span>\n                    <input\n                        data-test=\"password-new-password\"\n                        #newPassword\n                        type=\"{{ showPassword.newPassword ? 'text' : 'password' }}\"\n                        formControlName=\"newPassword\"\n                        autocomplete=\"off\"\n                        autocorrect=\"off\"\n                        autocapitalize=\"off\"\n                        placeholder=\" \"\n                    />\n                    <span\n                        class=\"valid-check eye-icon\"\n                        [ngClass]=\"{ 'eye-normal': !showPassword.newPassword, 'eye-slash': showPassword.newPassword }\"\n                        (click)=\"showPassword.newPassword = !showPassword.newPassword; newPassword.focus()\"\n                    ></span>\n                </div>\n            </div>\n            <div [class.reverse]=\"platformService.isMobileDevice\">\n                <div class=\"field-row\">\n                    <div class=\"tz-field\">\n                        <span class=\"tz-field__name\">{{ 'ACCOUNT.PASSWORD.REPEAT_NEW' | translate }}</span>\n                        <input\n                            data-test=\"password-repeat-new-password\"\n                            #reEnteredNewPassword\n                            type=\"{{ showPassword.confirmPassword ? 'text' : 'password' }}\"\n                            formControlName=\"reEnteredNewPassword\"\n                            autocomplete=\"off\"\n                            autocorrect=\"off\"\n                            autocapitalize=\"off\"\n                            placeholder=\" \"\n                        />\n                        <span\n                            class=\"valid-check eye-icon\"\n                            [ngClass]=\"{\n                                'eye-normal': !showPassword.confirmPassword,\n                                'eye-slash': showPassword.confirmPassword\n                            }\"\n                            (click)=\"\n                                showPassword.confirmPassword = !showPassword.confirmPassword;\n                                reEnteredNewPassword.focus()\n                            \"\n                        ></span>\n                    </div>\n                </div>\n                <div class=\"password-validations\" data-test=\"password-password-validations\">\n                    <p class=\"body-2-semibold\">{{ 'ACCOUNT.PASSWORD.ACCOUNT_PASSWORD_MUST' | translate }}</p>\n                    <ul class=\"body-3\">\n                        <li [class]=\"{ 'valid-check': validatePassword('.{8,}') }\">\n                            <span class=\"tz-icon-check-nobg\"></span>\n                            {{ 'ACCOUNT.PASSWORD.BE_AT_LEAST_8_CHARACTERS' | translate }}\n                        </li>\n                        <li [class]=\"{ 'valid-check': validatePassword('(?=.*?[A-Z])(?=.*?[a-z])') }\">\n                            <span class=\"tz-icon-check-nobg\"></span>\n                            {{ 'ACCOUNT.PASSWORD.USE_BOTH_UPPER_AND_LOWER_CASE_LETTERS' | translate }}\n                        </li>\n                        <li [class]=\"{ 'valid-check': validatePassword('(?=.*?[0-9])') }\">\n                            <span class=\"tz-icon-check-nobg\"></span>\n                            {{ 'ACCOUNT.PASSWORD.INCLUDE_AT_LEAST_ONE_NUMBER' | translate }}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n            <div class=\"password-actions flex space-between\">\n                <div class=\"body-3\" *ngIf=\"!platformService.isMobileDevice\">\n                    <ng-container *ngIf=\"customerInformation.registeredDate\">\n                        <div class=\"member-since\">{{ 'ACCOUNT.MEMBER_SINCE' | translate }}</div>\n                        {{ customerInformation.registeredDate | tzDate: 'longDate' }}\n                    </ng-container>\n                </div>\n                <div class=\"field-row change-password-btn form-btn-container\">\n                    <button\n                        *ngIf=\"!platformService.isMobileDevice\"\n                        class=\"tz-btn tz-btn-secondary cancel-btn\"\n                        data-test=\"password-cancel-btn\"\n                        [ngClass]=\"{ passive: formGroup.untouched }\"\n                        (click)=\"resetForm()\"\n                    >\n                        {{ 'GENERAL.CANCEL' | translate }}\n                    </button>\n                    <button\n                        class=\"tz-btn tz-btn-primary save-btn\"\n                        data-test=\"password-change-password-btn\"\n                        (click)=\"changeTzPassword()\"\n                    >\n                        {{ 'ACCOUNT.PASSWORD.CHANGE' | translate }}\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PasswordRoutingModule } from './password-routing.module';\nimport { SharedModule } from '@shared/shared.module';\nimport { PasswordComponent } from './password.component';\nimport { PasswordConfirmComponent } from './components/password-confirm/password-confirm.component';\n\n@NgModule({\n    declarations: [PasswordComponent, PasswordConfirmComponent],\n    imports: [CommonModule, PasswordRoutingModule, ReactiveFormsModule, SharedModule],\n})\nexport class PasswordModule {}\n"],"names":[],"sourceRoot":"webpack:///"}